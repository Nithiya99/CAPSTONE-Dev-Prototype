[{"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\layout\\LayoutComponent.js":"1","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\FeedbackForm.js":"2","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\RatingComponentFeedbackForm.js":"3","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\App.js":"4","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\core\\Notifications.js":"5","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\user\\apiUser.js":"6","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\SubmitProject.js":"7","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\LeaveProject.js":"8","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\RatingComponent.js":"9","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\utils\\signupbutton\\Tagify\\TagFinal.js":"10","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\SearchProjectBar.js":"11","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\utils\\signupbutton\\Tagify\\Assigner.js":"12"},{"size":23474,"mtime":1624178533962,"results":"13","hashOfConfig":"14"},{"size":2241,"mtime":1622021641541,"results":"15","hashOfConfig":"14"},{"size":2185,"mtime":1622021980407,"results":"16","hashOfConfig":"14"},{"size":479,"mtime":1620823754762,"results":"17","hashOfConfig":"14"},{"size":13588,"mtime":1622018144601,"results":"18","hashOfConfig":"14"},{"size":7380,"mtime":1620823755400,"results":"19","hashOfConfig":"14"},{"size":4607,"mtime":1618892882908,"results":"20","hashOfConfig":"14"},{"size":2668,"mtime":1621913510177,"results":"21","hashOfConfig":"14"},{"size":1643,"mtime":1618321235394,"results":"22","hashOfConfig":"14"},{"size":1247,"mtime":1618198716000,"results":"23","hashOfConfig":"14"},{"size":4178,"mtime":1621773052142,"results":"24","hashOfConfig":"14"},{"size":1452,"mtime":1618198716000,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"13vq143",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\layout\\LayoutComponent.js",["51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82"],"import React, { Component } from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport Pert from \"./Pert\";\r\nimport Task from \"./Task\";\r\nimport ReactFlow, {\r\n  addEdge,\r\n  Background,\r\n  Controls,\r\n  MiniMap,\r\n  removeElements,\r\n} from \"react-flow-renderer\";\r\nimport {\r\n  addTask,\r\n  getTasks,\r\n  putConnections,\r\n  deleteConnections,\r\n  getConnections,\r\n  putPredecessors,\r\n  putPosition,\r\n  putExpectedTime,\r\n} from \"../apiProject\";\r\nimport jsPERT from \"js-pert\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport {\r\n  nodeAdded,\r\n  connectionAdded,\r\n  replaceNodes,\r\n  replaceConnections,\r\n  replaceElements,\r\n  setPert,\r\n  setExpectedTime,\r\n  setSlacks,\r\n  setCriticalPath,\r\n} from \"../../store/cpm\";\r\nimport { updateTasks } from \"../../store/tasks\";\r\nimport { getCurrentUser } from \"./../../user/apiUser\";\r\nimport moment from \"moment\";\r\nconst styles = (theme) => ({\r\n  modal: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  paper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 3, 3),\r\n  },\r\n});\r\nclass LayoutComponent extends Component {\r\n  state = {\r\n    elements: [],\r\n    tasks: [],\r\n    nodes: [],\r\n    pert: {},\r\n    task: {},\r\n    show: false,\r\n    checked: false,\r\n    bleh: 1,\r\n  };\r\n\r\n  onElementsRemove = (elementsToRemove) => {\r\n    if (this.props.project.leader.toString() === getCurrentUser()._id) {\r\n      let cons = this.props.connections;\r\n      const filteredConnections = cons.filter(\r\n        (con) => con.id !== elementsToRemove[0].id\r\n      );\r\n      this.props.replaceConnections({ connections: filteredConnections });\r\n      cons.map((con) => {\r\n        if (con.id === elementsToRemove[0].id) {\r\n          // console.log(con.id, elementsToRemove[0].id);\r\n          deleteConnections(this.props.project._id, con._id).then((data) => {\r\n            console.log(\"connection deleted\");\r\n            // this.pertCalc();\r\n          });\r\n          return;\r\n        }\r\n      });\r\n    }\r\n  };\r\n  onLoad = (reactFlowInstance) => {\r\n    reactFlowInstance.fitView();\r\n  };\r\n  onNodeDragStop = (e, node) => {\r\n    // console.log(node.position, node.data._id);\r\n    putPosition(this.props.project._id, node.data._id, node.position).then(\r\n      () => {\r\n        console.log(node.position + \" is saved\");\r\n      }\r\n    );\r\n  };\r\n  edgeInElements(elements, edge) {\r\n    let inside = false;\r\n    elements.map((elem) => {\r\n      if (elem.id.toString() === edge.id.toString()) {\r\n        inside = true;\r\n      }\r\n      return \"done\";\r\n    });\r\n    return inside;\r\n  }\r\n  onConnect = (params) => {\r\n    if (this.props.project.leader.toString() === getCurrentUser()._id) {\r\n      let source = params.source;\r\n      let target = params.target;\r\n      if (source !== undefined && target !== undefined) {\r\n        let edge = {\r\n          id:\r\n            \"reactflow__edge-\" +\r\n            source.toString() +\r\n            \"null-\" +\r\n            target.toString() +\r\n            \"null\",\r\n          source: source.toString(),\r\n          sourceHandle: null,\r\n          target: target.toString(),\r\n          targetHandle: null,\r\n        };\r\n        // console.log(this.state.elements);\r\n        let sourceId = \"\";\r\n        let targetId = \"\";\r\n        // console.log(this.props.nodes);\r\n        this.props.nodes.map((elem) => {\r\n          if (elem.id === source) {\r\n            sourceId = elem.key;\r\n          }\r\n          if (elem.id === target) {\r\n            targetId = elem.key;\r\n          }\r\n        });\r\n        putPredecessors(this.props.project._id, targetId, sourceId).then(() => {\r\n          console.log(sourceId + \" has new Predecessor \" + targetId);\r\n        });\r\n        // let ele = [...this.state.elements];\r\n        // if (!this.edgeInElements(ele, edge)) {\r\n        //   ele.push(edge);\r\n        putConnections(this.props.project._id, sourceId, targetId).then(() => {\r\n          console.log(\"connection \" + sourceId + \"to \" + targetId + \"added\");\r\n        });\r\n        // }\r\n        this.props.connectionAdded({ connection: edge });\r\n        // this.setState({ elements: ele });\r\n        // console.log(this.state.elements);\r\n        this.pertCalc();\r\n      }\r\n    }\r\n  };\r\n  getIdOfObjectId = (elemId) => {\r\n    let id = {};\r\n    const { nodes } = this.props;\r\n    id = nodes.map((elem) => {\r\n      if (elem.data !== undefined)\r\n        if (elem.data._id.toString() === elemId) {\r\n          id = elem.id;\r\n        }\r\n      return id;\r\n    });\r\n    return id[id.length - 1];\r\n  };\r\n  // handleClose = () => {\r\n  //   this.setState({ show: false });\r\n  // };\r\n  pertCalc = () => {\r\n    // this.setState({ show: true });\r\n    // console.log(\"inside pertCalc:\", tasksObject);\r\n    let nodes = this.props.nodes.map((elem) => ({\r\n      ...elem,\r\n    }));\r\n    // let connections = this.props.connections.map((elem) => ({\r\n    //   ...elem,\r\n    // }));\r\n    // console.log(connections);\r\n    // let { connections } = this.props;\r\n    // console.log(\"props:\", this.props.connections);\r\n    // console.log(\"connections:\");\r\n    let ids = [];\r\n    this.props.connections.map((connection) => {\r\n      // console.log(connection.source, connection.target);\r\n      if (!ids.includes(connection.source)) {\r\n        ids.push(connection.source.toString());\r\n      }\r\n      if (!ids.includes(connection.target)) {\r\n        ids.push(connection.target.toString());\r\n      }\r\n    });\r\n    // console.log(\"nodes:\");\r\n    let newNodes = [];\r\n    nodes.map((node) => {\r\n      if (ids.includes(node.id)) newNodes.push(node);\r\n    });\r\n\r\n    let tasksObject = ids.includes(\"1\")\r\n      ? {\r\n          1: {\r\n            id: \"1\",\r\n            mostLikelyTime: 0,\r\n            optimisticTime: 0,\r\n            pessimisticTime: 0,\r\n            predecessors: [],\r\n          },\r\n        }\r\n      : {};\r\n    // console.log(\"TasksObject before node addition:\", tasksObject);\r\n    // console.log(ids);\r\n    // console.log(\"nodes sent for pertcalc:\", newNodes);\r\n    newNodes.map((elem) => {\r\n      if (\r\n        elem.data.predecessors.length === 0 ||\r\n        elem.data.predecessors === undefined\r\n      )\r\n        return;\r\n      elem.data.predecessors.map((pre, index) => {\r\n        let id = this.getIdOfObjectId(pre.toString());\r\n        // console.log(id);\r\n        let predecessors = [...elem.data.predecessors];\r\n        predecessors[index] = id.toString();\r\n        elem.data = { ...elem.data, predecessors };\r\n      });\r\n    });\r\n    // console.log(nodes);\r\n    tasksObject = newNodes.map((elem) => {\r\n      // console.log(\"tasksObject node:\", elem);\r\n      tasksObject[elem.id.toString()] = {\r\n        id: elem.id.toString(),\r\n        optimisticTime: elem.data.optimistic,\r\n        mostLikelyTime: elem.data.time,\r\n        pessimisticTime: elem.data.pessimistic,\r\n        predecessors: elem.data.predecessors,\r\n      };\r\n      return tasksObject;\r\n    });\r\n    let tasksObjectFinal = tasksObject[tasksObject.length - 1];\r\n    console.log(\"TasksObject:\");\r\n    console.log(tasksObjectFinal);\r\n    console.log(\"Pert:\");\r\n    let pert = {};\r\n    // console.log(\"gonna set pert\");\r\n    try {\r\n      // if (tasksObject[1] !== undefined) {\r\n      // console.log(tasksObject[1]);\r\n      pert = jsPERT(tasksObjectFinal);\r\n      this.props.setPert({ pert });\r\n      console.log(this.props.pert);\r\n      // this.props.setSlacks({ slackObject: this.props.pert.slack });\r\n      // console.log(\"slacks:\");\r\n      let slackObject = {};\r\n      slackObject = newNodes.map((elem, index) => {\r\n        // console.log(elem.id, pert.slack[elem.id]);\r\n        if (index !== 0 && index !== 1) {\r\n          // console.log(\"Slack elem:\", elem);                           // Website design layout\r\n          console.log(\"index:\", index);\r\n          console.log(\"task:\", elem.data.label);\r\n          let created = elem.data.created;\r\n\r\n          // let earliestFinish = new Date(\r\n          //   pert.earliestFinishTimes[index] + created\r\n          // ); // 23/5 + 3\r\n          let createdDate = new Date(created);\r\n          let earliestFinish = moment(createdDate, \"DD-MM-YYYY\").add(\r\n            pert.earliestFinishTimes[index + 1],\r\n            \"days\"\r\n          );\r\n          earliestFinish = earliestFinish._d;\r\n          // let slack = new Date(pert.slack[elem.id]);\r\n          const diffTime = Math.abs(earliestFinish - createdDate);\r\n          const duration = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n          // console.log(duration);\r\n          let today = new Date();\r\n          let todayDate = new Date(today.toUTCString()); // 25/5\r\n          let earliestStart = moment(createdDate, \"DD-MM-YYYY\").add(\r\n            +pert.earliestStartTimes[index + 1],\r\n            \"days\"\r\n          );\r\n          earliestStart = earliestStart._d;\r\n          // console.log(todayDate, startTime._d);\r\n          const diffTime2 = Math.abs(todayDate - earliestStart);\r\n          let daysDone = Math.ceil(diffTime2 / (1000 * 60 * 60 * 24));\r\n          // console.log(daysDone);\r\n          let finaldiff = Math.abs(duration - daysDone);\r\n          let days = Math.round(\r\n            (earliestFinish - todayDate) / (1000 * 60 * 60 * 24)\r\n          );\r\n          console.log(earliestStart, todayDate, earliestFinish);\r\n          console.log(\r\n            \"no. of days done:\",\r\n            Math.round(todayDate - earliestStart) / (1000 * 60 * 60 * 24)\r\n          );\r\n          console.log(\r\n            \"no. of days left:\",\r\n            Math.round((earliestFinish - todayDate) / (1000 * 60 * 60 * 24))\r\n          );\r\n          days = pert.slack[elem.id] !== 0 ? days + pert.slack[elem.id] : days;\r\n          // 23/5 25/5 26/5\r\n          // console.log(\"slack:\", pert.slack[elem.id]);\r\n          // console.log(\"day1:\", duration);\r\n          // console.log(\"day2:\", daysDone);\r\n          // console.log(\"days left:\", days);\r\n          // console.log(\"Overdue\", days >= 0 ? false : true);\r\n          // console.log(elem.data.label + \" \" + days + \" \" + pert.slack[elem.id]);\r\n          slackObject[elem.data.label] = {\r\n            slack: pert.slack[elem.id],\r\n            days: days,\r\n            daysPassed: Math.round(\r\n              (todayDate - earliestStart) / (1000 * 60 * 60 * 24)\r\n            ),\r\n            earliestStartDate: earliestStart,\r\n            todayDate: todayDate,\r\n            earliestFinishDate: earliestFinish,\r\n            overdue: days >= 0 ? false : true,\r\n          };\r\n          return slackObject;\r\n        }\r\n      });\r\n      console.log(\"slacks Object:\", slackObject[slackObject.length - 1]);\r\n      let obj = slackObject[slackObject.length - 1];\r\n      this.props.setSlacks({ slackObject: obj });\r\n      let newNodesObject = {};\r\n      newNodesObject = newNodes.map((node) => {\r\n        newNodesObject[node.id] = node.data;\r\n        return newNodesObject;\r\n      });\r\n      newNodesObject = newNodesObject[newNodesObject.length - 1];\r\n      // console.log(\"newNodesObject:\", newNodesObject);\r\n      let criticalPathData = {};\r\n      criticalPathData = pert.criticalPath.map((id) => {\r\n        criticalPathData[id] = newNodesObject[id];\r\n        return criticalPathData;\r\n      });\r\n      criticalPathData = criticalPathData[criticalPathData.length - 1];\r\n      console.log(\"criticalPathDataObject:\", criticalPathData);\r\n      this.props.setCriticalPath({ criticalPath: criticalPathData });\r\n      \r\n      this.props.setExpectedTime({\r\n        expectedTime: Math.floor(this.props.pert.latestFinishTimes.__end),\r\n      });\r\n      putExpectedTime(\r\n        this.props.project._id,\r\n        Math.floor(this.props.pert.latestFinishTimes.__end)\r\n      );\r\n      // }\r\n    } catch (err) {\r\n      // console.log(err);\r\n      this.props.setPert({ pert: {} });\r\n      // console.log(this.props.pert);\r\n      this.props.setExpectedTime({\r\n        expectedTime: 0,\r\n      });\r\n      putExpectedTime(this.props.project._id, 0);\r\n    }\r\n    // this.setState({ pert });\r\n  };\r\n  onElementClick = (event, element) => {\r\n    console.log(element);\r\n  };\r\n  componentDidMount() {\r\n    let newNodes = [];\r\n\r\n    getTasks(this.props.project._id).then((data) => {\r\n      // console.log(data.tasks);\r\n      const tasks = data.tasks;\r\n      let newTasks = [];\r\n      tasks.map((task) => {\r\n        newTasks.push({ ...task });\r\n      });\r\n      newTasks.map((task) => {\r\n        task[\"label\"] = task.taskName;\r\n        task[\"description\"] = task.description;\r\n        task[\"time\"] = task.mostLikelyTime;\r\n        task[\"optimistic\"] = task.optimisticTime;\r\n        task[\"pessimistic\"] = task.pessimisticTime;\r\n        if (\r\n          task.taskName !== \"Completed!!\" &&\r\n          task.taskName !== \"Lets Start Working\"\r\n        ) {\r\n          let newNode = {\r\n            key: task._id,\r\n            id: (newNodes.length + 1).toString(),\r\n            data: task,\r\n            sourcePosition: \"right\",\r\n            targetPosition: \"left\",\r\n            position:\r\n              task.position !== undefined\r\n                ? task.position\r\n                : {\r\n                    x: (Math.random() * window.innerWidth) / 2,\r\n                    y: (Math.random() * window.innerHeight) / 2,\r\n                  },\r\n          };\r\n          newNodes.push(newNode);\r\n        }\r\n        if (task.taskName === \"Lets Start Working\") {\r\n          let ele = [...this.state.elements];\r\n          let newNode = {\r\n            key: task._id,\r\n            id: \"1\",\r\n            type: \"input\",\r\n            data: {\r\n              label: \"Lets Start Working\",\r\n              description: \"Start working on tasks to complete project on time\",\r\n              pessimistic: 0,\r\n              time: 0,\r\n              optimistic: 0,\r\n              predecessors: [],\r\n              _id: task._id,\r\n            },\r\n            sourcePosition: \"right\",\r\n            position:\r\n              task.position !== undefined ? task.position : { x: 0, y: 0 },\r\n          };\r\n          newNodes.push(newNode);\r\n        }\r\n        if (task.taskName === \"Completed!!\") {\r\n          let ele = [...this.state.elements];\r\n          let newNode = {\r\n            key: task._id,\r\n            id: \"2\",\r\n            type: \"output\",\r\n            data: {\r\n              label: \"Completed!!\",\r\n              description: \"Yaaayy you gus have completed the project\",\r\n              pessimistic: 0,\r\n              time: 0,\r\n              optimistic: 0,\r\n              predecessors: task.predecessors,\r\n              _id: task._id,\r\n            },\r\n            targetPosition: \"left\",\r\n            position:\r\n              task.position !== undefined ? task.position : { x: 500, y: 0 },\r\n          };\r\n          newNodes.push(newNode);\r\n        }\r\n      });\r\n      this.props.replaceNodes({ nodes: newNodes });\r\n      // console.log(\"Mount nodes:\", this.props.nodes);\r\n    });\r\n    getConnections(this.props.project._id)\r\n      .then((data) => {\r\n        let connections = [];\r\n        data.connections.map((link) => {\r\n          newNodes.map((elem) => {\r\n            if (elem.key !== undefined) {\r\n              if (link.from.toString() === elem.key.toString()) {\r\n                this.setState({ source: elem });\r\n              }\r\n              if (link.to.toString() === elem.key.toString()) {\r\n                this.setState({ target: elem });\r\n              }\r\n            }\r\n          });\r\n          let source = this.state.source;\r\n          let target = this.state.target;\r\n          if (source !== undefined && target !== undefined) {\r\n            let edge = {\r\n              id:\r\n                \"reactflow__edge-\" +\r\n                source.id.toString() +\r\n                \"null-\" +\r\n                target.id.toString() +\r\n                \"null\",\r\n              source: source.id.toString(),\r\n              sourceHandle: null,\r\n              target: target.id.toString(),\r\n              targetHandle: null,\r\n              _id: link._id,\r\n            };\r\n            connections.push(edge);\r\n          }\r\n          return \"done\";\r\n        });\r\n        // console.log(connections);\r\n        this.props.replaceConnections({ connections: connections });\r\n      })\r\n      .then(() => {\r\n        this.pertCalc();\r\n      });\r\n  }\r\n  componentDidUpdate(prevState, prevProps) {\r\n    if (this.props.connections.length !== prevState.connections.length) {\r\n      this.pertCalc();\r\n      // console.log(prevState.connections.length, this.props.connections.length);\r\n      // console.log(\"Pert from comp update:\", this.props.pert);\r\n      // console.log(\"Pert calculation nodes:\", this.props.nodes);\r\n    }\r\n    if (prevState.tasks.length !== this.props.tasks.length) {\r\n      const { tasks } = this.props;\r\n      let newTasks = [];\r\n      tasks.map((task) => {\r\n        newTasks.push({ ...task });\r\n      });\r\n      let newNodes = [];\r\n      newTasks.map((task) => {\r\n        task[\"label\"] = task.taskName;\r\n        task[\"description\"] = task.description;\r\n        task[\"time\"] = task.mostLikelyTime;\r\n        task[\"optimistic\"] = task.optimisticTime;\r\n        task[\"pessimistic\"] = task.pessimisticTime;\r\n        if (\r\n          task.taskName !== \"Completed!!\" &&\r\n          task.taskName !== \"Lets Start Working\"\r\n        ) {\r\n          let newNode = {\r\n            key: task._id,\r\n            id: (newNodes.length + 1).toString(),\r\n            data: task,\r\n            sourcePosition: \"right\",\r\n            targetPosition: \"left\",\r\n            position:\r\n              task.position !== undefined\r\n                ? task.position\r\n                : {\r\n                    x: (Math.random() * window.innerWidth) / 2,\r\n                    y: (Math.random() * window.innerHeight) / 2,\r\n                  },\r\n          };\r\n          newNodes.push(newNode);\r\n        }\r\n        if (task.taskName === \"Lets Start Working\") {\r\n          let ele = [...this.state.elements];\r\n          let newNode = {\r\n            key: task._id,\r\n            id: \"1\",\r\n            type: \"input\",\r\n            data: {\r\n              label: \"Lets Start Working\",\r\n              description: \"Start working on tasks to complete project on time\",\r\n              pessimistic: 0,\r\n              time: 0,\r\n              optimistic: 0,\r\n              predecessors: [],\r\n              _id: task._id,\r\n            },\r\n            sourcePosition: \"right\",\r\n            position:\r\n              task.position !== undefined ? task.position : { x: 0, y: 0 },\r\n          };\r\n          newNodes.push(newNode);\r\n        }\r\n        if (task.taskName === \"Completed!!\") {\r\n          let ele = [...this.state.elements];\r\n          let newNode = {\r\n            key: task._id,\r\n            id: \"2\",\r\n            type: \"output\",\r\n            data: {\r\n              label: \"Completed!!\",\r\n              description: \"Yaaayy you gus have completed the project\",\r\n              pessimistic: 0,\r\n              time: 0,\r\n              optimistic: 0,\r\n              predecessors: task.predecessors,\r\n              _id: task._id,\r\n            },\r\n            targetPosition: \"left\",\r\n            position:\r\n              task.position !== undefined ? task.position : { x: 500, y: 0 },\r\n          };\r\n          newNodes.push(newNode);\r\n        }\r\n      });\r\n      this.props.replaceNodes({ nodes: newNodes });\r\n      if (this.props.connections.length === 0) {\r\n        getConnections(this.props.project._id)\r\n          .then((data) => {\r\n            let connections = [];\r\n            data.connections.map((link) => {\r\n              newNodes.map((elem) => {\r\n                if (elem.key !== undefined) {\r\n                  if (link.from.toString() === elem.key.toString()) {\r\n                    this.setState({ source: elem });\r\n                  }\r\n                  if (link.to.toString() === elem.key.toString()) {\r\n                    this.setState({ target: elem });\r\n                  }\r\n                }\r\n              });\r\n              let source = this.state.source;\r\n              let target = this.state.target;\r\n              let edge = {\r\n                id:\r\n                  \"reactflow__edge-\" +\r\n                  source.id.toString() +\r\n                  \"null-\" +\r\n                  target.id.toString() +\r\n                  \"null\",\r\n                source: source.id.toString(),\r\n                sourceHandle: null,\r\n                target: target.id.toString(),\r\n                targetHandle: null,\r\n                _id: link._id,\r\n              };\r\n              connections.push(edge);\r\n\r\n              return \"done\";\r\n            });\r\n            // console.log(connections);\r\n            this.props.replaceConnections({ connections: connections });\r\n          })\r\n          .then(() => {\r\n            this.pertCalc();\r\n          });\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    if (this.props.tasks.length === 0) return <div>No tasks</div>;\r\n    const { nodes, connections, tasks } = this.props;\r\n    const { status } = this.props.project;\r\n    let connectCheck = status === \"Completed\" ? false : true;\r\n    const elements = [];\r\n    nodes.map((node) => {\r\n      elements.push({ ...node });\r\n    });\r\n    connections.map((connection) => {\r\n      elements.push({ ...connection });\r\n    });\r\n    // console.log(\"nodes:\", nodes);\r\n    return (\r\n      <div>\r\n        <div className=\"container-fluid\">\r\n          <ReactFlow\r\n            elements={elements}\r\n            onLoad={this.onLoad}\r\n            style={{\r\n              width: \"100%\",\r\n              height: \"65vh\",\r\n              backgroundColor: \"#1A192B\",\r\n            }}\r\n            onNodeDragStop={this.onNodeDragStop}\r\n            onConnect={this.onConnect}\r\n            onElementClick={this.onElementClick}\r\n            onElementsRemove={this.onElementsRemove}\r\n            connectionLineStyle={{ stroke: \"#ddd\", strokeWidth: 2 }}\r\n            connectionLineType=\"bezier\"\r\n            snapToGrid={true}\r\n            snapGrid={[16, 16]}\r\n            nodesConnectable={connectCheck}\r\n            nodesDraggable={connectCheck}\r\n            defaultZoom={1}\r\n          >\r\n            <Background color=\"#888\" gap={16} />\r\n            <MiniMap\r\n              nodeColor={(n) => {\r\n                if (n.type === \"input\") return \"#DC143C\";\r\n                if (n.type === \"output\") return \"#90ee90\";\r\n                return \"cyan\";\r\n              }}\r\n            />\r\n            <Controls />\r\n          </ReactFlow>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  nodes: state.cpm.nodes,\r\n  connections: state.cpm.connections,\r\n  state: state,\r\n  notifications: state.notifications.notifications,\r\n  tasks: state.tasks.tasks,\r\n  elements: state.cpm.elements,\r\n  pert: state.cpm.pert,\r\n  slacks: state.cpm.slacks,\r\n  criticalPath: state.cpm.criticalPath,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  nodeAdded: (params) => dispatch(nodeAdded(params)),\r\n  connectionAdded: (params) => dispatch(connectionAdded(params)),\r\n  updateTasks: (params) => dispatch(updateTasks(params)),\r\n  replaceNodes: (params) => dispatch(replaceNodes(params)),\r\n  replaceConnections: (params) => dispatch(replaceConnections(params)),\r\n  replaceElements: (params) => dispatch(replaceElements(params)),\r\n  setPert: (params) => dispatch(setPert(params)),\r\n  setExpectedTime: (params) => dispatch(setExpectedTime(params)),\r\n  setSlacks: (params) => dispatch(setSlacks(params)),\r\n  setCriticalPath: (params) => dispatch(setCriticalPath(params)),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withStyles(styles)(LayoutComponent));\r\n","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\FeedbackForm.js",["83"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\RatingComponentFeedbackForm.js",["84"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\App.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\core\\Notifications.js",["85","86","87","88","89"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\user\\apiUser.js",["90","91","92","93","94","95"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\SubmitProject.js",["96","97","98"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\LeaveProject.js",["99"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\RatingComponent.js",["100","101"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\utils\\signupbutton\\Tagify\\TagFinal.js",["102","103"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\SearchProjectBar.js",["104","105","106","107","108","109","110"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\utils\\signupbutton\\Tagify\\Assigner.js",["111","112","113"],{"ruleId":"114","severity":1,"message":"115","line":3,"column":10,"nodeType":"116","messageId":"117","endLine":3,"endColumn":15},{"ruleId":"114","severity":1,"message":"118","line":5,"column":8,"nodeType":"116","messageId":"117","endLine":5,"endColumn":12},{"ruleId":"114","severity":1,"message":"119","line":6,"column":8,"nodeType":"116","messageId":"117","endLine":6,"endColumn":12},{"ruleId":"114","severity":1,"message":"120","line":8,"column":3,"nodeType":"116","messageId":"117","endLine":8,"endColumn":10},{"ruleId":"114","severity":1,"message":"121","line":12,"column":3,"nodeType":"116","messageId":"117","endLine":12,"endColumn":17},{"ruleId":"114","severity":1,"message":"122","line":15,"column":3,"nodeType":"116","messageId":"117","endLine":15,"endColumn":10},{"ruleId":"114","severity":1,"message":"123","line":25,"column":10,"nodeType":"116","messageId":"117","endLine":25,"endColumn":16},{"ruleId":"124","severity":1,"message":"125","line":72,"column":22,"nodeType":"126","messageId":"127","endLine":72,"endColumn":24},{"ruleId":"124","severity":1,"message":"128","line":79,"column":11,"nodeType":"129","messageId":"130","endLine":79,"endColumn":18},{"ruleId":"124","severity":1,"message":"128","line":126,"column":37,"nodeType":"126","messageId":"131","endLine":126,"endColumn":39},{"ruleId":"124","severity":1,"message":"128","line":180,"column":45,"nodeType":"126","messageId":"131","endLine":180,"endColumn":47},{"ruleId":"124","severity":1,"message":"128","line":191,"column":22,"nodeType":"126","messageId":"131","endLine":191,"endColumn":24},{"ruleId":"124","severity":1,"message":"125","line":209,"column":25,"nodeType":"126","messageId":"127","endLine":209,"endColumn":27},{"ruleId":"124","severity":1,"message":"128","line":214,"column":9,"nodeType":"129","messageId":"130","endLine":214,"endColumn":16},{"ruleId":"124","severity":1,"message":"128","line":215,"column":47,"nodeType":"126","messageId":"131","endLine":215,"endColumn":49},{"ruleId":"124","severity":1,"message":"125","line":250,"column":48,"nodeType":"126","messageId":"127","endLine":250,"endColumn":50},{"ruleId":"114","severity":1,"message":"132","line":282,"column":15,"nodeType":"116","messageId":"117","endLine":282,"endColumn":24},{"ruleId":"124","severity":1,"message":"128","line":365,"column":24,"nodeType":"126","messageId":"131","endLine":365,"endColumn":26},{"ruleId":"124","severity":1,"message":"128","line":368,"column":27,"nodeType":"126","messageId":"131","endLine":368,"endColumn":29},{"ruleId":"133","severity":1,"message":"134","line":370,"column":31,"nodeType":"135","messageId":"136","endLine":370,"endColumn":47},{"ruleId":"114","severity":1,"message":"137","line":395,"column":15,"nodeType":"116","messageId":"117","endLine":395,"endColumn":18},{"ruleId":"114","severity":1,"message":"137","line":416,"column":15,"nodeType":"116","messageId":"117","endLine":416,"endColumn":18},{"ruleId":"124","severity":1,"message":"128","line":444,"column":31,"nodeType":"126","messageId":"131","endLine":444,"endColumn":33},{"ruleId":"124","severity":1,"message":"128","line":491,"column":24,"nodeType":"126","messageId":"131","endLine":491,"endColumn":26},{"ruleId":"124","severity":1,"message":"128","line":495,"column":27,"nodeType":"126","messageId":"131","endLine":495,"endColumn":29},{"ruleId":"133","severity":1,"message":"134","line":497,"column":31,"nodeType":"135","messageId":"136","endLine":497,"endColumn":47},{"ruleId":"114","severity":1,"message":"137","line":522,"column":15,"nodeType":"116","messageId":"117","endLine":522,"endColumn":18},{"ruleId":"114","severity":1,"message":"137","line":543,"column":15,"nodeType":"116","messageId":"117","endLine":543,"endColumn":18},{"ruleId":"124","severity":1,"message":"128","line":570,"column":35,"nodeType":"126","messageId":"131","endLine":570,"endColumn":37},{"ruleId":"114","severity":1,"message":"138","line":610,"column":33,"nodeType":"116","messageId":"117","endLine":610,"endColumn":38},{"ruleId":"124","severity":1,"message":"128","line":614,"column":22,"nodeType":"126","messageId":"131","endLine":614,"endColumn":24},{"ruleId":"124","severity":1,"message":"128","line":617,"column":34,"nodeType":"126","messageId":"131","endLine":617,"endColumn":36},{"ruleId":"139","severity":1,"message":"140","line":33,"column":6,"nodeType":"141","endLine":33,"endColumn":8,"suggestions":"142"},{"ruleId":"124","severity":1,"message":"128","line":17,"column":23,"nodeType":"126","messageId":"131","endLine":17,"endColumn":25},{"ruleId":"114","severity":1,"message":"123","line":5,"column":10,"nodeType":"116","messageId":"117","endLine":5,"endColumn":16},{"ruleId":"114","severity":1,"message":"143","line":21,"column":7,"nodeType":"116","messageId":"117","endLine":21,"endColumn":15},{"ruleId":"124","severity":1,"message":"128","line":35,"column":35,"nodeType":"126","messageId":"131","endLine":35,"endColumn":37},{"ruleId":"114","severity":1,"message":"144","line":67,"column":11,"nodeType":"116","messageId":"117","endLine":67,"endColumn":24},{"ruleId":"114","severity":1,"message":"145","line":74,"column":11,"nodeType":"116","messageId":"117","endLine":74,"endColumn":19},{"ruleId":"146","severity":1,"message":"147","line":2,"column":46,"nodeType":"148","messageId":"149","endLine":2,"endColumn":47},{"ruleId":"146","severity":1,"message":"147","line":17,"column":46,"nodeType":"148","messageId":"149","endLine":17,"endColumn":47},{"ruleId":"146","severity":1,"message":"147","line":33,"column":46,"nodeType":"148","messageId":"149","endLine":33,"endColumn":47},{"ruleId":"146","severity":1,"message":"147","line":154,"column":51,"nodeType":"148","messageId":"149","endLine":154,"endColumn":52},{"ruleId":"146","severity":1,"message":"147","line":170,"column":51,"nodeType":"148","messageId":"149","endLine":170,"endColumn":52},{"ruleId":"146","severity":1,"message":"147","line":186,"column":49,"nodeType":"148","messageId":"149","endLine":186,"endColumn":50},{"ruleId":"124","severity":1,"message":"128","line":18,"column":37,"nodeType":"126","messageId":"131","endLine":18,"endColumn":39},{"ruleId":"114","severity":1,"message":"150","line":37,"column":24,"nodeType":"116","messageId":"117","endLine":37,"endColumn":35},{"ruleId":"114","severity":1,"message":"151","line":117,"column":31,"nodeType":"116","messageId":"117","endLine":117,"endColumn":37},{"ruleId":"124","severity":1,"message":"128","line":38,"column":22,"nodeType":"126","messageId":"131","endLine":38,"endColumn":24},{"ruleId":"114","severity":1,"message":"123","line":2,"column":10,"nodeType":"116","messageId":"117","endLine":2,"endColumn":16},{"ruleId":"124","severity":1,"message":"128","line":15,"column":23,"nodeType":"126","messageId":"131","endLine":15,"endColumn":25},{"ruleId":"114","severity":1,"message":"152","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":26},{"ruleId":"124","severity":1,"message":"128","line":18,"column":37,"nodeType":"126","messageId":"131","endLine":18,"endColumn":39},{"ruleId":"114","severity":1,"message":"153","line":2,"column":8,"nodeType":"116","messageId":"117","endLine":2,"endColumn":25},{"ruleId":"114","severity":1,"message":"154","line":3,"column":10,"nodeType":"116","messageId":"117","endLine":3,"endColumn":14},{"ruleId":"114","severity":1,"message":"155","line":6,"column":20,"nodeType":"116","messageId":"117","endLine":6,"endColumn":24},{"ruleId":"114","severity":1,"message":"156","line":8,"column":10,"nodeType":"116","messageId":"117","endLine":8,"endColumn":15},{"ruleId":"114","severity":1,"message":"157","line":8,"column":17,"nodeType":"116","messageId":"117","endLine":8,"endColumn":25},{"ruleId":"114","severity":1,"message":"158","line":10,"column":10,"nodeType":"116","messageId":"117","endLine":10,"endColumn":18},{"ruleId":"124","severity":1,"message":"128","line":40,"column":28,"nodeType":"126","messageId":"131","endLine":40,"endColumn":30},{"ruleId":"114","severity":1,"message":"152","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":26},{"ruleId":"124","severity":1,"message":"128","line":27,"column":37,"nodeType":"126","messageId":"131","endLine":27,"endColumn":39},{"ruleId":"124","severity":1,"message":"128","line":29,"column":25,"nodeType":"126","messageId":"131","endLine":29,"endColumn":27},"no-unused-vars","'Modal' is defined but never used.","Identifier","unusedVar","'Pert' is defined but never used.","'Task' is defined but never used.","'addEdge' is defined but never used.","'removeElements' is defined but never used.","'addTask' is defined but never used.","'Button' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","expectedInside","'finaldiff' is assigned a value but never used.","no-self-assign","'task.description' is assigned to itself.","MemberExpression","selfAssignment","'ele' is assigned a value but never used.","'tasks' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'projectId'. Either include it or remove the dependency array.","ArrayExpression",["159"],"'BASE_URL' is assigned a value but never used.","'notifications' is assigned a value but never used.","'selected' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'projectTeam' is assigned a value but never used.","'rating' is assigned a value but never used.","'useEffect' is defined but never used.","'SearchTwoToneIcon' is defined but never used.","'list' is defined but never used.","'Link' is defined but never used.","'query' is assigned a value but never used.","'setQuery' is assigned a value but never used.","'projects' is assigned a value but never used.",{"desc":"160","fix":"161"},"Update the dependencies array to be: [projectId]",{"range":"162","text":"163"},[1239,1241],"[projectId]"]