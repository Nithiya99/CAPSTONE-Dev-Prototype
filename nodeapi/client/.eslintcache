[{"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\core\\Home.js":"1","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\posts\\PostImage.js":"2","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\user\\Profile.js":"3","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\posts\\Post.js":"4","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\posts\\apiPosts.js":"5","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\MainRouter.js":"6","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\reportWebVitals.js":"7","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\ProjectDashboard.js":"8","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\layout\\LayoutComponent.js":"9","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\user\\Users.js":"10","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\apiNotifications.js":"11","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\AssignedTo.js":"12","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\taskComponents\\TrelloTask.js":"13","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\MyProjects.js":"14","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\core\\ProjectRecommendation.js":"15","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\DeleteProject.js":"16","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\layout\\Pert.js":"17","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\store\\store.js":"18","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\utils\\Socket.js":"19","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\apiProject.js":"20","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\user\\MyChats.js":"21","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\newProjectForm\\RoleCreate.js":"22","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\taskComponents\\EditModel.js":"23","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\newProjectForm\\CreateProject.js":"24","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\store\\notifications.js":"25","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\SubmitProject.js":"26","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\utils\\signupbutton\\Personal.js":"27","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\utils\\signupbutton\\Tagify\\Assigner.js":"28","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\user\\Signin.js":"29","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\utils\\signupbutton\\Tagify\\SkillsInput.js":"30","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\utils\\signupbutton\\Form.js":"31","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\Requests.js":"32","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\App.js":"33","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\store\\reducer.js":"34","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\utils\\signupbutton\\Tagify\\TagFinal.js":"35","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\JoinProject.js":"36","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\layout\\Task.js":"37","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\index.js":"38","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\RoleReq.js":"39","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\utils\\signupbutton\\Social.js":"40","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\user\\EditProfile.js":"41","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\Chat.js":"42","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\user\\apiUser.js":"43","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\utils\\signupbutton\\User.js":"44","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\RatingComponent.js":"45","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\RoleEditView.js":"46"},{"size":3279,"mtime":1620254773862,"results":"47","hashOfConfig":"48"},{"size":2156,"mtime":1620644874233,"results":"49","hashOfConfig":"48"},{"size":16462,"mtime":1620255378770,"results":"50","hashOfConfig":"48"},{"size":1010,"mtime":1620254850168,"results":"51","hashOfConfig":"48"},{"size":3754,"mtime":1620631217107,"results":"52","hashOfConfig":"48"},{"size":2124,"mtime":1620255538693,"results":"53","hashOfConfig":"48"},{"size":362,"mtime":1618198716000,"results":"54","hashOfConfig":"48"},{"size":12848,"mtime":1619573693911,"results":"55","hashOfConfig":"48"},{"size":21050,"mtime":1619573672552,"results":"56","hashOfConfig":"48"},{"size":4565,"mtime":1618982321535,"results":"57","hashOfConfig":"48"},{"size":903,"mtime":1619794611221,"results":"58","hashOfConfig":"48"},{"size":598,"mtime":1618198716000,"results":"59","hashOfConfig":"48"},{"size":10823,"mtime":1619702653555,"results":"60","hashOfConfig":"48"},{"size":13493,"mtime":1619802882651,"results":"61","hashOfConfig":"48"},{"size":3566,"mtime":1618504472143,"results":"62","hashOfConfig":"48"},{"size":1412,"mtime":1618198716000,"results":"63","hashOfConfig":"48"},{"size":4968,"mtime":1618198716000,"results":"64","hashOfConfig":"48"},{"size":288,"mtime":1618198716000,"results":"65","hashOfConfig":"48"},{"size":242,"mtime":1618272929988,"results":"66","hashOfConfig":"48"},{"size":15217,"mtime":1618826709693,"results":"67","hashOfConfig":"48"},{"size":10880,"mtime":1620255539448,"results":"68","hashOfConfig":"48"},{"size":1826,"mtime":1618198716000,"results":"69","hashOfConfig":"48"},{"size":4003,"mtime":1618827213209,"results":"70","hashOfConfig":"48"},{"size":5030,"mtime":1619349445391,"results":"71","hashOfConfig":"48"},{"size":1948,"mtime":1620180685570,"results":"72","hashOfConfig":"48"},{"size":4607,"mtime":1618892882908,"results":"73","hashOfConfig":"48"},{"size":2112,"mtime":1618198716000,"results":"74","hashOfConfig":"48"},{"size":1452,"mtime":1618198716000,"results":"75","hashOfConfig":"48"},{"size":5695,"mtime":1619603965100,"results":"76","hashOfConfig":"48"},{"size":499,"mtime":1618198716000,"results":"77","hashOfConfig":"48"},{"size":4451,"mtime":1618198716000,"results":"78","hashOfConfig":"48"},{"size":3236,"mtime":1619794912667,"results":"79","hashOfConfig":"48"},{"size":647,"mtime":1618272945740,"results":"80","hashOfConfig":"48"},{"size":333,"mtime":1618950345165,"results":"81","hashOfConfig":"48"},{"size":1247,"mtime":1618198716000,"results":"82","hashOfConfig":"48"},{"size":4595,"mtime":1619677923067,"results":"83","hashOfConfig":"48"},{"size":684,"mtime":1618198716000,"results":"84","hashOfConfig":"48"},{"size":427,"mtime":1618198716000,"results":"85","hashOfConfig":"48"},{"size":938,"mtime":1618198716000,"results":"86","hashOfConfig":"48"},{"size":3226,"mtime":1618198716000,"results":"87","hashOfConfig":"48"},{"size":6761,"mtime":1618198716000,"results":"88","hashOfConfig":"48"},{"size":6958,"mtime":1619929054630,"results":"89","hashOfConfig":"48"},{"size":5744,"mtime":1619929165346,"results":"90","hashOfConfig":"48"},{"size":2871,"mtime":1618198716000,"results":"91","hashOfConfig":"48"},{"size":1643,"mtime":1618321235394,"results":"92","hashOfConfig":"48"},{"size":2630,"mtime":1619336085672,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"97"},"13vq143",{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"123"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"141"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":2,"source":"148","usedDeprecatedRules":"149"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"117"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"149"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"120"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"117"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"197","messages":"198","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"199","messages":"200","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"123"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"206","messages":"207","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\core\\Home.js",["208","209","210","211","212","213","214","215","216","217","218"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getNotifications } from \"../apiNotifications\";\r\nimport {\r\n  notificationAdded,\r\n  getNotified,\r\n  clearNotifications,\r\n  setSegregatedNotifications,\r\n} from \"../store/notifications\";\r\nimport * as _ from \"lodash\";\r\nimport { getCurrentUser } from \"../user/apiUser\";\r\nimport ProjectRecommendation from \"./ProjectRecommendation\";\r\nimport { getProject } from \"../project/apiProject\";\r\nimport { listmyprojects } from \"./../project/apiProject\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport RatingComponent from \"../project/RatingComponent\";\r\nimport PostImage from \"./../posts/PostImage\";\r\nimport { getAllPosts } from \"./../posts/apiPosts\";\r\nimport Post from \"../posts/Post\";\r\nclass Home extends Component {\r\n  state = {\r\n    notificationGroupedObject: {},\r\n    show: false,\r\n  };\r\n  componentDidMount() {\r\n    listmyprojects().then((projects) =>\r\n      this.setState({ projects: projects.userProjects })\r\n    );\r\n    getAllPosts()\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        this.setState({ posts: data.posts });\r\n      });\r\n  }\r\n  getProjectTeamFromState = (projectId) => {\r\n    return this.state.projects.map((project) => {\r\n      if (project._id.toString() === projectId.toString()) {\r\n        return project.team;\r\n      }\r\n    });\r\n    // return undefined;\r\n  };\r\n\r\n  render() {\r\n    if (getCurrentUser()._id === undefined) return;\r\n    const { notifications } = this.props;\r\n    const { notificationGroupedObject, projects } = this.state;\r\n    // if (this.props.notifications.length > 0) {\r\n    //   console.log(\"NOTIFICATIONS:\");\r\n    //   console.log(this.props.notifications);\r\n    // }\r\n    // notifications.map((notif) => {\r\n    //   console.log(notif);\r\n    // });\r\n\r\n    Object.keys(notificationGroupedObject).length > 0 &&\r\n      console.log(Object.keys(notificationGroupedObject));\r\n    // console.log(projects);\r\n    if (\r\n      Object.keys(notificationGroupedObject).length !== 0 &&\r\n      projects !== undefined &&\r\n      notificationGroupedObject.FeedbackForm !== undefined\r\n    ) {\r\n      if (notificationGroupedObject[\"FeedbackForm\"].length > 0) {\r\n        console.log(\"Feedback Forms:\");\r\n        console.log(notificationGroupedObject.FeedbackForm);\r\n      }\r\n    }\r\n    const { posts } = this.state;\r\n    if (posts === undefined) return null;\r\n    return (\r\n      <>\r\n        <div className=\"jumbotron\">\r\n          <h2>Home</h2>\r\n          <p className=\"lead\">News Feed (Posts) will be here</p>\r\n        </div>\r\n        <div className=\"card p-2\">\r\n          <div className=\"card-body\">\r\n            <PostImage />\r\n          </div>\r\n        </div>\r\n        {posts.map((post) => (\r\n          <Post\r\n            headerText={\" Blehhhhh \"}\r\n            footerText={\"by \" + post.postedBy.name}\r\n            cardText={post.photo}\r\n            imageUrl={post.photo}\r\n          />\r\n        ))}\r\n        <ProjectRecommendation />\r\n      </>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  notifications: state.notifications.notifications,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addNotification: (params) => dispatch(notificationAdded(params)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n",["219","220"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\posts\\PostImage.js",["221","222"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\user\\Profile.js",["223","224","225","226","227","228"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\posts\\Post.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\posts\\apiPosts.js",["229"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\MainRouter.js",["230","231"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\reportWebVitals.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\ProjectDashboard.js",["232","233","234","235"],"import React, { Component } from \"react\";\r\nimport { Accordion, Card, Button, Row, Tab, Col, Nav } from \"react-bootstrap\";\r\nimport AddTask from \"./taskComponents/AddTask\";\r\nimport LayoutComponent from \"./layout/LayoutComponent\";\r\nimport TrelloTask from \"./taskComponents/TrelloTask\";\r\nimport GroupTwoToneIcon from \"@material-ui/icons/GroupTwoTone\";\r\nimport AccountTreeTwoToneIcon from \"@material-ui/icons/AccountTreeTwoTone\";\r\nimport TuneTwoToneIcon from \"@material-ui/icons/TuneTwoTone\";\r\nimport PlaylistAddTwoToneIcon from \"@material-ui/icons/PlaylistAddTwoTone\";\r\nimport ListAltTwoToneIcon from \"@material-ui/icons/ListAltTwoTone\";\r\nimport ChatIcon from \"@material-ui/icons/Chat\";\r\nimport { getCurrentUser } from \"../user/apiUser\";\r\nimport Chat from \"./Chat\";\r\nimport { getTasks } from \"./apiProject\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateTasks } from \"../store/tasks\";\r\nimport { clearAll, setCriticalPath } from \"../store/cpm\";\r\n\r\nclass ProjectDashboard extends Component {\r\n  state = {\r\n    expectedTime: {},\r\n  };\r\n  componentDidMount() {\r\n    this.props.clearAll();\r\n    const { project } = this.props.location.state;\r\n    getTasks(project._id).then((val) => {\r\n      this.props.updateTasks({\r\n        tasks: val.tasks,\r\n      });\r\n    });\r\n  }\r\n  // componentDidUpdate(prevState) {\r\n  //   if (prevState.connections.length !== this.props.connections.length) {\r\n  //     // if (this.props.pert.latestFinishTimes !== undefined)\r\n  //     //   console.log(\"end time:\", this.props.pert.latestFinishTimes.__end);\r\n  //     const expectedTime =\r\n  //       this.props.pert.latestFinishTimes !== undefined\r\n  //         ? Math.floor(this.props.pert.latestFinishTimes.__end)\r\n  //         : \"Not set yet\";\r\n  //     this.setState({ expectedTime });\r\n  //     this.props.setExpectedTime({ expectedTime });\r\n  //   }\r\n  //   // console.log(prevState);\r\n  // }\r\n  renderSlacks(slacks) {\r\n    return Object.keys(slacks).map((key) => (\r\n      <div>\r\n        Label: {key} | slack: {slacks[key].slack} | days: {slacks[key].days} |\r\n        Overdue:\r\n        {slacks[key].overdue ? <>Overdue</> : <>On schedule</>}\r\n      </div>\r\n    ));\r\n  }\r\n  renderCriticalPath(criticalPathArr, criticalPathObject) {\r\n    // console.log(\"criticalPathArr:\", criticalPathArr);\r\n    // console.log(\"criticalPathObject:\", criticalPathObject);\r\n    return criticalPathArr.map((node, index) => (\r\n      <>\r\n        {/* {index !== 1 && index !== 2 ?*/}\r\n        {index !== criticalPathArr.length - 1\r\n          ? criticalPathObject[node].label.toString() + \" , \"\r\n          : criticalPathObject[node].label.toString() + \" .\"}\r\n        {/* : \"\"} */}\r\n      </>\r\n    ));\r\n  }\r\n  render() {\r\n    if (this.props.location.state.project === undefined) {\r\n      return null;\r\n    }\r\n    const { project } = this.props.location.state;\r\n    // console.log(this.props.location);\r\n    let today = new Date();\r\n    let day1 = new Date(today.toUTCString());\r\n    let day2 = new Date(project.created);\r\n    let difference = Math.abs(day2 - day1);\r\n    let days = parseInt(difference / (1000 * 3600 * 24));\r\n    // console.log(days);\r\n    const { expectedTime, slacks, criticalPath, pert } = this.props;\r\n    // console.log(slacks);\r\n    // if (slacks === undefined) return ;\r\n    if (expectedTime === undefined) return null;\r\n    return (\r\n      <div className=\"pt-5\">\r\n        <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"projStats\">\r\n          <Row>\r\n            <Col sm={2}>\r\n              <div className=\"card card-custom card-stretch\">\r\n                <div className=\"card-body pt-4\">\r\n                  <h5 className=\"font-weight-bolder text-dark-75 text-hover-primary\">\r\n                    {project.title}\r\n                  </h5>\r\n                  <div className=\"text-muted\">{project.description}</div>\r\n                  <Nav variant=\"pills\" className=\"flex-column mt-3\">\r\n                    <Nav.Item>\r\n                      <Nav.Link eventKey=\"teamInfo\">\r\n                        <div className=\"d-flex align-items-center\">\r\n                          <div className=\"mr-3\">\r\n                            <GroupTwoToneIcon />\r\n                          </div>\r\n                          <div>Team Information</div>\r\n                        </div>\r\n                      </Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                      <Nav.Link eventKey=\"projStats\">\r\n                        <div className=\"d-flex align-items-center\">\r\n                          <div className=\"mr-3\">\r\n                            <TuneTwoToneIcon />\r\n                          </div>\r\n                          <div>Project Stats</div>\r\n                        </div>\r\n                      </Nav.Link>\r\n                    </Nav.Item>\r\n                    {project.status !== \"Completed\" &&\r\n                    getCurrentUser()._id === project.leader ? (\r\n                      <Nav.Item>\r\n                        <Nav.Link eventKey=\"addTask\">\r\n                          <div className=\"d-flex align-items-center\">\r\n                            <div className=\"mr-3\">\r\n                              <PlaylistAddTwoToneIcon />\r\n                            </div>\r\n                            <div>Add Task</div>\r\n                          </div>\r\n                        </Nav.Link>\r\n                      </Nav.Item>\r\n                    ) : (\r\n                      <div> </div>\r\n                    )}\r\n                    <Nav.Item>\r\n                      <Nav.Link eventKey=\"netDiagram\">\r\n                        <div className=\"d-flex align-items-center\">\r\n                          <div className=\"mr-3\">\r\n                            <AccountTreeTwoToneIcon />\r\n                          </div>\r\n                          <div>Network Diagram</div>\r\n                        </div>\r\n                      </Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                      <Nav.Link eventKey=\"allTasks\">\r\n                        <div className=\"d-flex align-items-center\">\r\n                          <div className=\"mr-3\">\r\n                            <ListAltTwoToneIcon />\r\n                          </div>\r\n                          <div>All Tasks</div>\r\n                        </div>\r\n                      </Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                      <Nav.Link eventKey=\"Chat\">\r\n                        <div className=\"d-flex align-items-center\">\r\n                          <div className=\"mr-3\">\r\n                            <ChatIcon />\r\n                          </div>\r\n                          <div>Group Chat</div>\r\n                        </div>\r\n                      </Nav.Link>\r\n                    </Nav.Item>\r\n                  </Nav>\r\n                </div>\r\n              </div>\r\n            </Col>\r\n            <Col sm={10}>\r\n              <Tab.Content>\r\n                <Tab.Pane eventKey=\"projStats\">\r\n                  <div className=\"card card-stretch\">\r\n                    <div className=\"card-header\">\r\n                      <div className=\"card-title align-items-start flex-column\">\r\n                        <h4 className=\"card-label font-weight-bolder text-dark\">\r\n                          Project Stats\r\n                        </h4>\r\n                        <span className=\"text-muted font-weight-bold font-size-sm mt-1\">\r\n                          Analysis of the tasks and time required displayed\r\n                          here.\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                      <h4>No. of days:</h4>\r\n                      <span>{days}</span>\r\n                      <h4>Estimated date:</h4>\r\n                      <span>{expectedTime}</span>\r\n                      {slacks !== undefined ? (\r\n                        <>\r\n                          <h4>Tasks that can be slacked On:</h4>\r\n                          <div>{this.renderSlacks(slacks)}</div>\r\n                        </>\r\n                      ) : (\r\n                        <></>\r\n                      )}\r\n                      <div>\r\n                        <div>\r\n                          <h4>Critical Path:</h4>\r\n                        </div>\r\n                        <div>\r\n                          {pert.criticalPath !== undefined &&\r\n                          criticalPath !== undefined ? (\r\n                            this.renderCriticalPath(\r\n                              pert.criticalPath,\r\n                              criticalPath\r\n                            )\r\n                          ) : (\r\n                            <></>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </Tab.Pane>\r\n                <Tab.Pane eventKey=\"netDiagram\">\r\n                  <div className=\"card card-stretch\">\r\n                    <div className=\"card-header\">\r\n                      <div className=\"card-title align-items-start flex-column\">\r\n                        <h4 className=\"card-label font-weight-bolder text-dark\">\r\n                          Network Diagram\r\n                        </h4>\r\n                        <span className=\"text-muted font-weight-bold font-size-sm mt-1\">\r\n                          Task dependency diagram.\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                      <LayoutComponent project={project} />\r\n                    </div>\r\n                  </div>\r\n                </Tab.Pane>\r\n                <Tab.Pane eventKey=\"allTasks\">\r\n                  <div className=\"card card-stretch\">\r\n                    <div className=\"card-header\">\r\n                      <div className=\"card-title align-items-start flex-column\">\r\n                        <h4 className=\"card-label font-weight-bolder text-dark\">\r\n                          Tasks Board\r\n                        </h4>\r\n                        <span className=\"text-muted font-weight-bold font-size-sm mt-1\">\r\n                          Complete allocated tasks.\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                      <TrelloTask\r\n                        projectId={project._id}\r\n                        status={project.status}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </Tab.Pane>\r\n                <Tab.Pane eventKey=\"addTask\">\r\n                  <div className=\"card card-stretch\">\r\n                    <div className=\"card-header\">\r\n                      <div className=\"card-title align-items-start flex-column\">\r\n                        <h4 className=\"card-label font-weight-bolder text-dark\">\r\n                          Create Task\r\n                        </h4>\r\n                        <span className=\"text-muted font-weight-bold font-size-sm mt-1\">\r\n                          Add Tasks and allocate to memebers.\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                      <AddTask projectId={project._id} />\r\n                    </div>\r\n                  </div>\r\n                </Tab.Pane>\r\n                <Tab.Pane eventKey=\"Chat\">\r\n                  <div className=\"card card-stretch\">\r\n                    <div className=\"card-header\">\r\n                      <div className=\"card-title align-items-start flex-column\">\r\n                        <h4 className=\"card-label font-weight-bolder text-dark\">\r\n                          Group Chat\r\n                        </h4>\r\n                        <span className=\"text-muted font-weight-bold font-size-sm mt-1\">\r\n                          Interact with your Project-mates.\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                      <Chat projectId={project._id} status={project.status} />\r\n                    </div>\r\n                  </div>\r\n                </Tab.Pane>\r\n              </Tab.Content>\r\n            </Col>\r\n          </Row>\r\n        </Tab.Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  tasks: state.tasks.tasks,\r\n  pert: state.cpm.pert,\r\n  connections: state.cpm.connections,\r\n  expectedTime: state.cpm.expectedTime,\r\n  slacks: state.cpm.slacks,\r\n  criticalPath: state.cpm.criticalPath,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  updateTasks: (params) => dispatch(updateTasks(params)),\r\n  clearAll: () => dispatch(clearAll()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectDashboard);\r\n",["236","237"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\layout\\LayoutComponent.js",["238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268"],"import React, { Component } from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport Pert from \"./Pert\";\r\nimport Task from \"./Task\";\r\nimport ReactFlow, {\r\n  addEdge,\r\n  Background,\r\n  Controls,\r\n  MiniMap,\r\n  removeElements,\r\n} from \"react-flow-renderer\";\r\nimport {\r\n  addTask,\r\n  getTasks,\r\n  putConnections,\r\n  deleteConnections,\r\n  getConnections,\r\n  putPredecessors,\r\n  putPosition,\r\n} from \"../apiProject\";\r\nimport jsPERT from \"js-pert\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport {\r\n  nodeAdded,\r\n  connectionAdded,\r\n  replaceNodes,\r\n  replaceConnections,\r\n  replaceElements,\r\n  setPert,\r\n  setExpectedTime,\r\n  setSlacks,\r\n  setCriticalPath,\r\n} from \"../../store/cpm\";\r\nimport { updateTasks } from \"../../store/tasks\";\r\nimport { getCurrentUser } from \"./../../user/apiUser\";\r\nconst styles = (theme) => ({\r\n  modal: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  paper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 3, 3),\r\n  },\r\n});\r\nclass LayoutComponent extends Component {\r\n  state = {\r\n    elements: [],\r\n    tasks: [],\r\n    nodes: [],\r\n    pert: {},\r\n    task: {},\r\n    show: false,\r\n    checked: false,\r\n    bleh: 1,\r\n  };\r\n\r\n  onElementsRemove = (elementsToRemove) => {\r\n    if (this.props.project.leader.toString() === getCurrentUser()._id) {\r\n      let cons = this.props.connections;\r\n      const filteredConnections = cons.filter(\r\n        (con) => con.id !== elementsToRemove[0].id\r\n      );\r\n      this.props.replaceConnections({ connections: filteredConnections });\r\n      cons.map((con) => {\r\n        if (con.id === elementsToRemove[0].id) {\r\n          // console.log(con.id, elementsToRemove[0].id);\r\n          deleteConnections(this.props.project._id, con._id).then((data) => {\r\n            console.log(\"connection deleted\");\r\n            // this.pertCalc();\r\n          });\r\n          return;\r\n        }\r\n      });\r\n    }\r\n  };\r\n  onLoad = (reactFlowInstance) => {\r\n    reactFlowInstance.fitView();\r\n  };\r\n  onNodeDragStop = (e, node) => {\r\n    // console.log(node.position, node.data._id);\r\n    putPosition(this.props.project._id, node.data._id, node.position).then(\r\n      () => {\r\n        console.log(node.position + \" is saved\");\r\n      }\r\n    );\r\n  };\r\n  edgeInElements(elements, edge) {\r\n    let inside = false;\r\n    elements.map((elem) => {\r\n      if (elem.id.toString() === edge.id.toString()) {\r\n        inside = true;\r\n      }\r\n      return \"done\";\r\n    });\r\n    return inside;\r\n  }\r\n  onConnect = (params) => {\r\n    if (this.props.project.leader.toString() === getCurrentUser()._id) {\r\n      let source = params.source;\r\n      let target = params.target;\r\n      if (source !== undefined && target !== undefined) {\r\n        let edge = {\r\n          id:\r\n            \"reactflow__edge-\" +\r\n            source.toString() +\r\n            \"null-\" +\r\n            target.toString() +\r\n            \"null\",\r\n          source: source.toString(),\r\n          sourceHandle: null,\r\n          target: target.toString(),\r\n          targetHandle: null,\r\n        };\r\n        // console.log(this.state.elements);\r\n        let sourceId = \"\";\r\n        let targetId = \"\";\r\n        // console.log(this.props.nodes);\r\n        this.props.nodes.map((elem) => {\r\n          if (elem.id === source) {\r\n            sourceId = elem.key;\r\n          }\r\n          if (elem.id === target) {\r\n            targetId = elem.key;\r\n          }\r\n        });\r\n        putPredecessors(this.props.project._id, targetId, sourceId).then(() => {\r\n          console.log(sourceId + \" has new Predecessor \" + targetId);\r\n        });\r\n        // let ele = [...this.state.elements];\r\n        // if (!this.edgeInElements(ele, edge)) {\r\n        //   ele.push(edge);\r\n        putConnections(this.props.project._id, sourceId, targetId).then(() => {\r\n          console.log(\"connection \" + sourceId + \"to \" + targetId + \"added\");\r\n        });\r\n        // }\r\n        this.props.connectionAdded({ connection: edge });\r\n        // this.setState({ elements: ele });\r\n        // console.log(this.state.elements);\r\n        this.pertCalc();\r\n      }\r\n    }\r\n  };\r\n  getIdOfObjectId = (elemId) => {\r\n    let id = {};\r\n    const { nodes } = this.props;\r\n    id = nodes.map((elem) => {\r\n      if (elem.data !== undefined)\r\n        if (elem.data._id.toString() === elemId) {\r\n          id = elem.id;\r\n        }\r\n      return id;\r\n    });\r\n    return id[id.length - 1];\r\n  };\r\n  // handleClose = () => {\r\n  //   this.setState({ show: false });\r\n  // };\r\n  pertCalc = () => {\r\n    // this.setState({ show: true });\r\n    // console.log(\"inside pertCalc:\", tasksObject);\r\n    let nodes = this.props.nodes.map((elem) => ({\r\n      ...elem,\r\n    }));\r\n    // let connections = this.props.connections.map((elem) => ({\r\n    //   ...elem,\r\n    // }));\r\n    // console.log(connections);\r\n    // let { connections } = this.props;\r\n    // console.log(\"props:\", this.props.connections);\r\n    // console.log(\"connections:\");\r\n    let ids = [];\r\n    this.props.connections.map((connection) => {\r\n      // console.log(connection.source, connection.target);\r\n      if (!ids.includes(connection.source)) {\r\n        ids.push(connection.source.toString());\r\n      }\r\n      if (!ids.includes(connection.target)) {\r\n        ids.push(connection.target.toString());\r\n      }\r\n    });\r\n    // console.log(\"nodes:\");\r\n    let newNodes = [];\r\n    nodes.map((node) => {\r\n      if (ids.includes(node.id)) newNodes.push(node);\r\n    });\r\n\r\n    let tasksObject = ids.includes(\"1\")\r\n      ? {\r\n          1: {\r\n            id: \"1\",\r\n            mostLikelyTime: 0,\r\n            optimisticTime: 0,\r\n            pessimisticTime: 0,\r\n            predecessors: [],\r\n          },\r\n        }\r\n      : {};\r\n    // console.log(\"TasksObject before node addition:\", tasksObject);\r\n    // console.log(ids);\r\n    // console.log(\"nodes sent for pertcalc:\", newNodes);\r\n    newNodes.map((elem) => {\r\n      if (\r\n        elem.data.predecessors.length === 0 ||\r\n        elem.data.predecessors === undefined\r\n      )\r\n        return;\r\n      elem.data.predecessors.map((pre, index) => {\r\n        let id = this.getIdOfObjectId(pre.toString());\r\n        // console.log(id);\r\n        let predecessors = [...elem.data.predecessors];\r\n        predecessors[index] = id.toString();\r\n        elem.data = { ...elem.data, predecessors };\r\n      });\r\n    });\r\n    // console.log(nodes);\r\n    tasksObject = newNodes.map((elem) => {\r\n      // console.log(\"tasksObject node:\", elem);\r\n      tasksObject[elem.id.toString()] = {\r\n        id: elem.id.toString(),\r\n        optimisticTime: elem.data.optimistic,\r\n        mostLikelyTime: elem.data.time,\r\n        pessimisticTime: elem.data.pessimistic,\r\n        predecessors: elem.data.predecessors,\r\n      };\r\n      return tasksObject;\r\n    });\r\n    let tasksObjectFinal = tasksObject[tasksObject.length - 1];\r\n    console.log(\"TasksObject:\");\r\n    console.log(tasksObjectFinal);\r\n    console.log(\"Pert:\");\r\n    let pert = {};\r\n    // console.log(\"gonna set pert\");\r\n    try {\r\n      // if (tasksObject[1] !== undefined) {\r\n      // console.log(tasksObject[1]);\r\n      pert = jsPERT(tasksObjectFinal);\r\n      this.props.setPert({ pert });\r\n      console.log(this.props.pert);\r\n      // this.props.setSlacks({ slackObject: this.props.pert.slack });\r\n      // console.log(\"slacks:\");\r\n      let slackObject = {};\r\n      slackObject = newNodes.map((elem, index) => {\r\n        // console.log(elem.id, pert.slack[elem.id]);\r\n        if (index !== 0 && index !== 1) {\r\n          // console.log(\"Slack elem:\", elem);\r\n          let created = elem.data.created;\r\n          let today = new Date();\r\n          let day1 = new Date(today.toUTCString());\r\n          let day2 = new Date(created);\r\n          let difference = Math.abs(day2 - day1);\r\n          let days = parseInt(difference / (1000 * 3600 * 24));\r\n          // console.log(elem.data.label + \" \" + days + \" \" + pert.slack[elem.id]);\r\n          slackObject[elem.data.label] = {\r\n            slack: pert.slack[elem.id],\r\n            days,\r\n            overdue: pert.slack[elem.id] < days ? true : false,\r\n          };\r\n          return slackObject;\r\n        }\r\n      });\r\n      console.log(\"slacks Object:\", slackObject[slackObject.length - 1]);\r\n      let obj = slackObject[slackObject.length - 1];\r\n      this.props.setSlacks({ slackObject: obj });\r\n      let newNodesObject = {};\r\n      newNodesObject = newNodes.map((node) => {\r\n        newNodesObject[node.id] = node.data;\r\n        return newNodesObject;\r\n      });\r\n      newNodesObject = newNodesObject[newNodesObject.length - 1];\r\n      // console.log(\"newNodesObject:\", newNodesObject);\r\n      let criticalPathData = {};\r\n      criticalPathData = pert.criticalPath.map((id) => {\r\n        criticalPathData[id] = newNodesObject[id];\r\n        return criticalPathData;\r\n      });\r\n      criticalPathData = criticalPathData[criticalPathData.length - 1];\r\n      console.log(\"criticalPathDataObject:\", criticalPathData);\r\n      this.props.setCriticalPath({ criticalPath: criticalPathData });\r\n\r\n      this.props.setExpectedTime({\r\n        expectedTime: Math.floor(this.props.pert.latestFinishTimes.__end),\r\n      });\r\n      // }\r\n    } catch (err) {\r\n      // console.log(err);\r\n      this.props.setPert({ pert: {} });\r\n      // console.log(this.props.pert);\r\n      this.props.setExpectedTime({\r\n        expectedTime: 0,\r\n      });\r\n    }\r\n    // this.setState({ pert });\r\n  };\r\n  onElementClick = (event, element) => {\r\n    console.log(element);\r\n  };\r\n  componentDidMount() {\r\n    let newNodes = [];\r\n\r\n    getTasks(this.props.project._id).then((data) => {\r\n      // console.log(data.tasks);\r\n      const tasks = data.tasks;\r\n      let newTasks = [];\r\n      tasks.map((task) => {\r\n        newTasks.push({ ...task });\r\n      });\r\n      newTasks.map((task) => {\r\n        task[\"label\"] = task.taskName;\r\n        task[\"description\"] = task.description;\r\n        task[\"time\"] = task.mostLikelyTime;\r\n        task[\"optimistic\"] = task.optimisticTime;\r\n        task[\"pessimistic\"] = task.pessimisticTime;\r\n        if (\r\n          task.taskName !== \"Completed!!\" &&\r\n          task.taskName !== \"Lets Start Working\"\r\n        ) {\r\n          let newNode = {\r\n            key: task._id,\r\n            id: (newNodes.length + 1).toString(),\r\n            data: task,\r\n            sourcePosition: \"right\",\r\n            targetPosition: \"left\",\r\n            position:\r\n              task.position !== undefined\r\n                ? task.position\r\n                : {\r\n                    x: (Math.random() * window.innerWidth) / 2,\r\n                    y: (Math.random() * window.innerHeight) / 2,\r\n                  },\r\n          };\r\n          newNodes.push(newNode);\r\n        }\r\n        if (task.taskName === \"Lets Start Working\") {\r\n          let ele = [...this.state.elements];\r\n          let newNode = {\r\n            key: task._id,\r\n            id: \"1\",\r\n            type: \"input\",\r\n            data: {\r\n              label: \"Lets Start Working\",\r\n              description: \"Start working on tasks to complete project on time\",\r\n              pessimistic: 0,\r\n              time: 0,\r\n              optimistic: 0,\r\n              predecessors: [],\r\n              _id: task._id,\r\n            },\r\n            sourcePosition: \"right\",\r\n            position:\r\n              task.position !== undefined ? task.position : { x: 0, y: 0 },\r\n          };\r\n          newNodes.push(newNode);\r\n        }\r\n        if (task.taskName === \"Completed!!\") {\r\n          let ele = [...this.state.elements];\r\n          let newNode = {\r\n            key: task._id,\r\n            id: \"2\",\r\n            type: \"output\",\r\n            data: {\r\n              label: \"Completed!!\",\r\n              description: \"Yaaayy you gus have completed the project\",\r\n              pessimistic: 0,\r\n              time: 0,\r\n              optimistic: 0,\r\n              predecessors: task.predecessors,\r\n              _id: task._id,\r\n            },\r\n            targetPosition: \"left\",\r\n            position:\r\n              task.position !== undefined ? task.position : { x: 500, y: 0 },\r\n          };\r\n          newNodes.push(newNode);\r\n        }\r\n      });\r\n      this.props.replaceNodes({ nodes: newNodes });\r\n      // console.log(\"Mount nodes:\", this.props.nodes);\r\n    });\r\n    getConnections(this.props.project._id)\r\n      .then((data) => {\r\n        let connections = [];\r\n        data.connections.map((link) => {\r\n          newNodes.map((elem) => {\r\n            if (elem.key !== undefined) {\r\n              if (link.from.toString() === elem.key.toString()) {\r\n                this.setState({ source: elem });\r\n              }\r\n              if (link.to.toString() === elem.key.toString()) {\r\n                this.setState({ target: elem });\r\n              }\r\n            }\r\n          });\r\n          let source = this.state.source;\r\n          let target = this.state.target;\r\n          if (source !== undefined && target !== undefined) {\r\n            let edge = {\r\n              id:\r\n                \"reactflow__edge-\" +\r\n                source.id.toString() +\r\n                \"null-\" +\r\n                target.id.toString() +\r\n                \"null\",\r\n              source: source.id.toString(),\r\n              sourceHandle: null,\r\n              target: target.id.toString(),\r\n              targetHandle: null,\r\n              _id: link._id,\r\n            };\r\n            connections.push(edge);\r\n          }\r\n          return \"done\";\r\n        });\r\n        // console.log(connections);\r\n        this.props.replaceConnections({ connections: connections });\r\n      })\r\n      .then(() => {\r\n        this.pertCalc();\r\n      });\r\n  }\r\n  componentDidUpdate(prevState, prevProps) {\r\n    if (this.props.connections.length !== prevState.connections.length) {\r\n      this.pertCalc();\r\n      // console.log(prevState.connections.length, this.props.connections.length);\r\n      // console.log(\"Pert from comp update:\", this.props.pert);\r\n      // console.log(\"Pert calculation nodes:\", this.props.nodes);\r\n    }\r\n    if (prevState.tasks.length !== this.props.tasks.length) {\r\n      const { tasks } = this.props;\r\n      let newTasks = [];\r\n      tasks.map((task) => {\r\n        newTasks.push({ ...task });\r\n      });\r\n      let newNodes = [];\r\n      newTasks.map((task) => {\r\n        task[\"label\"] = task.taskName;\r\n        task[\"description\"] = task.description;\r\n        task[\"time\"] = task.mostLikelyTime;\r\n        task[\"optimistic\"] = task.optimisticTime;\r\n        task[\"pessimistic\"] = task.pessimisticTime;\r\n        if (\r\n          task.taskName !== \"Completed!!\" &&\r\n          task.taskName !== \"Lets Start Working\"\r\n        ) {\r\n          let newNode = {\r\n            key: task._id,\r\n            id: (newNodes.length + 1).toString(),\r\n            data: task,\r\n            sourcePosition: \"right\",\r\n            targetPosition: \"left\",\r\n            position:\r\n              task.position !== undefined\r\n                ? task.position\r\n                : {\r\n                    x: (Math.random() * window.innerWidth) / 2,\r\n                    y: (Math.random() * window.innerHeight) / 2,\r\n                  },\r\n          };\r\n          newNodes.push(newNode);\r\n        }\r\n        if (task.taskName === \"Lets Start Working\") {\r\n          let ele = [...this.state.elements];\r\n          let newNode = {\r\n            key: task._id,\r\n            id: \"1\",\r\n            type: \"input\",\r\n            data: {\r\n              label: \"Lets Start Working\",\r\n              description: \"Start working on tasks to complete project on time\",\r\n              pessimistic: 0,\r\n              time: 0,\r\n              optimistic: 0,\r\n              predecessors: [],\r\n              _id: task._id,\r\n            },\r\n            sourcePosition: \"right\",\r\n            position:\r\n              task.position !== undefined ? task.position : { x: 0, y: 0 },\r\n          };\r\n          newNodes.push(newNode);\r\n        }\r\n        if (task.taskName === \"Completed!!\") {\r\n          let ele = [...this.state.elements];\r\n          let newNode = {\r\n            key: task._id,\r\n            id: \"2\",\r\n            type: \"output\",\r\n            data: {\r\n              label: \"Completed!!\",\r\n              description: \"Yaaayy you gus have completed the project\",\r\n              pessimistic: 0,\r\n              time: 0,\r\n              optimistic: 0,\r\n              predecessors: task.predecessors,\r\n              _id: task._id,\r\n            },\r\n            targetPosition: \"left\",\r\n            position:\r\n              task.position !== undefined ? task.position : { x: 500, y: 0 },\r\n          };\r\n          newNodes.push(newNode);\r\n        }\r\n      });\r\n      this.props.replaceNodes({ nodes: newNodes });\r\n      if (this.props.connections.length === 0) {\r\n        getConnections(this.props.project._id)\r\n          .then((data) => {\r\n            let connections = [];\r\n            data.connections.map((link) => {\r\n              newNodes.map((elem) => {\r\n                if (elem.key !== undefined) {\r\n                  if (link.from.toString() === elem.key.toString()) {\r\n                    this.setState({ source: elem });\r\n                  }\r\n                  if (link.to.toString() === elem.key.toString()) {\r\n                    this.setState({ target: elem });\r\n                  }\r\n                }\r\n              });\r\n              let source = this.state.source;\r\n              let target = this.state.target;\r\n              let edge = {\r\n                id:\r\n                  \"reactflow__edge-\" +\r\n                  source.id.toString() +\r\n                  \"null-\" +\r\n                  target.id.toString() +\r\n                  \"null\",\r\n                source: source.id.toString(),\r\n                sourceHandle: null,\r\n                target: target.id.toString(),\r\n                targetHandle: null,\r\n                _id: link._id,\r\n              };\r\n              connections.push(edge);\r\n\r\n              return \"done\";\r\n            });\r\n            // console.log(connections);\r\n            this.props.replaceConnections({ connections: connections });\r\n          })\r\n          .then(() => {\r\n            this.pertCalc();\r\n          });\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    if (this.props.tasks.length === 0) return <div>No tasks</div>;\r\n    const { nodes, connections, tasks } = this.props;\r\n    const { status } = this.props.project;\r\n    let connectCheck = status === \"Completed\" ? false : true;\r\n    const elements = [];\r\n    nodes.map((node) => {\r\n      elements.push({ ...node });\r\n    });\r\n    connections.map((connection) => {\r\n      elements.push({ ...connection });\r\n    });\r\n    // console.log(\"nodes:\", nodes);\r\n    return (\r\n      <div>\r\n        <div className=\"container-fluid\">\r\n          <ReactFlow\r\n            elements={elements}\r\n            onLoad={this.onLoad}\r\n            style={{\r\n              width: \"100%\",\r\n              height: \"65vh\",\r\n              backgroundColor: \"#1A192B\",\r\n            }}\r\n            onNodeDragStop={this.onNodeDragStop}\r\n            onConnect={this.onConnect}\r\n            onElementClick={this.onElementClick}\r\n            onElementsRemove={this.onElementsRemove}\r\n            connectionLineStyle={{ stroke: \"#ddd\", strokeWidth: 2 }}\r\n            connectionLineType=\"bezier\"\r\n            snapToGrid={true}\r\n            snapGrid={[16, 16]}\r\n            nodesConnectable={connectCheck}\r\n            nodesDraggable={connectCheck}\r\n            defaultZoom={1}\r\n          >\r\n            <Background color=\"#888\" gap={16} />\r\n            <MiniMap\r\n              nodeColor={(n) => {\r\n                if (n.type === \"input\") return \"#DC143C\";\r\n                if (n.type === \"output\") return \"#90ee90\";\r\n                return \"cyan\";\r\n              }}\r\n            />\r\n            <Controls />\r\n          </ReactFlow>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  nodes: state.cpm.nodes,\r\n  connections: state.cpm.connections,\r\n  state: state,\r\n  notifications: state.notifications.notifications,\r\n  tasks: state.tasks.tasks,\r\n  elements: state.cpm.elements,\r\n  pert: state.cpm.pert,\r\n  slacks: state.cpm.slacks,\r\n  criticalPath: state.cpm.criticalPath,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  nodeAdded: (params) => dispatch(nodeAdded(params)),\r\n  connectionAdded: (params) => dispatch(connectionAdded(params)),\r\n  updateTasks: (params) => dispatch(updateTasks(params)),\r\n  replaceNodes: (params) => dispatch(replaceNodes(params)),\r\n  replaceConnections: (params) => dispatch(replaceConnections(params)),\r\n  replaceElements: (params) => dispatch(replaceElements(params)),\r\n  setPert: (params) => dispatch(setPert(params)),\r\n  setExpectedTime: (params) => dispatch(setExpectedTime(params)),\r\n  setSlacks: (params) => dispatch(setSlacks(params)),\r\n  setCriticalPath: (params) => dispatch(setCriticalPath(params)),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withStyles(styles)(LayoutComponent));\r\n",["269","270"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\user\\Users.js",[],["271","272"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\apiNotifications.js",[],["273","274"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\AssignedTo.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\taskComponents\\TrelloTask.js",[],["275","276"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\MyProjects.js",["277"],"import React, { Component } from \"react\";\r\nimport { listmyprojects } from \"./apiProject\";\r\nimport {\r\n  OverlayTrigger,\r\n  Tooltip,\r\n  Accordion,\r\n  Button,\r\n  Card,\r\n} from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getCurrentUser } from \"./../user/apiUser\";\r\nimport RoleReq from \"./RoleReq\";\r\nimport AssignedTo from \"./AssignedTo\";\r\nimport DeleteProject from \"./DeleteProject\";\r\nimport LeaveProject from \"./LeaveProject\";\r\nimport EditTwoToneIcon from \"@material-ui/icons/EditTwoTone\";\r\nimport DashboardTwoToneIcon from \"@material-ui/icons/DashboardTwoTone\";\r\nimport SubmitProject from \"./SubmitProject\";\r\nimport UserRecommendation from \"./UserRecommendation\";\r\nimport socket from \"./../utils/Socket\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { clearAll } from \"../store/cpm\";\r\nimport { connect } from \"react-redux\";\r\nclass MyProjects extends Component {\r\n  state = {\r\n    myProjects: [],\r\n    currentProject: {},\r\n    user: {},\r\n  };\r\n  componentDidMount() {\r\n    listmyprojects().then((data) => this.setState({ myProjects: data }));\r\n    // toast.dark(\"Loaded\");\r\n  }\r\n  renderProject(project) {\r\n    // return <h5>{project.title}</h5>;\r\n    console.log(project.title);\r\n  }\r\n  render() {\r\n    if (\r\n      this.state.myProjects === undefined ||\r\n      this.state.myProjects.length === 0\r\n    )\r\n      return <h1>No Projects</h1>;\r\n    const { myProjects } = this.state;\r\n    console.log(myProjects);\r\n    let onGoingProjects = myProjects.userProjects.filter((x) =>\r\n      x.status.includes(\"In Progress\")\r\n    );\r\n    let CompletedProjects = myProjects.userProjects.filter((x) =>\r\n      x.status.includes(\"Completed\")\r\n    );\r\n    socket.emit(\"getOnlineUsers\");\r\n    socket.on(\"onlineUsers\", (data) => console.log(data));\r\n    return (\r\n      <div className=\"mt-5\">\r\n        <ToastContainer />\r\n        <h2>My Projects</h2>\r\n        <Accordion defaultActiveKey=\"0\">\r\n          <Card>\r\n            <Card.Header>\r\n              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n                Ongoing Projects\r\n              </Accordion.Toggle>\r\n            </Card.Header>\r\n            <Accordion.Collapse eventKey=\"0\">\r\n              <Card.Body>\r\n                <div className=\"row row-cols-1 row-cols-md-2\">\r\n                  {onGoingProjects.map((project) => (\r\n                    <div className=\"col mb-4\">\r\n                      <div className=\"card text-white bg-primary \">\r\n                        <div className=\"card-header\">\r\n                          <div className=\"d-flex align-items-center justify-content-between\">\r\n                            <h5 className=\"card-label  text-darker\">\r\n                              {project.title}\r\n                            </h5>\r\n\r\n                            <div className=\"card-toolbar\">\r\n                              <div className=\"d-flex align-items-center justify-content-between\">\r\n                                <OverlayTrigger\r\n                                  key=\"top\"\r\n                                  placement=\"top\"\r\n                                  overlay={\r\n                                    <Tooltip id=\"top2\">\r\n                                      Project Dashboard\r\n                                    </Tooltip>\r\n                                  }\r\n                                >\r\n                                  <Link\r\n                                    className=\"btn btn-info mr-2\"\r\n                                    to={{\r\n                                      pathname: `/myprojects/dashboard/${project._id}`,\r\n                                      state: { project: project },\r\n                                    }}\r\n                                  >\r\n                                    <DashboardTwoToneIcon />\r\n                                  </Link>\r\n                                </OverlayTrigger>\r\n                                {getCurrentUser()._id === project.leader ? (\r\n                                  <div className=\"d-flex align-items-center justify-content-between\">\r\n                                    <OverlayTrigger\r\n                                      key=\"top\"\r\n                                      placement=\"top\"\r\n                                      overlay={\r\n                                        <Tooltip id=\"tooltip-top\">\r\n                                          Edit Project\r\n                                        </Tooltip>\r\n                                      }\r\n                                    >\r\n                                      <Link\r\n                                        className=\"btn btn-warning mr-2\"\r\n                                        to={{\r\n                                          pathname: `/myprojects/edit/${project._id}`,\r\n                                          state: { project: project },\r\n                                        }}\r\n                                      >\r\n                                        <EditTwoToneIcon />\r\n                                      </Link>\r\n                                    </OverlayTrigger>\r\n\r\n                                    <DeleteProject projectId={project._id} />\r\n                                    {project.completion_percentage === 100 ? (\r\n                                      <SubmitProject\r\n                                        projectId={project._id}\r\n                                        projectTeam={project.team}\r\n                                        projectLeader={project.leader}\r\n                                      />\r\n                                    ) : (\r\n                                      <div> </div>\r\n                                    )}\r\n                                  </div>\r\n                                ) : (\r\n                                  <div>\r\n                                    <LeaveProject project={project} />\r\n                                  </div>\r\n                                )}\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"card-body\">\r\n                          <div className=\"d-flex align-items-center justify-content-between mb-2\">\r\n                            <span className=\"font-weight-bold mr-2\">\r\n                              Description:{\" \"}\r\n                            </span>\r\n                            <span>{project.description}</span>\r\n                          </div>\r\n                          <div className=\"d-flex align-items-center justify-content-between mb-2\">\r\n                            <span className=\"font-weight-bold mr-2\">\r\n                              Skills:{\" \"}\r\n                            </span>\r\n                            <span>{project.skills.join(\", \")}</span>\r\n                          </div>\r\n                          <table className=\"table table-dark\">\r\n                            <thead>\r\n                              <tr>\r\n                                <th key={\"rolename\"}>Role Name</th>\r\n                                <th key={\"skills\"}>Skills Required</th>\r\n\r\n                                <th key={\"assigned\"}>Assigned To</th>\r\n                              </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                              {project.roles.map((role) => (\r\n                                <tr key={role._id.toString()}>\r\n                                  <td\r\n                                    key={\r\n                                      role._id.toString() +\r\n                                      role.roleName.toString()\r\n                                    }\r\n                                  >\r\n                                    {role.roleName}\r\n                                  </td>\r\n                                  <td\r\n                                    key={\r\n                                      role._id.toString() +\r\n                                      role.roleSkills.toString()\r\n                                    }\r\n                                  >\r\n                                    {role.roleSkills.join(\", \")}\r\n                                  </td>\r\n                                  <td>\r\n                                    {project.leader === getCurrentUser()._id &&\r\n                                    role.assignedTo === undefined ? (\r\n                                      <div>\r\n                                        <RoleReq\r\n                                          requestBy={role.requestBy}\r\n                                          projectId={project._id}\r\n                                          roleId={role._id}\r\n                                        />\r\n                                      </div>\r\n                                    ) : (\r\n                                      <div>\r\n                                        <AssignedTo id={role.assignedTo} />\r\n                                      </div>\r\n                                    )}\r\n                                  </td>\r\n                                  <td></td>\r\n                                </tr>\r\n                              ))}\r\n                            </tbody>\r\n                          </table>\r\n                          {getCurrentUser()._id === project.leader ? (\r\n                            <UserRecommendation project={project} />\r\n                          ) : (\r\n                            <div></div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n          <Card>\r\n            <Card.Header>\r\n              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n                Overdue Projects\r\n              </Accordion.Toggle>\r\n            </Card.Header>\r\n            <Accordion.Collapse eventKey=\"1\">\r\n              <Card.Body>Check with group if Overdue has been added.</Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n          <Card>\r\n            <Card.Header>\r\n              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"2\">\r\n                Completed Projects\r\n              </Accordion.Toggle>\r\n            </Card.Header>\r\n            <Accordion.Collapse eventKey=\"2\">\r\n              <Card.Body>\r\n                <div className=\"row row-cols-1 row-cols-md-2\">\r\n                  {CompletedProjects.map((project) => (\r\n                    <div className=\"col mb-4\">\r\n                      <div className=\"card text-white bg-success\">\r\n                        <div className=\"card-header\">\r\n                          <div className=\"d-flex align-items-center justify-content-between\">\r\n                            <h5 className=\"card-label  text-darker\">\r\n                              {project.title}\r\n                            </h5>\r\n\r\n                            <div className=\"card-toolbar\">\r\n                              <div className=\"d-flex align-items-center justify-content-between\">\r\n                                <OverlayTrigger\r\n                                  key=\"top\"\r\n                                  placement=\"top\"\r\n                                  overlay={\r\n                                    <Tooltip id=\"top2\">\r\n                                      Project Dashboard\r\n                                    </Tooltip>\r\n                                  }\r\n                                >\r\n                                  <Link\r\n                                    className=\"btn btn-info mr-2\"\r\n                                    to={{\r\n                                      pathname: `/myprojects/dashboard/${project._id}`,\r\n                                      state: { project: project },\r\n                                    }}\r\n                                  >\r\n                                    <DashboardTwoToneIcon />\r\n                                  </Link>\r\n                                </OverlayTrigger>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"card-body\">\r\n                          <div className=\"d-flex align-items-center justify-content-between mb-2\">\r\n                            <span className=\"font-weight-bold mr-2\">\r\n                              Description:{\" \"}\r\n                            </span>\r\n                            <span>{project.description}</span>\r\n                          </div>\r\n                          <div className=\"d-flex align-items-center justify-content-between mb-2\">\r\n                            <span className=\"font-weight-bold mr-2\">\r\n                              Skills:{\" \"}\r\n                            </span>\r\n                            <span>{project.skills.join(\", \")}</span>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n        </Accordion>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  clearAll: (params) => dispatch(clearAll(params)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(MyProjects);\r\n","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\core\\ProjectRecommendation.js",["278","279"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\DeleteProject.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\layout\\Pert.js",["280","281","282","283","284","285"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\store\\store.js",["286","287"],"import { devToolsEnhancer } from \"redux-devtools-extension\";\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport reducer from \"./reducer\";\nexport default function () {\n  return configureStore({\n    reducer,\n    middleware: [...getDefaultMiddleware()],\n  });\n}\n",["288","289"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\utils\\Socket.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\apiProject.js",["290","291"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\user\\MyChats.js",["292","293","294","295","296","297","298"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  getCurrentUser,\r\n  getfriends,\r\n  getUserById,\r\n  updatePersonalChat,\r\n} from \"./apiUser\";\r\nimport DefaultProfile from \"./../images/avatar.png\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Row, Tab, Col, Nav } from \"react-bootstrap\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { clearFriends, friendAdded } from \"../store/user\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport io from \"socket.io-client\";\r\nimport moment from \"moment\";\r\nimport { isAuthenticated } from \"../auth\";\r\n\r\nvar options = {\r\n  rememberUpgrade: true,\r\n  transports: [\"websocket\"],\r\n  secure: true,\r\n  rejectUnauthorized: false,\r\n};\r\n\r\nconst MyChats = () => {\r\n  const dispatch = useDispatch();\r\n  const friends = useSelector((state) => state.user.friends);\r\n  const [user, setUser] = useState({});\r\n  const [touser_id, settouser_id] = useState(String);\r\n  const [toname, settoname] = useState(String);\r\n  const [state, setState] = useState({\r\n    message: \"\",\r\n    from_name: getCurrentUser().name,\r\n    created: new Date(),\r\n  });\r\n  const [chat, setChat] = useState([]);\r\n  \r\n  const divRef = useRef(null);\r\n  const messagesEndRef = useRef(null);\r\n  const socketRef = useRef();\r\n\r\n  useEffect(async () => {\r\n    dispatch(clearFriends());\r\n    await getfriends(getCurrentUser()._id).then(async (data) => {\r\n      console.log(\"id : \",data)\r\n      await data.map(async (userid) => {\r\n        await getUserById(userid).then((u) => {\r\n          console.log(\"u.user : \", u.user.name)\r\n          if(u.user._id !== getCurrentUser()._id)\r\n            dispatch(friendAdded({ user: u.user }));\r\n        });\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  console.log(friends);\r\n\r\n  function fun (user){\r\n    let userid = getCurrentUser()._id;\r\n    socketRef.current = io.connect(\"http://localhost:8081\", options);\r\n    socketRef.current.emit(\"getPersonalChat\", {\r\n      userid,\r\n      touser : user._id,\r\n      client_chat_length: chat.length,\r\n    });\r\n    socketRef.current.on(\"personalchat\" + userid, (data) => {\r\n      setChat(data);\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    let userid = getCurrentUser()._id;\r\n    socketRef.current = io.connect(\"http://localhost:8081\", options);\r\n    socketRef.current.emit(\"getPersonalChat\", {\r\n      userid,\r\n      touser : user._id,\r\n      client_chat_length: chat.length,\r\n    });\r\n\r\n    socketRef.current.on(\r\n      \"personal_message\" + userid,\r\n      ({ from_name, toname, message, created, touser_id, fromuser}) => {\r\n        let chats = [... chat];\r\n        chats.push({ from_name, toname, message, created, touser_id, fromuser})\r\n        setChat(chats);\r\n      }\r\n    );\r\n  },[]);\r\n\r\n  useEffect(() => {\r\n    let userid = getCurrentUser()._id;\r\n    socketRef.current = io.connect(\"http://localhost:8081\", options);\r\n    socketRef.current.emit(\"getPersonalChat\", {\r\n      userid,\r\n      touser : user._id,\r\n      client_chat_length: chat.length,\r\n    });\r\n    socketRef.current.on(\"personalchat\" + userid, (data) => {\r\n      setChat(data);\r\n    });\r\n    socketRef.current.on(\r\n      \"personal_message\" + userid,\r\n      ({ from_name, toname, message, created, touser_id, fromuser}) => {\r\n        let chats = [... chat];\r\n        chats.push({ from_name, toname, message, created, touser_id, fromuser})\r\n        setChat(chats);\r\n      }\r\n    );\r\n    return () => socketRef.current.disconnect();\r\n  }, [chat]);\r\n\r\n  const onMessageSubmit = (e) => {\r\n    const { from_name, message, created } = state;\r\n    let fromuser = getCurrentUser()._id;\r\n    if (message.trim() !== \"\") {\r\n      socketRef.current.emit(\"personal_message\", {\r\n        from_name,\r\n        toname,\r\n        message,\r\n        created,\r\n        touser_id,\r\n        fromuser,\r\n      });\r\n      let chat_msg = { from_name, toname, message, created, touser_id, fromuser };\r\n      updatePersonalChat(chat_msg).then((data) => { \r\n        let chats = [...chat];\r\n        chats.push(chat_msg);  \r\n        setChat(chats);\r\n      });\r\n    }\r\n    e.preventDefault();\r\n    setState({ message: \"\", from_name });\r\n  };\r\n\r\n  const onTextChange = (e) => {\r\n    setState({ ...state, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  var d = new Date();\r\n  var f = 0;\r\n  function setdate(dd) {\r\n    d = dd;\r\n    return moment(dd).format(\"DD-MM-YYYY\");\r\n  }\r\n  function settoday(dd) {\r\n    d = dd;\r\n    f = 1;\r\n  }\r\n  const renderChat = () => {\r\n    f=0;\r\n    return chat.map(({ from_name, message, created }, index) => (\r\n      <div>\r\n        <div className=\"d-flex flex-column m-3 align-items-center\">\r\n          {moment(created).format(\"DD-MM-YYYY\") !==\r\n          moment(d).format(\"DD-MM-YYYY\") ? (\r\n            moment(created).format(\"DD-MM-YYYY\") ===\r\n            moment(new Date()).format(\"DD-MM-YYYY\") ? (\r\n              <span className=\"text-dark-75 font-weight-bold font-size-sm bubble-date\">\r\n                Today{settoday(created)}\r\n              </span>\r\n            ) : (\r\n              <span className=\"text-dark-75 font-weight-bold font-size-sm bubble-date\">\r\n                {setdate(created)}\r\n              </span>\r\n            )\r\n          ) : moment(created).format(\"DD-MM-YYYY\") ===\r\n              moment(new Date()).format(\"DD-MM-YYYY\") && f === 0 ? (\r\n            <span className=\"text-dark-75 font-weight-bold font-size-sm bubble-date\">\r\n              Today{settoday(created)}\r\n            </span>\r\n          ) : (\r\n            <div></div>\r\n          )}\r\n        </div>\r\n        {isAuthenticated().user.name === from_name ? (\r\n          <div className=\"d-flex flex-column m-3 align-items-end \" key={index}>\r\n            <div className=\"d-flex align-items-center\">\r\n              <div>\r\n                <span className=\"text-muted font-size-sm\">\r\n                  {moment(created).format(\"h:mm a\")}\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div className=\"mt-2 text-dark-50 font-weight-bold font-size-lg  text-left bubble-alt\">\r\n              {message}\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div\r\n            className=\"d-flex flex-column m-3 align-items-start \"\r\n            key={index}\r\n          >\r\n            <div className=\"d-flex align-items-center\">\r\n              <div>\r\n                <span className=\"text-muted font-size-sm\">\r\n                  {moment(created).format(\"h:mm a\")}\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div className=\"mt-2 text-dark-50 font-weight-bold font-size-lg  text-left  bubble\">\r\n              {message}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  return (\r\n      <div className=\"pt-5\">\r\n        <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"empty\">\r\n          <Row>\r\n            <Col sm={2}>\r\n              <div className=\"card card-custom card-stretch\">\r\n                <div className=\"card-body pt-4\">\r\n                  <Nav variant=\"pills\" className=\"flex-column mt-3\">\r\n                    {friends.map((user, i) => (\r\n                      <Nav.Item>\r\n                        {console.log(user)}\r\n                        <Nav.Link\r\n                          eventKey={i}\r\n                          onClick={() => {\r\n                            setUser(user);\r\n                            settouser_id(user._id);\r\n                            settoname(user.name);\r\n                            fun(user)\r\n                          }}\r\n                        >\r\n                          <div className=\"d-flex align-items-center\">\r\n                            <div className=\"mr-3\">\r\n                              <img src={DefaultProfile} style={{ width: \"40px\" }} />\r\n                            </div>\r\n                            <div>{user.name}</div>\r\n                          </div>\r\n                        </Nav.Link>\r\n                      </Nav.Item>\r\n                    ))}\r\n                  </Nav>\r\n                </div>\r\n              </div>\r\n            </Col>\r\n            <Col sm={10}>\r\n              <Tab.Content>\r\n                <Tab.Pane eventKey=\"empty\">\r\n                  <div className=\"card card-stretch\">\r\n                    <div className=\"card-header\">\r\n                      <div className=\"card-title align-items-start flex-column\">\r\n                        <h4 className=\"card-label font-weight-bolder text-dark\">\r\n                          Click on a chat.\r\n                        </h4>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </Tab.Pane>\r\n                {friends.map((user, i) => {\r\n                  let comp = [];\r\n                  comp.push(\r\n                    <Tab.Pane eventKey={i}>\r\n                      <div className=\"card card-stretch\">\r\n                        <div className=\"card-header\">\r\n                          <div className=\"card-title align-items-start flex-column\">\r\n                            <h4 className=\"card-label font-weight-bolder text-dark\">\r\n                              {user.name}\r\n                            </h4>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"card-body\">\r\n                          <div>\r\n                            <div ref={divRef} className=\"render-chat\">\r\n                                {renderChat()}\r\n                              <div ref={messagesEndRef} />\r\n                            </div>\r\n                            <form onSubmit={onMessageSubmit}>\r\n                              <div className=\"row pt-5\">\r\n                                <Col sm={10}>\r\n                                  <TextField\r\n                                    name=\"message\"\r\n                                    onChange={(e) => {\r\n                                      onTextChange(e);\r\n                                    }}\r\n                                    value={state.message}\r\n                                    id=\"outlined-multiline-static\"\r\n                                    variant=\"outlined\"\r\n                                    label=\"Message\"\r\n                                    fullWidth\r\n                                  />\r\n                                </Col>\r\n                                <Col>\r\n                                  <button className=\"btn btn-primary\">\r\n                                    Send Message <SendIcon />\r\n                                  </button>\r\n                                </Col>\r\n                              </div>\r\n                            </form>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </Tab.Pane>\r\n                  );\r\n                  return comp;\r\n                })}\r\n              </Tab.Content>\r\n            </Col>\r\n          </Row>\r\n        </Tab.Container>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n",["299","300"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\newProjectForm\\RoleCreate.js",["301"],"import React from \"react\";\nimport SkillsInput from \"../../utils/signupbutton/Tagify/SkillsInput\";\n\nconst RoleList = (props) => {\n  // if (props.skillDetails === undefined) return null;\n  const { onChange } = props;\n  return props.roleDetails.map((val, idx) => {\n    let roleName = `roleName-${idx}`;\n    let roleSkills = `roleSkills-${idx}`;\n    return (\n      <div className=\"form-row mt-3\" key={val.index}>\n        <div className=\"form-group col-md-4 offset-1\">\n          <label>\n            <big>Role Title</big>\n          </label>\n          <input\n            type=\"text\"\n            className=\"form-control required\"\n            // rolename=\"roleName\"\n            idx={idx}\n            id={roleName}\n            onChange={onChange(\"roleName\")}\n            value={props.roleDetails[idx].roleName}\n          />\n        </div>\n        {/*<div className=\"form-row\" key={val.index}>*/}\n        <div className=\"form-group col-md-5\">\n          <SkillsInput\n            label={<big>Role Skills</big>}\n            setSkills={(e) => {\n              props.roleDetails[idx].roleSkills = e;\n            }}\n            value={props.roleDetails[idx].roleSkills}\n          />\n        </div>\n        {/*</div>*/}\n        <div className=\"form-group col-md-2 mt-4\">\n          {idx === 0 ? (\n            <button\n              onClick={() => props.add()}\n              type=\"button\"\n              className=\"btn btn-primary text-center\"\n            >\n              <i className=\"fa fa-plus\" aria-hidden=\"true\" />\n            </button>\n          ) : (\n            <button\n              className=\"btn btn-danger\"\n              onClick={() => props.delete(val)}\n            >\n              <i className=\"fa fa-minus\" aria-hidden=\"true\" />\n            </button>\n          )}\n        </div>\n      </div>\n    );\n  });\n};\n\nexport default RoleList;\n","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\taskComponents\\EditModel.js",["302"],"import { Modal, Button } from \"react-bootstrap\";\nimport React, { Component } from \"react\";\nimport { updateTask } from \"./../apiProject\";\nimport AssignPerson from \"./../../utils/signupbutton/Tagify/AssignPerson\";\nimport { getUserById } from \"./../../user/apiUser\";\nclass EditModel extends Component {\n  state = {\n    title: \"\",\n    description: \"\",\n    laneId: \"\",\n    pessimisticTime: 0,\n    optimisticTime: 0,\n    mostLikelyTime: 0,\n    task_responsible: [],\n    task_responsible_string: \"\",\n    assigned: [],\n  };\n  componentDidMount() {\n    this.setState({\n      title: this.props.task.taskName,\n      description: this.props.task.taskDescription,\n      pessimisticTime: this.props.task.pessimisticTime,\n      optimisticTime: this.props.task.optimisticTime,\n      mostLikelyTime: this.props.task.mostLikelyTime,\n      id: this.props.task._id,\n      laneId: this.props.task.status,\n      assigned: this.props.task.assignedTo,\n    });\n    const assignedToMembs = this.props.task.assignedTo;\n    let string = \"\";\n    assignedToMembs.map((memb) => {\n      getUserById(memb).then((user) => {\n        let { task_responsible } = this.state;\n        task_responsible.push(user.user.name);\n        string += user.user.name + \",\";\n        this.setState({\n          task_responsible: task_responsible,\n          task_responsible_string: string,\n        });\n      });\n    });\n  }\n  assignTo = (members) => {\n    this.setState({ task_responsible: members });\n  };\n  assignIds = (ids) => {\n    this.setState({ assigned: ids });\n  };\n  render() {\n    let task = this.props.task;\n    if (task === {}) return;\n    let show = this.props.show;\n    console.log(this.props.task);\n\n    // if (tasks === undefined) return;\n    // tasks.map((task) => {\n    //   if (this.props.id.toString() === task._id) console.log(task);\n    // });\n    // console.log(this.props.id);\n    return (\n      <Modal show={show} onHide={() => this.props.hideMe()}>\n        <Modal.Header closeButton>\n          <Modal.Title>Edit Task</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <label>Name:</label>\n          <input\n            type={\"text\"}\n            defaultValue={task.taskName}\n            onChange={(e) => this.setState({ title: e.target.value })}\n          ></input>\n          <br></br>\n          <label>Description:</label>\n          <input\n            type={\"text\"}\n            defaultValue={task.taskDescription}\n            onChange={(e) => this.setState({ description: e.target.value })}\n          ></input>\n          <br></br>\n          <label>Optimistic Time:</label>\n          <input\n            type={\"number\"}\n            defaultValue={task.optimisticTime}\n            onChange={(e) => this.setState({ optimisticTime: e.target.value })}\n          ></input>\n          <br></br>\n          <label>Most Likely Time:</label>\n          <input\n            type={\"number\"}\n            defaultValue={task.mostLikelyTime}\n            onChange={(e) => this.setState({ mostLikelyTime: e.target.value })}\n          ></input>\n          <br></br>\n\n          <label>Pessimistic Time:</label>\n          <input\n            type={\"number\"}\n            defaultValue={task.pessimisticTime}\n            onChange={(e) => this.setState({ pessimisticTime: e.target.value })}\n          ></input>\n          <br></br>\n          <AssignPerson\n            projectId={this.props.projectId}\n            assignTo={this.assignTo}\n            assignIds={this.assignIds}\n            label={\"Assigned to\"}\n            value={this.state.task_responsible_string}\n          />\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            onClick={() =>\n              updateTask(this.state, this.props.projectId)\n                .then((data) => console.log(data))\n                .then(() => window.location.reload())\n            }\n          >\n            Submit\n          </Button>\n          <Button onClick={() => this.props.hideMe()}>Close</Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\nexport default EditModel;\n",["303","304"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\newProjectForm\\CreateProject.js",["305"],"import React, { Component } from \"react\";\nimport RoleList from \"./RoleCreate\";\nimport { newProject } from \"./../apiProject\";\nimport SkillsInput from \"./../../utils/signupbutton/Tagify/SkillsInput\";\n\nclass CreateProject extends Component {\n  constructor() {\n    super();\n    this.state = {\n      title: \"\",\n      description: \"\",\n      skills: [\"\"],\n      error: \"\",\n      roleDetails: [\n        {\n          index: Math.random(),\n          roleName: \"\",\n          roleSkills: [\"\"],\n        },\n      ],\n      open: false,\n    };\n  }\n\n  handleChange = (proj) => (event) => {\n    this.setState({ error: \"\" });\n    this.setState({ [proj]: event.target.value });\n  };\n  handleSkills = (newSkills) => {\n    this.setState({ skills: newSkills });\n  };\n  handleRoleChange = (name) => (e) => {\n    let id = parseInt(e.target.attributes.idx.value);\n    const roleDetails = this.state.roleDetails;\n    roleDetails[id][name] = e.target.value;\n    this.setState({ roleDetails });\n  };\n\n  addNewRow = (e) => {\n    this.setState((prevState) => ({\n      roleDetails: [\n        ...prevState.roleDetails,\n        {\n          index: Math.random(),\n          roleName: \"\",\n          roleSkills: \"\",\n        },\n      ],\n    }));\n  };\n\n  deteteRow = (index) => {\n    this.setState({\n      roleDetails: this.state.roleDetails.filter(\n        (s, sindex) => index !== sindex\n      ),\n    });\n  };\n\n  clickOnDelete(record) {\n    this.setState({\n      roleDetails: this.state.roleDetails.filter((r) => r !== record),\n    });\n  }\n\n  clickSubmit = (event) => {\n    event.preventDefault();\n    this.setState({ loading: true });\n    let { title, description, skills, roleDetails } = this.state;\n    let project = {\n      title,\n      description,\n      skills,\n      roleDetails,\n    };\n    // newProject(project);\n    try {\n      newProject(project).then((data) => {\n        if (data === undefined) return;\n        if (data.error) {\n          if (data.similar) {\n            this.setState({ similar: data.similar });\n            console.log(this.state.similar);\n          }\n          this.setState({ error: data.error });\n        } else\n          this.setState({\n            title: \"\",\n            description: \"\",\n            skills: [\"\"],\n            roleDetails: [\n              {\n                index: Math.random(),\n                roleName: \"\",\n                roleSkills: [],\n              },\n            ],\n            error: \"\",\n            open: true,\n          });\n      });\n    } catch (error) {\n      console.log(error);\n    }\n    // console.log(project);\n  };\n\n  render() {\n    let { error, title, description, skills, roleDetails, open } = this.state;\n    return (\n      <div className=\"mt-5\">\n        <h2>Let's Start a New Project</h2>\n        <p className=\"text-muted\">\n          Fill in the form with all the necessary details to register the\n          project.\n        </p>\n        <div\n          className=\"alert alert-danger\"\n          style={{ display: error ? \"\" : \"none\" }}\n        >\n          {error}\n        </div>\n\n        <div\n          className=\"alert alert-success\"\n          style={{ display: open ? \"\" : \"none\" }}\n        >\n          Project Successfully Registered. Check \"My Projects\".\n        </div>\n        <form className=\"mt-5\">\n          <div className=\"form-group\">\n            <div className=\"row\">\n              <div className=\"col-sm-10 offset-1\">\n                <label>\n                  <big>Title of your Project</big>\n                </label>\n                <input\n                  className=\"form-control\"\n                  type=\"text\"\n                  value={title}\n                  onChange={this.handleChange(\"title\")}\n                />\n              </div>\n            </div>\n            <div className=\"row mt-3\">\n              <div className=\"col-sm-10 offset-1\">\n                <label>\n                  <big>Description of the Project</big>\n                </label>\n                <input\n                  className=\"form-control\"\n                  type=\"text\"\n                  value={description}\n                  onChange={this.handleChange(\"description\")}\n                />\n              </div>\n            </div>\n            <div className=\"row mt-3\">\n              <div className=\"col-sm-10 offset-1\">\n                <SkillsInput\n                  label={<big>Skills</big>}\n                  setSkills={this.handleSkills}\n                />\n              </div>\n            </div>\n            {/*<RoleView />*/}\n            <RoleList\n              add={this.addNewRow}\n              delete={this.clickOnDelete.bind(this)}\n              roleDetails={roleDetails}\n              onChange={this.handleRoleChange}\n            />\n            <div className=\"row\">\n              <button\n                onClick={this.clickSubmit}\n                className=\"btn btn-raised btn-primary mx-auto mt-3 mb-2 col-sm-3\"\n              >\n                Create Project!\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default CreateProject;\n","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\store\\notifications.js",["306"],"import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { addNotification, getNotifications } from \"./../apiNotifications\";\r\nimport { toast } from \"react-toastify\";\r\nimport { isAuthenticated } from \"../auth\";\r\nconst slice = createSlice({\r\n  name: \"notifications\",\r\n  initialState: {\r\n    notifications: [],\r\n    segregatedNotifications: {},\r\n  },\r\n  reducers: {\r\n    notificationAdded: (state, action) => {\r\n      addNotification(\r\n        action.payload.userId,\r\n        action.payload.message,\r\n        action.payload.type,\r\n        action.payload.projectId\r\n      )\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((user) => {\r\n          let notifications = user.user.notifications;\r\n          if (action.payload.userId === isAuthenticated().user._id) {\r\n            toast.dark(action.payload.message, {\r\n              position: \"top-right\",\r\n              autoClose: 5000,\r\n              hideProgressBar: false,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n            });\r\n          }\r\n          console.log(notifications);\r\n        });\r\n    },\r\n    getNotified: (state, action) => {\r\n      state.notifications.push({\r\n        id: action.payload.id,\r\n        message: action.payload.message,\r\n        read: action.payload.read,\r\n        type: action.payload.type,\r\n        projectId: action.payload.projectId,\r\n      });\r\n    },\r\n    clearNotifications: (state, action) => {\r\n      state.notifications = [];\r\n    },\r\n    setSegregatedNotifications: (state, action) => {\r\n      const segregatedNotificationsObj = action.payload.segregatedNotifications;\r\n      void (state.segregatedNotifications = segregatedNotificationsObj);\r\n    },\r\n  },\r\n});\r\nexport const {\r\n  notificationAdded,\r\n  getNotified,\r\n  clearNotifications,\r\n  setSegregatedNotifications,\r\n} = slice.actions;\r\nexport default slice.reducer;\r\n","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\SubmitProject.js",["307","308","309"],"import React, { Component } from \"react\";\r\nimport { isAuthenticated } from \"./../auth/index\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { finish } from \"./apiProject\";\r\nimport { Button, OverlayTrigger, Tooltip, Modal } from \"react-bootstrap\";\r\nimport PublishTwoToneIcon from \"@material-ui/icons/PublishTwoTone\";\r\nimport socket from \"./../utils/Socket\";\r\nimport RatingComponent from \"./RatingComponent\";\r\nimport { getUserById, setRating } from \"../user/apiUser\";\r\nclass SubmitProject extends Component {\r\n  state = {\r\n    show: false,\r\n    rating: {},\r\n  };\r\n  componentDidMount() {\r\n    const { projectTeam } = this.props;\r\n    let team = [];\r\n    projectTeam.map((member, index) => {\r\n      getUserById(member).then((val) => {\r\n        // let rating = this.state.rating;\r\n        // rating[val.user._id] = 4;\r\n        // this.setState({ rating });\r\n        team.push(val.user);\r\n        this.setState({ team });\r\n        // setRating(val.user._id, rating[val.user._id]).then((val) =>\r\n        //   console.log(val)\r\n        // );\r\n      });\r\n      // console.log(user);\r\n    });\r\n  }\r\n\r\n  submitproject = () => {\r\n    const token = isAuthenticated().token;\r\n    const userId = isAuthenticated().user._id;\r\n    const { rating } = this.state;\r\n    const { projectId, projectTeam } = this.props;\r\n    socket.emit(\"addFeedbackForm\", { rating, projectId });\r\n    // socket.emit(\"getOnlineUsers\");\r\n    // socket.on(\"onlineUsers\", (users) => {\r\n    //   Object.values(users.users).map((user) => {\r\n    //     console.log(user);\r\n    //   });\r\n    // });\r\n    setRating(userId, rating).then((data) => {\r\n      if (data.message === \"Updated Ratings\") {\r\n        finish(projectId, token).then((data) => {\r\n          if (data.error) {\r\n            console.log(data.error);\r\n          } else {\r\n            alert(\"Project marked as completed :) \");\r\n            window.location.reload();\r\n          }\r\n        });\r\n      }\r\n    });\r\n  };\r\n  setRatingObject = (rating) => {\r\n    this.setState({ rating });\r\n    // console.log(this.state.rating);\r\n  };\r\n  handleClose = () => {\r\n    this.setState({ show: false });\r\n  };\r\n  submitConfirmed = () => {\r\n    let answer = window.confirm(\r\n      \"Are you sure you want to submit this project? (Note : If submitted, project cannot be modified)\"\r\n    );\r\n    if (answer) {\r\n      this.setState({ show: true });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (this.state.redirect) {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n    const { show, team } = this.state;\r\n    // console.log(team);\r\n    if (team === undefined) return null;\r\n\r\n    return (\r\n      <>\r\n        {show ? (\r\n          <Modal\r\n            show={show}\r\n            onHide={this.handleClose}\r\n            backdrop=\"static\"\r\n            keyboard={false}\r\n          >\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>\r\n                Lets Give your amazing team some Feedback!\r\n              </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body scrollable=\"true\">\r\n              {team.length === 1 ? (\r\n                <>\r\n                  <h1>Oh wait. You've one man armied this? RESPECT! :O </h1>\r\n                  <Button\r\n                    onClick={() => {\r\n                      this.submitproject();\r\n                    }}\r\n                  >\r\n                    Continue...\r\n                  </Button>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <RatingComponent\r\n                    team={team}\r\n                    rating={this.state.rating}\r\n                    // handleValueChange={this.handleValueChange}\r\n                  />\r\n                  <Button\r\n                    onClick={() => {\r\n                      const { rating } = this.state;\r\n                      // console.log(rating);\r\n                      this.submitproject();\r\n                      this.setState({ show: false });\r\n                    }}\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </>\r\n              )}\r\n            </Modal.Body>\r\n          </Modal>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        <div>\r\n          <OverlayTrigger\r\n            key=\"top\"\r\n            placement=\"top\"\r\n            overlay={<Tooltip id=\"top\">Finalize Project</Tooltip>}\r\n          >\r\n            <Button\r\n              onClick={this.submitConfirmed}\r\n              className=\"ml-2\"\r\n              variant=\"success\"\r\n            >\r\n              <PublishTwoToneIcon />\r\n            </Button>\r\n          </OverlayTrigger>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SubmitProject;\r\n","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\utils\\signupbutton\\Personal.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\utils\\signupbutton\\Tagify\\Assigner.js",["310","311","312"],"import React, { useEffect } from \"react\";\nimport Tags from \"@yaireo/tagify/dist/react.tagify\";\nimport \"@yaireo/tagify/dist/tagify.css\";\n// Tagify settings object\nconst baseTagifySettings = {\n  blacklist: [],\n  enforceWhitelist: true,\n  dropdown: {\n    enabled: 0,\n  },\n  callbacks: {},\n};\n\nfunction Assigner({\n  label,\n  name,\n  value,\n  suggestions,\n  assignTo,\n  assignIds,\n  team,\n}) {\n  const handleChange = (e) => {\n    // console.log(e.detail.tagify.value);\n    let arr = [];\n    let ids = [];\n    e.detail.tagify.value.map((val) => {\n      arr.push(val.value);\n      team.map((member) => {\n        // console.log(member.name, val.value);\n        if (member.name === val.value) {\n          ids.push(member._id);\n        }\n      });\n    });\n    assignTo(arr);\n    assignIds(ids);\n  };\n  const settings = {\n    ...baseTagifySettings,\n    whitelist: suggestions,\n    callbacks: {\n      add: handleChange,\n      remove: handleChange,\n      blur: handleChange,\n      edit: handleChange,\n      invalid: handleChange,\n      click: handleChange,\n      focus: handleChange,\n      \"edit:updated\": handleChange,\n      \"edit:start\": handleChange,\n    },\n  };\n  //   console.log(\"words:\");\n  if (suggestions.length === 0) return null;\n  // console.log(initialValue);\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={\"field-\" + name}>{label}</label>\n      <Tags settings={settings} value={value} />\n    </div>\n  );\n}\n\nexport default Assigner;\n","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\user\\Signin.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\utils\\signupbutton\\Tagify\\SkillsInput.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\utils\\signupbutton\\Form.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\Requests.js",["313"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\App.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\store\\reducer.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\utils\\signupbutton\\Tagify\\TagFinal.js",["314","315"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\JoinProject.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\layout\\Task.js",["316"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\index.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\RoleReq.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\utils\\signupbutton\\Social.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\user\\EditProfile.js",["317"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\Chat.js",["318","319","320","321"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\user\\apiUser.js",["322","323","324","325","326","327"],"export const read = (userId, token) => {\r\n  return fetch(\"http://localhost:8081/user/\" + `${userId}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  })\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const update = (userId, token, user) => {\r\n  return fetch(\"http://localhost:8081/user/\" + `${userId}`, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify(user),\r\n  })\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const remove = (userId, token) => {\r\n  return fetch(\"http://localhost:8081/user/\" + `${userId}`, {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  })\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const list = () => {\r\n  return fetch(\"http://localhost:8081/users\", {\r\n    method: \"GET\",\r\n  })\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const getCurrentUser = () => {\r\n  return JSON.parse(localStorage.getItem(\"jwt\")).user;\r\n};\r\n\r\nexport const getUserById = (id) => {\r\n  return fetch(`http://localhost:8081/userInfo/${id}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  })\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const getWords = () => {\r\n  return fetch(\"http://localhost:8081/words\", {\r\n    method: \"GET\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  })\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const setRating = (userId, rating) => {\r\n  let obj = {\r\n    rating,\r\n  };\r\n  let token = JSON.parse(localStorage.getItem(\"jwt\")).token;\r\n  return fetch(`http://localhost:8081/user/rating/${userId}`, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify(obj),\r\n  })\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const followUser = (e, userId) => {\r\n  e.preventDefault();\r\n  let currentUserId = JSON.parse(localStorage.getItem(\"jwt\")).user._id;\r\n  let token = JSON.parse(localStorage.getItem(\"jwt\")).token;\r\n  return fetch(`http://localhost:8081/follow/${currentUserId}`, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: \"Bearer \" + token,\r\n    },\r\n    body: JSON.stringify({\r\n      followId: userId,\r\n    }),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((data) => {\r\n      return data;\r\n    });\r\n};\r\n\r\nexport const unfollowUser = (e, userId) => {\r\n  e.preventDefault();\r\n  console.log(userId);\r\n  let currentUserId = JSON.parse(localStorage.getItem(\"jwt\")).user._id;\r\n  let token = JSON.parse(localStorage.getItem(\"jwt\")).token;\r\n  return fetch(`http://localhost:8081/unfollow/${currentUserId}`, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: \"Bearer \" + token,\r\n    },\r\n    body: JSON.stringify({\r\n      followId: userId,\r\n    }),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((data) => {\r\n      return data;\r\n    });\r\n};\r\n\r\nexport const getfollowers = (userId) => {\r\n  let token = JSON.parse(localStorage.getItem(\"jwt\")).token;\r\n  return fetch(\"http://localhost:8081/followers/\" + `${userId}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  })\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const getfollowing = (userId) => {\r\n  let token = JSON.parse(localStorage.getItem(\"jwt\")).token;\r\n  return fetch(\"http://localhost:8081/following/\" + `${userId}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  })\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const getfriends = (userId) => {\r\n  let token = JSON.parse(localStorage.getItem(\"jwt\")).token;\r\n  return fetch(\"http://localhost:8081/friends/\" + `${userId}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  })\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const updatePersonalChat = (chat) => {\r\n  let token = JSON.parse(localStorage.getItem(\"jwt\")).token;\r\n  let Obj = {\r\n    chat: chat,\r\n  };\r\n  return fetch(\"http://localhost:8081/updatechat\", {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Content-type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify(Obj),\r\n  })\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\utils\\signupbutton\\User.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\RatingComponent.js",["328","329"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\RoleEditView.js",["330","331"],{"ruleId":"332","severity":1,"message":"333","line":3,"column":10,"nodeType":"334","messageId":"335","endLine":3,"endColumn":26},{"ruleId":"332","severity":1,"message":"336","line":6,"column":3,"nodeType":"334","messageId":"335","endLine":6,"endColumn":14},{"ruleId":"332","severity":1,"message":"337","line":7,"column":3,"nodeType":"334","messageId":"335","endLine":7,"endColumn":21},{"ruleId":"332","severity":1,"message":"338","line":8,"column":3,"nodeType":"334","messageId":"335","endLine":8,"endColumn":29},{"ruleId":"332","severity":1,"message":"339","line":10,"column":13,"nodeType":"334","messageId":"335","endLine":10,"endColumn":14},{"ruleId":"332","severity":1,"message":"340","line":13,"column":10,"nodeType":"334","messageId":"335","endLine":13,"endColumn":20},{"ruleId":"332","severity":1,"message":"341","line":15,"column":10,"nodeType":"334","messageId":"335","endLine":15,"endColumn":15},{"ruleId":"332","severity":1,"message":"342","line":15,"column":17,"nodeType":"334","messageId":"335","endLine":15,"endColumn":23},{"ruleId":"332","severity":1,"message":"343","line":16,"column":8,"nodeType":"334","messageId":"335","endLine":16,"endColumn":23},{"ruleId":"344","severity":1,"message":"345","line":36,"column":46,"nodeType":"346","messageId":"347","endLine":36,"endColumn":48},{"ruleId":"332","severity":1,"message":"348","line":46,"column":13,"nodeType":"334","messageId":"335","endLine":46,"endColumn":26},{"ruleId":"349","replacedBy":"350"},{"ruleId":"351","replacedBy":"352"},{"ruleId":"344","severity":1,"message":"353","line":42,"column":34,"nodeType":"346","messageId":"354","endLine":42,"endColumn":36},{"ruleId":"344","severity":1,"message":"353","line":54,"column":34,"nodeType":"346","messageId":"354","endLine":54,"endColumn":36},{"ruleId":"332","severity":1,"message":"355","line":18,"column":3,"nodeType":"334","messageId":"335","endLine":18,"endColumn":7},{"ruleId":"332","severity":1,"message":"356","line":19,"column":3,"nodeType":"334","messageId":"335","endLine":19,"endColumn":12},{"ruleId":"332","severity":1,"message":"357","line":20,"column":3,"nodeType":"334","messageId":"335","endLine":20,"endColumn":16},{"ruleId":"332","severity":1,"message":"358","line":87,"column":9,"nodeType":"334","messageId":"335","endLine":87,"endColumn":16},{"ruleId":"332","severity":1,"message":"359","line":88,"column":13,"nodeType":"334","messageId":"335","endLine":88,"endColumn":22},{"ruleId":"344","severity":1,"message":"353","line":91,"column":30,"nodeType":"346","messageId":"354","endLine":91,"endColumn":32},{"ruleId":"332","severity":1,"message":"360","line":2,"column":7,"nodeType":"334","messageId":"335","endLine":2,"endColumn":13},{"ruleId":"332","severity":1,"message":"361","line":1,"column":17,"nodeType":"334","messageId":"335","endLine":1,"endColumn":26},{"ruleId":"332","severity":1,"message":"362","line":20,"column":9,"nodeType":"334","messageId":"335","endLine":20,"endColumn":17},{"ruleId":"332","severity":1,"message":"363","line":2,"column":10,"nodeType":"334","messageId":"335","endLine":2,"endColumn":19},{"ruleId":"332","severity":1,"message":"355","line":2,"column":21,"nodeType":"334","messageId":"335","endLine":2,"endColumn":25},{"ruleId":"332","severity":1,"message":"342","line":2,"column":27,"nodeType":"334","messageId":"335","endLine":2,"endColumn":33},{"ruleId":"332","severity":1,"message":"364","line":17,"column":20,"nodeType":"334","messageId":"335","endLine":17,"endColumn":35},{"ruleId":"349","replacedBy":"365"},{"ruleId":"351","replacedBy":"366"},{"ruleId":"332","severity":1,"message":"341","line":3,"column":10,"nodeType":"334","messageId":"335","endLine":3,"endColumn":15},{"ruleId":"332","severity":1,"message":"367","line":5,"column":8,"nodeType":"334","messageId":"335","endLine":5,"endColumn":12},{"ruleId":"332","severity":1,"message":"368","line":6,"column":8,"nodeType":"334","messageId":"335","endLine":6,"endColumn":12},{"ruleId":"332","severity":1,"message":"369","line":8,"column":3,"nodeType":"334","messageId":"335","endLine":8,"endColumn":10},{"ruleId":"332","severity":1,"message":"370","line":12,"column":3,"nodeType":"334","messageId":"335","endLine":12,"endColumn":17},{"ruleId":"332","severity":1,"message":"371","line":15,"column":3,"nodeType":"334","messageId":"335","endLine":15,"endColumn":10},{"ruleId":"332","severity":1,"message":"342","line":24,"column":10,"nodeType":"334","messageId":"335","endLine":24,"endColumn":16},{"ruleId":"344","severity":1,"message":"345","line":70,"column":22,"nodeType":"346","messageId":"347","endLine":70,"endColumn":24},{"ruleId":"344","severity":1,"message":"353","line":77,"column":11,"nodeType":"372","messageId":"373","endLine":77,"endColumn":18},{"ruleId":"344","severity":1,"message":"353","line":124,"column":37,"nodeType":"346","messageId":"354","endLine":124,"endColumn":39},{"ruleId":"344","severity":1,"message":"353","line":178,"column":45,"nodeType":"346","messageId":"354","endLine":178,"endColumn":47},{"ruleId":"344","severity":1,"message":"353","line":189,"column":22,"nodeType":"346","messageId":"354","endLine":189,"endColumn":24},{"ruleId":"344","severity":1,"message":"345","line":207,"column":25,"nodeType":"346","messageId":"347","endLine":207,"endColumn":27},{"ruleId":"344","severity":1,"message":"353","line":212,"column":9,"nodeType":"372","messageId":"373","endLine":212,"endColumn":16},{"ruleId":"344","severity":1,"message":"353","line":213,"column":47,"nodeType":"346","messageId":"354","endLine":213,"endColumn":49},{"ruleId":"344","severity":1,"message":"345","line":248,"column":48,"nodeType":"346","messageId":"347","endLine":248,"endColumn":50},{"ruleId":"344","severity":1,"message":"353","line":310,"column":24,"nodeType":"346","messageId":"354","endLine":310,"endColumn":26},{"ruleId":"344","severity":1,"message":"353","line":313,"column":27,"nodeType":"346","messageId":"354","endLine":313,"endColumn":29},{"ruleId":"374","severity":1,"message":"375","line":315,"column":31,"nodeType":"376","messageId":"377","endLine":315,"endColumn":47},{"ruleId":"332","severity":1,"message":"378","line":340,"column":15,"nodeType":"334","messageId":"335","endLine":340,"endColumn":18},{"ruleId":"332","severity":1,"message":"378","line":361,"column":15,"nodeType":"334","messageId":"335","endLine":361,"endColumn":18},{"ruleId":"344","severity":1,"message":"353","line":389,"column":31,"nodeType":"346","messageId":"354","endLine":389,"endColumn":33},{"ruleId":"344","severity":1,"message":"353","line":436,"column":24,"nodeType":"346","messageId":"354","endLine":436,"endColumn":26},{"ruleId":"344","severity":1,"message":"353","line":440,"column":27,"nodeType":"346","messageId":"354","endLine":440,"endColumn":29},{"ruleId":"374","severity":1,"message":"375","line":442,"column":31,"nodeType":"376","messageId":"377","endLine":442,"endColumn":47},{"ruleId":"332","severity":1,"message":"378","line":467,"column":15,"nodeType":"334","messageId":"335","endLine":467,"endColumn":18},{"ruleId":"332","severity":1,"message":"378","line":488,"column":15,"nodeType":"334","messageId":"335","endLine":488,"endColumn":18},{"ruleId":"344","severity":1,"message":"353","line":515,"column":35,"nodeType":"346","messageId":"354","endLine":515,"endColumn":37},{"ruleId":"332","severity":1,"message":"379","line":555,"column":33,"nodeType":"334","messageId":"335","endLine":555,"endColumn":38},{"ruleId":"344","severity":1,"message":"353","line":559,"column":22,"nodeType":"346","messageId":"354","endLine":559,"endColumn":24},{"ruleId":"344","severity":1,"message":"353","line":562,"column":34,"nodeType":"346","messageId":"354","endLine":562,"endColumn":36},{"ruleId":"349","replacedBy":"380"},{"ruleId":"351","replacedBy":"381"},{"ruleId":"349","replacedBy":"382"},{"ruleId":"351","replacedBy":"383"},{"ruleId":"349","replacedBy":"384"},{"ruleId":"351","replacedBy":"385"},{"ruleId":"349","replacedBy":"386"},{"ruleId":"351","replacedBy":"387"},{"ruleId":"332","severity":1,"message":"388","line":21,"column":26,"nodeType":"334","messageId":"335","endLine":21,"endColumn":31},{"ruleId":"332","severity":1,"message":"389","line":5,"column":8,"nodeType":"334","messageId":"335","endLine":5,"endColumn":19},{"ruleId":"390","severity":1,"message":"391","line":93,"column":65,"nodeType":"392","messageId":"393","endLine":93,"endColumn":67},{"ruleId":"344","severity":1,"message":"345","line":77,"column":34,"nodeType":"346","messageId":"347","endLine":77,"endColumn":36},{"ruleId":"344","severity":1,"message":"345","line":93,"column":36,"nodeType":"346","messageId":"347","endLine":93,"endColumn":38},{"ruleId":"344","severity":1,"message":"353","line":122,"column":13,"nodeType":"372","messageId":"373","endLine":122,"endColumn":20},{"ruleId":"344","severity":1,"message":"345","line":125,"column":36,"nodeType":"346","messageId":"347","endLine":125,"endColumn":38},{"ruleId":"344","severity":1,"message":"345","line":139,"column":36,"nodeType":"346","messageId":"347","endLine":139,"endColumn":38},{"ruleId":"344","severity":1,"message":"345","line":153,"column":36,"nodeType":"346","messageId":"347","endLine":153,"endColumn":38},{"ruleId":"332","severity":1,"message":"394","line":1,"column":10,"nodeType":"334","messageId":"335","endLine":1,"endColumn":26},{"ruleId":"395","severity":1,"message":"396","line":4,"column":1,"nodeType":"397","endLine":9,"endColumn":2},{"ruleId":"349","replacedBy":"398"},{"ruleId":"351","replacedBy":"399"},{"ruleId":"400","severity":1,"message":"401","line":203,"column":56,"nodeType":"392","messageId":"402","endLine":203,"endColumn":57},{"ruleId":"400","severity":1,"message":"401","line":218,"column":56,"nodeType":"392","messageId":"402","endLine":218,"endColumn":57},{"ruleId":"403","severity":1,"message":"404","line":42,"column":13,"nodeType":"346","endLine":54,"endColumn":4},{"ruleId":"403","severity":1,"message":"405","line":54,"column":6,"nodeType":"406","endLine":54,"endColumn":8,"suggestions":"407"},{"ruleId":"408","severity":1,"message":"409","line":83,"column":25,"nodeType":"410","messageId":"411","endLine":83,"endColumn":26,"fix":"412"},{"ruleId":"403","severity":1,"message":"413","line":88,"column":5,"nodeType":"406","endLine":88,"endColumn":7,"suggestions":"414"},{"ruleId":"408","severity":1,"message":"409","line":104,"column":25,"nodeType":"410","messageId":"411","endLine":104,"endColumn":26,"fix":"415"},{"ruleId":"403","severity":1,"message":"416","line":110,"column":6,"nodeType":"406","endLine":110,"endColumn":12,"suggestions":"417"},{"ruleId":"418","severity":1,"message":"419","line":231,"column":31,"nodeType":"420","endLine":231,"endColumn":85},{"ruleId":"349","replacedBy":"421"},{"ruleId":"351","replacedBy":"422"},{"ruleId":"332","severity":1,"message":"423","line":9,"column":9,"nodeType":"334","messageId":"335","endLine":9,"endColumn":19},{"ruleId":"344","severity":1,"message":"353","line":31,"column":32,"nodeType":"346","messageId":"354","endLine":31,"endColumn":34},{"ruleId":"349","replacedBy":"424"},{"ruleId":"351","replacedBy":"425"},{"ruleId":"332","severity":1,"message":"426","line":109,"column":38,"nodeType":"334","messageId":"335","endLine":109,"endColumn":44},{"ruleId":"332","severity":1,"message":"333","line":2,"column":27,"nodeType":"334","messageId":"335","endLine":2,"endColumn":43},{"ruleId":"344","severity":1,"message":"353","line":18,"column":37,"nodeType":"346","messageId":"354","endLine":18,"endColumn":39},{"ruleId":"332","severity":1,"message":"427","line":37,"column":24,"nodeType":"334","messageId":"335","endLine":37,"endColumn":35},{"ruleId":"332","severity":1,"message":"428","line":117,"column":31,"nodeType":"334","messageId":"335","endLine":117,"endColumn":37},{"ruleId":"332","severity":1,"message":"361","line":1,"column":17,"nodeType":"334","messageId":"335","endLine":1,"endColumn":26},{"ruleId":"344","severity":1,"message":"353","line":27,"column":37,"nodeType":"346","messageId":"354","endLine":27,"endColumn":39},{"ruleId":"344","severity":1,"message":"353","line":29,"column":25,"nodeType":"346","messageId":"354","endLine":29,"endColumn":27},{"ruleId":"332","severity":1,"message":"429","line":20,"column":11,"nodeType":"334","messageId":"335","endLine":20,"endColumn":14},{"ruleId":"332","severity":1,"message":"361","line":1,"column":17,"nodeType":"334","messageId":"335","endLine":1,"endColumn":26},{"ruleId":"344","severity":1,"message":"353","line":18,"column":37,"nodeType":"346","messageId":"354","endLine":18,"endColumn":39},{"ruleId":"344","severity":1,"message":"345","line":8,"column":42,"nodeType":"346","messageId":"347","endLine":8,"endColumn":44},{"ruleId":"344","severity":1,"message":"353","line":39,"column":33,"nodeType":"346","messageId":"354","endLine":39,"endColumn":35},{"ruleId":"332","severity":1,"message":"430","line":10,"column":10,"nodeType":"334","messageId":"335","endLine":10,"endColumn":14},{"ruleId":"403","severity":1,"message":"431","line":44,"column":6,"nodeType":"406","endLine":44,"endColumn":8,"suggestions":"432"},{"ruleId":"403","severity":1,"message":"433","line":64,"column":6,"nodeType":"406","endLine":64,"endColumn":12,"suggestions":"434"},{"ruleId":"403","severity":1,"message":"435","line":186,"column":6,"nodeType":"406","endLine":186,"endColumn":12,"suggestions":"436"},{"ruleId":"400","severity":1,"message":"401","line":2,"column":46,"nodeType":"392","messageId":"402","endLine":2,"endColumn":47},{"ruleId":"400","severity":1,"message":"401","line":17,"column":46,"nodeType":"392","messageId":"402","endLine":17,"endColumn":47},{"ruleId":"400","severity":1,"message":"401","line":33,"column":46,"nodeType":"392","messageId":"402","endLine":33,"endColumn":47},{"ruleId":"400","severity":1,"message":"401","line":154,"column":51,"nodeType":"392","messageId":"402","endLine":154,"endColumn":52},{"ruleId":"400","severity":1,"message":"401","line":170,"column":51,"nodeType":"392","messageId":"402","endLine":170,"endColumn":52},{"ruleId":"400","severity":1,"message":"401","line":186,"column":49,"nodeType":"392","messageId":"402","endLine":186,"endColumn":50},{"ruleId":"332","severity":1,"message":"342","line":2,"column":10,"nodeType":"334","messageId":"335","endLine":2,"endColumn":16},{"ruleId":"344","severity":1,"message":"353","line":15,"column":23,"nodeType":"346","messageId":"354","endLine":15,"endColumn":25},{"ruleId":"332","severity":1,"message":"437","line":76,"column":9,"nodeType":"334","messageId":"335","endLine":76,"endColumn":17},{"ruleId":"332","severity":1,"message":"423","line":77,"column":9,"nodeType":"334","messageId":"335","endLine":77,"endColumn":19},"no-unused-vars","'getNotifications' is defined but never used.","Identifier","unusedVar","'getNotified' is defined but never used.","'clearNotifications' is defined but never used.","'setSegregatedNotifications' is defined but never used.","'_' is defined but never used.","'getProject' is defined but never used.","'Modal' is defined but never used.","'Button' is defined but never used.","'RatingComponent' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'notifications' is assigned a value but never used.","no-native-reassign",["438"],"no-negated-in-lhs",["439"],"Array.prototype.map() expects a return value from arrow function.","expectedInside","'Card' is defined but never used.","'ListGroup' is defined but never used.","'ListGroupItem' is defined but never used.","'overdue' is assigned a value but never used.","'following' is assigned a value but never used.","'userId' is assigned a value but never used.","'useEffect' is defined but never used.","'dispatch' is assigned a value but never used.","'Accordion' is defined but never used.","'setCriticalPath' is defined but never used.",["438"],["439"],"'Pert' is defined but never used.","'Task' is defined but never used.","'addEdge' is defined but never used.","'removeElements' is defined but never used.","'addTask' is defined but never used.","ReturnStatement","expectedReturnValue","no-self-assign","'task.description' is assigned to itself.","MemberExpression","selfAssignment","'ele' is assigned a value but never used.","'tasks' is assigned a value but never used.",["438"],["439"],["438"],["439"],["438"],["439"],["438"],["439"],"'toast' is defined but never used.","'JoinProject' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'devToolsEnhancer' is defined but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration",["438"],["439"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["440"],"rest-spread-spacing","Unexpected whitespace after spread operator.","SpreadElement","unexpectedWhitespace",{"range":"441","text":"442"},"React Hook useEffect has missing dependencies: 'chat' and 'user._id'. Either include them or remove the dependency array.",["443"],{"range":"444","text":"442"},"React Hook useEffect has a missing dependency: 'user._id'. Either include it or remove the dependency array.",["445"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["438"],["439"],"'roleSkills' is assigned a value but never used.",["438"],["439"],"'skills' is assigned a value but never used.","'projectTeam' is assigned a value but never used.","'rating' is assigned a value but never used.","'url' is assigned a value but never used.","'read' is defined but never used.","React Hook useEffect has missing dependencies: 'chat.length' and 'project_id'. Either include them or remove the dependency array.",["446"],"React Hook useEffect has a missing dependency: 'project_id'. Either include it or remove the dependency array.",["447"],"React Hook useLayoutEffect has a missing dependency: 'stayScrolled'. Either include it or remove the dependency array.",["448"],"'roleName' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"449","fix":"450"},[2565,2566],"",{"desc":"451","fix":"452"},[3235,3236],{"desc":"451","fix":"453"},{"desc":"454","fix":"455"},{"desc":"456","fix":"457"},{"desc":"458","fix":"459"},"Update the dependencies array to be: [dispatch]",{"range":"460","text":"461"},"Update the dependencies array to be: [chat, user._id]",{"range":"462","text":"463"},{"range":"464","text":"463"},"Update the dependencies array to be: [chat.length, project_id]",{"range":"465","text":"466"},"Update the dependencies array to be: [chat, project_id]",{"range":"467","text":"468"},"Update the dependencies array to be: [chat, stayScrolled]",{"range":"469","text":"470"},[1721,1723],"[dispatch]",[2701,2703],"[chat, user._id]",[3422,3428],[1365,1367],"[chat.length, project_id]",[1946,1952],"[chat, project_id]",[6018,6024],"[chat, stayScrolled]"]