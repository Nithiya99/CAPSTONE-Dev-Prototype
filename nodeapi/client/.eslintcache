[{"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\core\\Notifications.js":"1","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\user\\Profile.js":"2","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\utils\\signupbutton\\Tagify\\SkillsInput.js":"3","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\layout\\LayoutComponent.js":"4","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\reportWebVitals.js":"5","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\ProjectDashboard.js":"6","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\DeleteProject.js":"7","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\newProjectForm\\RoleCreate.js":"8","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\layout\\Pert.js":"9","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\user\\Users.js":"10","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\store\\cpm.js":"11","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\Emoji.js":"12","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\utils\\signupbutton\\Tagify\\Assigner.js":"13","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\EditProject.js":"14","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\apiNotifications.js":"15","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\AssignedTo.js":"16","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\taskComponents\\EditModel.js":"17","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\Chat.js":"18","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\user\\apiUser.js":"19","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\MainRouter.js":"20","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\App.js":"21","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\apiProject.js":"22"},{"size":5413,"mtime":1619881457204,"results":"23","hashOfConfig":"24"},{"size":15125,"mtime":1618982214086,"results":"25","hashOfConfig":"24"},{"size":499,"mtime":1618198716000,"results":"26","hashOfConfig":"24"},{"size":21050,"mtime":1619573672552,"results":"27","hashOfConfig":"24"},{"size":362,"mtime":1618198716000,"results":"28","hashOfConfig":"24"},{"size":12848,"mtime":1619573693911,"results":"29","hashOfConfig":"24"},{"size":1412,"mtime":1618198716000,"results":"30","hashOfConfig":"24"},{"size":1826,"mtime":1618198716000,"results":"31","hashOfConfig":"24"},{"size":4968,"mtime":1618198716000,"results":"32","hashOfConfig":"24"},{"size":4565,"mtime":1618982321535,"results":"33","hashOfConfig":"24"},{"size":2159,"mtime":1619281971708,"results":"34","hashOfConfig":"24"},{"size":2120,"mtime":1618319544804,"results":"35","hashOfConfig":"24"},{"size":1452,"mtime":1618198716000,"results":"36","hashOfConfig":"24"},{"size":5907,"mtime":1619336138172,"results":"37","hashOfConfig":"24"},{"size":903,"mtime":1619794611221,"results":"38","hashOfConfig":"24"},{"size":598,"mtime":1618198716000,"results":"39","hashOfConfig":"24"},{"size":4003,"mtime":1618827213209,"results":"40","hashOfConfig":"24"},{"size":6958,"mtime":1619929054630,"results":"41","hashOfConfig":"24"},{"size":5744,"mtime":1619929165346,"results":"42","hashOfConfig":"24"},{"size":2135,"mtime":1619929522278,"results":"43","hashOfConfig":"24"},{"size":647,"mtime":1618272945740,"results":"44","hashOfConfig":"24"},{"size":15217,"mtime":1618826709693,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"13vq143",{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"51"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\core\\Notifications.js",["96","97","98","99"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\user\\Profile.js",["100","101"],"import React, { Component } from \"react\";\r\nimport { isAuthenticated } from \"../auth\";\r\nimport { Redirect, Link } from \"react-router-dom\";\r\nimport {\r\n  read,\r\n  getCurrentUser,\r\n  followUser,\r\n  unfollowUser,\r\n  getUserById,\r\n} from \"./apiUser\";\r\nimport DefaultProfile from \"../images/avatar.png\";\r\nimport DeleteUser from \"./DeleteUser\";\r\nimport { Row, Tab, Col, Nav } from \"react-bootstrap\";\r\nimport PersonTwoToneIcon from \"@material-ui/icons/PersonTwoTone\";\r\nimport ChatTwoToneIcon from \"@material-ui/icons/ChatTwoTone\";\r\nimport AccountTreeTwoToneIcon from \"@material-ui/icons/AccountTreeTwoTone\";\r\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\";\r\nimport PersonAddDisabledIcon from \"@material-ui/icons/PersonAddDisabled\";\r\nimport DonutChart from \"react-donut-chart\";\r\nimport { listmyprojects } from \"./../project/apiProject\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateFollowing } from \"../store/user\";\r\nclass Profile extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      user: \"\",\r\n      redirectToSignin: false,\r\n    };\r\n  }\r\n\r\n  init = (userId) => {\r\n    const token = isAuthenticated().token;\r\n    read(userId, token).then((data) => {\r\n      if (data.error) {\r\n        this.setState({ redirectToSignin: true });\r\n      } else {\r\n        this.setState({ user: data });\r\n      }\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    const userId = this.props.match.params.userId;\r\n    this.init(userId);\r\n    listmyprojects().then((projects) => {\r\n      this.setState({ projects: projects.userProjects });\r\n    });\r\n    // const { following } = this.props;\r\n    // console.log(1);\r\n    getUserById(getCurrentUser()._id).then((data) => {\r\n      this.props.updateFollowing({\r\n        following: data.user.following,\r\n      });\r\n    });\r\n  }\r\n  // this.setState({ projects });\r\n\r\n  componentWillReceiveProps(props) {\r\n    const userId = props.match.params.userId;\r\n    this.init(userId);\r\n  }\r\n  render() {\r\n    const { redirectToSignin, user } = this.state;\r\n    if (user.skills === undefined) return null;\r\n    if (redirectToSignin) return <Redirect to=\"/signin\" />;\r\n    let projects = this.state.projects;\r\n    let ongoing = 0;\r\n    let completed = 0;\r\n    let overdue = 0;\r\n    const { following } = this.props;\r\n    console.log(following);\r\n    if (projects !== undefined) {\r\n      projects.map((project) => {\r\n        if (project.status === \"Completed\") completed++;\r\n        if (project.status === \"In Progress\") ongoing++;\r\n      });\r\n    }\r\n    return (\r\n      <div className=\"container mt-5\">\r\n        <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"personalInfo\">\r\n          <Row>\r\n            <Col sm={3}>\r\n              <div className=\"card card-custom card-stretch\">\r\n                <div className=\"card-body pt-4\">\r\n                  <div className=\"d-flex align-items-center\">\r\n                    <img\r\n                      src={DefaultProfile}\r\n                      alt={user.name}\r\n                      className=\"symbol symbol-60 symbol-xxl-100 mr-3 align-self-start align-self-xxl-center\"\r\n                      style={{ width: \"55px\" }}\r\n                    />\r\n                    <div>\r\n                      <h5 className=\"font-weight-bolder text-dark-75 text-hover-primary\">\r\n                        {user.name}\r\n                      </h5>\r\n                      <div className=\"text-muted\">@{user.username}</div>\r\n                      {isAuthenticated().user &&\r\n                      isAuthenticated().user._id === user._id ? (\r\n                        <div className=\"mt-2\">\r\n                          <Link\r\n                            className=\"btn btn-sm btn-primary mr-2 py-2 px-3 px-xxl-5 my-1\"\r\n                            to={`/user/edit/${user._id}`}\r\n                          >\r\n                            Edit Profile\r\n                          </Link>\r\n                          <DeleteUser userId={user._id} />\r\n                        </div>\r\n                      ) : (\r\n                        <div className=\"mt-2\">\r\n                          {user._id !== getCurrentUser()._id ? (\r\n                            user.followers.indexOf(getCurrentUser()._id) >\r\n                            -1 ? (\r\n                              <button\r\n                                className=\"btn btn-raised btn-primary\"\r\n                                onClick={(e) =>\r\n                                  unfollowUser(e, user._id).then((data) =>\r\n                                    this.props.updateFollowing({\r\n                                      following: data.user.following,\r\n                                    })\r\n                                  )\r\n                                }\r\n                              >\r\n                                UnFollow <PersonAddDisabledIcon />\r\n                              </button>\r\n                            ) : (\r\n                              <button\r\n                                className=\"btn btn-raised btn-primary\"\r\n                                onClick={(e) =>\r\n                                  followUser(e, user._id).then((data) =>\r\n                                    this.props.updateFollowing({\r\n                                      following: data.user.following,\r\n                                    })\r\n                                  )\r\n                                }\r\n                              >\r\n                                Follow <PersonAddIcon />\r\n                              </button>\r\n                            )\r\n                          ) : (\r\n                            <div></div>\r\n                          )}\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\" pt-3\">\r\n                    <div className=\"d-flex align-items-center justify-content-between mb-2\">\r\n                      <span className=\"font-weight-bold mr-2\">Email: </span>\r\n                      <span className=\"text-muted email-wrap text-hover-primary\">\r\n                        {user.email}\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"d-flex align-items-center justify-content-between mb-2\">\r\n                      <span className=\"font-weight-bold mr-2\">Location: </span>\r\n                      <span className=\"text-muted text-hover-primary\">\r\n                        {user.location}\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"d-flex align-items-center justify-content-between mb-2\">\r\n                      <span className=\"font-weight-bold mr-2\">Joined: </span>\r\n                      <span className=\"text-muted text-hover-primary\">\r\n                        {` ${new Date(user.created).toDateString()}`}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <Nav variant=\"pills\" className=\"flex-column mt-3\">\r\n                    <Nav.Item>\r\n                      <Nav.Link eventKey=\"personalInfo\">\r\n                        <div className=\"d-flex align-items-center\">\r\n                          <div className=\"mr-3\">\r\n                            <PersonTwoToneIcon />\r\n                          </div>\r\n                          <div>Personal Information</div>\r\n                        </div>\r\n                      </Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                      <Nav.Link eventKey=\"socialInfo\">\r\n                        <div className=\"d-flex align-items-center\">\r\n                          <div className=\"mr-3\">\r\n                            <ChatTwoToneIcon />\r\n                          </div>\r\n                          <div>Social Information</div>\r\n                        </div>\r\n                      </Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                      <Nav.Link eventKey=\"projInfo\">\r\n                        <div className=\"d-flex align-items-center\">\r\n                          <div className=\"mr-3\">\r\n                            <AccountTreeTwoToneIcon />\r\n                          </div>\r\n                          <div>Project Stats</div>\r\n                        </div>\r\n                      </Nav.Link>\r\n                    </Nav.Item>\r\n                  </Nav>\r\n                </div>\r\n              </div>\r\n            </Col>\r\n            <Col sm={9}>\r\n              <Tab.Content>\r\n                <Tab.Pane eventKey=\"personalInfo\">\r\n                  <div className=\"card card-stretch\">\r\n                    <div className=\"card-header\">\r\n                      <div className=\"card-title align-items-start flex-column\">\r\n                        <h4 className=\"card-label font-weight-bolder text-dark\">\r\n                          Personal Information\r\n                        </h4>\r\n                        <span className=\"text-muted font-weight-bold font-size-sm mt-1\">\r\n                          Update your personal information.\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                      <table className=\"table table-borderless\">\r\n                        <tbody>\r\n                          <tr>\r\n                            <th>Name</th>\r\n                            <td>{user.name}</td>\r\n                          </tr>\r\n                          <tr>\r\n                            <th>Email</th>\r\n                            <td>{user.email}</td>\r\n                          </tr>\r\n                          <tr>\r\n                            <th>Bio</th>\r\n                            <td>{user.bio}</td>\r\n                          </tr>\r\n                          <tr>\r\n                            <th>Skills</th>\r\n                            <td>{user.skills.join(\" \")}</td>\r\n                          </tr>\r\n                          <tr>\r\n                            <th>Date of Birth</th>\r\n                            <td>{` ${new Date(user.dob).toDateString()}`}</td>\r\n                          </tr>\r\n                        </tbody>\r\n                      </table>\r\n                    </div>\r\n                  </div>\r\n                </Tab.Pane>\r\n                <Tab.Pane eventKey=\"socialInfo\">\r\n                  <div className=\"card card-stretch\">\r\n                    <div className=\"card-header\">\r\n                      <div className=\"card-title align-items-start flex-column\">\r\n                        <h4 className=\"card-label font-weight-bolder text-dark\">\r\n                          Social Information\r\n                        </h4>\r\n                        <span className=\"text-muted font-weight-bold font-size-sm mt-1\">\r\n                          Update your personal information.\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                      <table className=\"table table-borderless\">\r\n                        <tbody>\r\n                          <tr>\r\n                            <th>Website</th>\r\n                            <td>\r\n                              {user.social.website\r\n                                ? user.social.website\r\n                                : \"Not available\"}\r\n                            </td>\r\n                          </tr>\r\n                          <tr>\r\n                            <th>Instagram</th>\r\n                            <td>\r\n                              {user.social.instagram\r\n                                ? user.social.instagram\r\n                                : \"Not available\"}\r\n                            </td>\r\n                          </tr>\r\n                          <tr>\r\n                            <th>Facebook</th>\r\n                            <td>\r\n                              {user.social.facebook\r\n                                ? user.social.facebook\r\n                                : \"Not available\"}\r\n                            </td>\r\n                          </tr>\r\n                          <tr>\r\n                            <th>Linkedin</th>\r\n                            <td>\r\n                              {user.social.linkedin\r\n                                ? user.social.linkedin\r\n                                : \"Not available\"}\r\n                            </td>\r\n                          </tr>\r\n                          <tr>\r\n                            <th>Twitter</th>\r\n                            <td>\r\n                              {user.social.twitter\r\n                                ? user.social.twitter\r\n                                : \"Not available\"}\r\n                            </td>\r\n                          </tr>\r\n                          <tr>\r\n                            <th>Youtube</th>\r\n                            <td>\r\n                              {user.social.youtube\r\n                                ? user.social.youtube\r\n                                : \"Not available\"}\r\n                            </td>\r\n                          </tr>\r\n                        </tbody>\r\n                      </table>\r\n                    </div>\r\n                  </div>\r\n                </Tab.Pane>\r\n                <Tab.Pane eventKey=\"projInfo\">\r\n                  <div className=\"card card-stretch\">\r\n                    <div className=\"card-header\">\r\n                      <div className=\"card-title align-items-start flex-column\">\r\n                        <h4 className=\"card-label font-weight-bolder text-dark\">\r\n                          Project Stats\r\n                        </h4>\r\n                        <span className=\"text-muted font-weight-bold font-size-sm mt-1\">\r\n                          Statistics of your projects\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                      <table className=\"table table-borderless\">\r\n                        <DonutChart\r\n                          data={[\r\n                            {\r\n                              label: \"Ongoing Projects\",\r\n                              value: ongoing,\r\n                            },\r\n                            {\r\n                              label: \"Overdue Projects\",\r\n                              value: 1,\r\n                            },\r\n                            {\r\n                              label: \"Completed Projects\",\r\n                              value: completed,\r\n                            },\r\n                          ]}\r\n                          innerRadius=\"0.6\"\r\n                        />\r\n                      </table>\r\n                    </div>\r\n                  </div>\r\n                </Tab.Pane>\r\n              </Tab.Content>\r\n            </Col>\r\n          </Row>\r\n        </Tab.Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  following: state.user.following,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  updateFollowing: (params) => dispatch(updateFollowing(params)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\r\n",["102","103"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\utils\\signupbutton\\Tagify\\SkillsInput.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\layout\\LayoutComponent.js",["104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134"],"import React, { Component } from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport Pert from \"./Pert\";\r\nimport Task from \"./Task\";\r\nimport ReactFlow, {\r\n  addEdge,\r\n  Background,\r\n  Controls,\r\n  MiniMap,\r\n  removeElements,\r\n} from \"react-flow-renderer\";\r\nimport {\r\n  addTask,\r\n  getTasks,\r\n  putConnections,\r\n  deleteConnections,\r\n  getConnections,\r\n  putPredecessors,\r\n  putPosition,\r\n} from \"../apiProject\";\r\nimport jsPERT from \"js-pert\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport {\r\n  nodeAdded,\r\n  connectionAdded,\r\n  replaceNodes,\r\n  replaceConnections,\r\n  replaceElements,\r\n  setPert,\r\n  setExpectedTime,\r\n  setSlacks,\r\n  setCriticalPath,\r\n} from \"../../store/cpm\";\r\nimport { updateTasks } from \"../../store/tasks\";\r\nimport { getCurrentUser } from \"./../../user/apiUser\";\r\nconst styles = (theme) => ({\r\n  modal: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  paper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 3, 3),\r\n  },\r\n});\r\nclass LayoutComponent extends Component {\r\n  state = {\r\n    elements: [],\r\n    tasks: [],\r\n    nodes: [],\r\n    pert: {},\r\n    task: {},\r\n    show: false,\r\n    checked: false,\r\n    bleh: 1,\r\n  };\r\n\r\n  onElementsRemove = (elementsToRemove) => {\r\n    if (this.props.project.leader.toString() === getCurrentUser()._id) {\r\n      let cons = this.props.connections;\r\n      const filteredConnections = cons.filter(\r\n        (con) => con.id !== elementsToRemove[0].id\r\n      );\r\n      this.props.replaceConnections({ connections: filteredConnections });\r\n      cons.map((con) => {\r\n        if (con.id === elementsToRemove[0].id) {\r\n          // console.log(con.id, elementsToRemove[0].id);\r\n          deleteConnections(this.props.project._id, con._id).then((data) => {\r\n            console.log(\"connection deleted\");\r\n            // this.pertCalc();\r\n          });\r\n          return;\r\n        }\r\n      });\r\n    }\r\n  };\r\n  onLoad = (reactFlowInstance) => {\r\n    reactFlowInstance.fitView();\r\n  };\r\n  onNodeDragStop = (e, node) => {\r\n    // console.log(node.position, node.data._id);\r\n    putPosition(this.props.project._id, node.data._id, node.position).then(\r\n      () => {\r\n        console.log(node.position + \" is saved\");\r\n      }\r\n    );\r\n  };\r\n  edgeInElements(elements, edge) {\r\n    let inside = false;\r\n    elements.map((elem) => {\r\n      if (elem.id.toString() === edge.id.toString()) {\r\n        inside = true;\r\n      }\r\n      return \"done\";\r\n    });\r\n    return inside;\r\n  }\r\n  onConnect = (params) => {\r\n    if (this.props.project.leader.toString() === getCurrentUser()._id) {\r\n      let source = params.source;\r\n      let target = params.target;\r\n      if (source !== undefined && target !== undefined) {\r\n        let edge = {\r\n          id:\r\n            \"reactflow__edge-\" +\r\n            source.toString() +\r\n            \"null-\" +\r\n            target.toString() +\r\n            \"null\",\r\n          source: source.toString(),\r\n          sourceHandle: null,\r\n          target: target.toString(),\r\n          targetHandle: null,\r\n        };\r\n        // console.log(this.state.elements);\r\n        let sourceId = \"\";\r\n        let targetId = \"\";\r\n        // console.log(this.props.nodes);\r\n        this.props.nodes.map((elem) => {\r\n          if (elem.id === source) {\r\n            sourceId = elem.key;\r\n          }\r\n          if (elem.id === target) {\r\n            targetId = elem.key;\r\n          }\r\n        });\r\n        putPredecessors(this.props.project._id, targetId, sourceId).then(() => {\r\n          console.log(sourceId + \" has new Predecessor \" + targetId);\r\n        });\r\n        // let ele = [...this.state.elements];\r\n        // if (!this.edgeInElements(ele, edge)) {\r\n        //   ele.push(edge);\r\n        putConnections(this.props.project._id, sourceId, targetId).then(() => {\r\n          console.log(\"connection \" + sourceId + \"to \" + targetId + \"added\");\r\n        });\r\n        // }\r\n        this.props.connectionAdded({ connection: edge });\r\n        // this.setState({ elements: ele });\r\n        // console.log(this.state.elements);\r\n        this.pertCalc();\r\n      }\r\n    }\r\n  };\r\n  getIdOfObjectId = (elemId) => {\r\n    let id = {};\r\n    const { nodes } = this.props;\r\n    id = nodes.map((elem) => {\r\n      if (elem.data !== undefined)\r\n        if (elem.data._id.toString() === elemId) {\r\n          id = elem.id;\r\n        }\r\n      return id;\r\n    });\r\n    return id[id.length - 1];\r\n  };\r\n  // handleClose = () => {\r\n  //   this.setState({ show: false });\r\n  // };\r\n  pertCalc = () => {\r\n    // this.setState({ show: true });\r\n    // console.log(\"inside pertCalc:\", tasksObject);\r\n    let nodes = this.props.nodes.map((elem) => ({\r\n      ...elem,\r\n    }));\r\n    // let connections = this.props.connections.map((elem) => ({\r\n    //   ...elem,\r\n    // }));\r\n    // console.log(connections);\r\n    // let { connections } = this.props;\r\n    // console.log(\"props:\", this.props.connections);\r\n    // console.log(\"connections:\");\r\n    let ids = [];\r\n    this.props.connections.map((connection) => {\r\n      // console.log(connection.source, connection.target);\r\n      if (!ids.includes(connection.source)) {\r\n        ids.push(connection.source.toString());\r\n      }\r\n      if (!ids.includes(connection.target)) {\r\n        ids.push(connection.target.toString());\r\n      }\r\n    });\r\n    // console.log(\"nodes:\");\r\n    let newNodes = [];\r\n    nodes.map((node) => {\r\n      if (ids.includes(node.id)) newNodes.push(node);\r\n    });\r\n\r\n    let tasksObject = ids.includes(\"1\")\r\n      ? {\r\n          1: {\r\n            id: \"1\",\r\n            mostLikelyTime: 0,\r\n            optimisticTime: 0,\r\n            pessimisticTime: 0,\r\n            predecessors: [],\r\n          },\r\n        }\r\n      : {};\r\n    // console.log(\"TasksObject before node addition:\", tasksObject);\r\n    // console.log(ids);\r\n    // console.log(\"nodes sent for pertcalc:\", newNodes);\r\n    newNodes.map((elem) => {\r\n      if (\r\n        elem.data.predecessors.length === 0 ||\r\n        elem.data.predecessors === undefined\r\n      )\r\n        return;\r\n      elem.data.predecessors.map((pre, index) => {\r\n        let id = this.getIdOfObjectId(pre.toString());\r\n        // console.log(id);\r\n        let predecessors = [...elem.data.predecessors];\r\n        predecessors[index] = id.toString();\r\n        elem.data = { ...elem.data, predecessors };\r\n      });\r\n    });\r\n    // console.log(nodes);\r\n    tasksObject = newNodes.map((elem) => {\r\n      // console.log(\"tasksObject node:\", elem);\r\n      tasksObject[elem.id.toString()] = {\r\n        id: elem.id.toString(),\r\n        optimisticTime: elem.data.optimistic,\r\n        mostLikelyTime: elem.data.time,\r\n        pessimisticTime: elem.data.pessimistic,\r\n        predecessors: elem.data.predecessors,\r\n      };\r\n      return tasksObject;\r\n    });\r\n    let tasksObjectFinal = tasksObject[tasksObject.length - 1];\r\n    console.log(\"TasksObject:\");\r\n    console.log(tasksObjectFinal);\r\n    console.log(\"Pert:\");\r\n    let pert = {};\r\n    // console.log(\"gonna set pert\");\r\n    try {\r\n      // if (tasksObject[1] !== undefined) {\r\n      // console.log(tasksObject[1]);\r\n      pert = jsPERT(tasksObjectFinal);\r\n      this.props.setPert({ pert });\r\n      console.log(this.props.pert);\r\n      // this.props.setSlacks({ slackObject: this.props.pert.slack });\r\n      // console.log(\"slacks:\");\r\n      let slackObject = {};\r\n      slackObject = newNodes.map((elem, index) => {\r\n        // console.log(elem.id, pert.slack[elem.id]);\r\n        if (index !== 0 && index !== 1) {\r\n          // console.log(\"Slack elem:\", elem);\r\n          let created = elem.data.created;\r\n          let today = new Date();\r\n          let day1 = new Date(today.toUTCString());\r\n          let day2 = new Date(created);\r\n          let difference = Math.abs(day2 - day1);\r\n          let days = parseInt(difference / (1000 * 3600 * 24));\r\n          // console.log(elem.data.label + \" \" + days + \" \" + pert.slack[elem.id]);\r\n          slackObject[elem.data.label] = {\r\n            slack: pert.slack[elem.id],\r\n            days,\r\n            overdue: pert.slack[elem.id] < days ? true : false,\r\n          };\r\n          return slackObject;\r\n        }\r\n      });\r\n      console.log(\"slacks Object:\", slackObject[slackObject.length - 1]);\r\n      let obj = slackObject[slackObject.length - 1];\r\n      this.props.setSlacks({ slackObject: obj });\r\n      let newNodesObject = {};\r\n      newNodesObject = newNodes.map((node) => {\r\n        newNodesObject[node.id] = node.data;\r\n        return newNodesObject;\r\n      });\r\n      newNodesObject = newNodesObject[newNodesObject.length - 1];\r\n      // console.log(\"newNodesObject:\", newNodesObject);\r\n      let criticalPathData = {};\r\n      criticalPathData = pert.criticalPath.map((id) => {\r\n        criticalPathData[id] = newNodesObject[id];\r\n        return criticalPathData;\r\n      });\r\n      criticalPathData = criticalPathData[criticalPathData.length - 1];\r\n      console.log(\"criticalPathDataObject:\", criticalPathData);\r\n      this.props.setCriticalPath({ criticalPath: criticalPathData });\r\n\r\n      this.props.setExpectedTime({\r\n        expectedTime: Math.floor(this.props.pert.latestFinishTimes.__end),\r\n      });\r\n      // }\r\n    } catch (err) {\r\n      // console.log(err);\r\n      this.props.setPert({ pert: {} });\r\n      // console.log(this.props.pert);\r\n      this.props.setExpectedTime({\r\n        expectedTime: 0,\r\n      });\r\n    }\r\n    // this.setState({ pert });\r\n  };\r\n  onElementClick = (event, element) => {\r\n    console.log(element);\r\n  };\r\n  componentDidMount() {\r\n    let newNodes = [];\r\n\r\n    getTasks(this.props.project._id).then((data) => {\r\n      // console.log(data.tasks);\r\n      const tasks = data.tasks;\r\n      let newTasks = [];\r\n      tasks.map((task) => {\r\n        newTasks.push({ ...task });\r\n      });\r\n      newTasks.map((task) => {\r\n        task[\"label\"] = task.taskName;\r\n        task[\"description\"] = task.description;\r\n        task[\"time\"] = task.mostLikelyTime;\r\n        task[\"optimistic\"] = task.optimisticTime;\r\n        task[\"pessimistic\"] = task.pessimisticTime;\r\n        if (\r\n          task.taskName !== \"Completed!!\" &&\r\n          task.taskName !== \"Lets Start Working\"\r\n        ) {\r\n          let newNode = {\r\n            key: task._id,\r\n            id: (newNodes.length + 1).toString(),\r\n            data: task,\r\n            sourcePosition: \"right\",\r\n            targetPosition: \"left\",\r\n            position:\r\n              task.position !== undefined\r\n                ? task.position\r\n                : {\r\n                    x: (Math.random() * window.innerWidth) / 2,\r\n                    y: (Math.random() * window.innerHeight) / 2,\r\n                  },\r\n          };\r\n          newNodes.push(newNode);\r\n        }\r\n        if (task.taskName === \"Lets Start Working\") {\r\n          let ele = [...this.state.elements];\r\n          let newNode = {\r\n            key: task._id,\r\n            id: \"1\",\r\n            type: \"input\",\r\n            data: {\r\n              label: \"Lets Start Working\",\r\n              description: \"Start working on tasks to complete project on time\",\r\n              pessimistic: 0,\r\n              time: 0,\r\n              optimistic: 0,\r\n              predecessors: [],\r\n              _id: task._id,\r\n            },\r\n            sourcePosition: \"right\",\r\n            position:\r\n              task.position !== undefined ? task.position : { x: 0, y: 0 },\r\n          };\r\n          newNodes.push(newNode);\r\n        }\r\n        if (task.taskName === \"Completed!!\") {\r\n          let ele = [...this.state.elements];\r\n          let newNode = {\r\n            key: task._id,\r\n            id: \"2\",\r\n            type: \"output\",\r\n            data: {\r\n              label: \"Completed!!\",\r\n              description: \"Yaaayy you gus have completed the project\",\r\n              pessimistic: 0,\r\n              time: 0,\r\n              optimistic: 0,\r\n              predecessors: task.predecessors,\r\n              _id: task._id,\r\n            },\r\n            targetPosition: \"left\",\r\n            position:\r\n              task.position !== undefined ? task.position : { x: 500, y: 0 },\r\n          };\r\n          newNodes.push(newNode);\r\n        }\r\n      });\r\n      this.props.replaceNodes({ nodes: newNodes });\r\n      // console.log(\"Mount nodes:\", this.props.nodes);\r\n    });\r\n    getConnections(this.props.project._id)\r\n      .then((data) => {\r\n        let connections = [];\r\n        data.connections.map((link) => {\r\n          newNodes.map((elem) => {\r\n            if (elem.key !== undefined) {\r\n              if (link.from.toString() === elem.key.toString()) {\r\n                this.setState({ source: elem });\r\n              }\r\n              if (link.to.toString() === elem.key.toString()) {\r\n                this.setState({ target: elem });\r\n              }\r\n            }\r\n          });\r\n          let source = this.state.source;\r\n          let target = this.state.target;\r\n          if (source !== undefined && target !== undefined) {\r\n            let edge = {\r\n              id:\r\n                \"reactflow__edge-\" +\r\n                source.id.toString() +\r\n                \"null-\" +\r\n                target.id.toString() +\r\n                \"null\",\r\n              source: source.id.toString(),\r\n              sourceHandle: null,\r\n              target: target.id.toString(),\r\n              targetHandle: null,\r\n              _id: link._id,\r\n            };\r\n            connections.push(edge);\r\n          }\r\n          return \"done\";\r\n        });\r\n        // console.log(connections);\r\n        this.props.replaceConnections({ connections: connections });\r\n      })\r\n      .then(() => {\r\n        this.pertCalc();\r\n      });\r\n  }\r\n  componentDidUpdate(prevState, prevProps) {\r\n    if (this.props.connections.length !== prevState.connections.length) {\r\n      this.pertCalc();\r\n      // console.log(prevState.connections.length, this.props.connections.length);\r\n      // console.log(\"Pert from comp update:\", this.props.pert);\r\n      // console.log(\"Pert calculation nodes:\", this.props.nodes);\r\n    }\r\n    if (prevState.tasks.length !== this.props.tasks.length) {\r\n      const { tasks } = this.props;\r\n      let newTasks = [];\r\n      tasks.map((task) => {\r\n        newTasks.push({ ...task });\r\n      });\r\n      let newNodes = [];\r\n      newTasks.map((task) => {\r\n        task[\"label\"] = task.taskName;\r\n        task[\"description\"] = task.description;\r\n        task[\"time\"] = task.mostLikelyTime;\r\n        task[\"optimistic\"] = task.optimisticTime;\r\n        task[\"pessimistic\"] = task.pessimisticTime;\r\n        if (\r\n          task.taskName !== \"Completed!!\" &&\r\n          task.taskName !== \"Lets Start Working\"\r\n        ) {\r\n          let newNode = {\r\n            key: task._id,\r\n            id: (newNodes.length + 1).toString(),\r\n            data: task,\r\n            sourcePosition: \"right\",\r\n            targetPosition: \"left\",\r\n            position:\r\n              task.position !== undefined\r\n                ? task.position\r\n                : {\r\n                    x: (Math.random() * window.innerWidth) / 2,\r\n                    y: (Math.random() * window.innerHeight) / 2,\r\n                  },\r\n          };\r\n          newNodes.push(newNode);\r\n        }\r\n        if (task.taskName === \"Lets Start Working\") {\r\n          let ele = [...this.state.elements];\r\n          let newNode = {\r\n            key: task._id,\r\n            id: \"1\",\r\n            type: \"input\",\r\n            data: {\r\n              label: \"Lets Start Working\",\r\n              description: \"Start working on tasks to complete project on time\",\r\n              pessimistic: 0,\r\n              time: 0,\r\n              optimistic: 0,\r\n              predecessors: [],\r\n              _id: task._id,\r\n            },\r\n            sourcePosition: \"right\",\r\n            position:\r\n              task.position !== undefined ? task.position : { x: 0, y: 0 },\r\n          };\r\n          newNodes.push(newNode);\r\n        }\r\n        if (task.taskName === \"Completed!!\") {\r\n          let ele = [...this.state.elements];\r\n          let newNode = {\r\n            key: task._id,\r\n            id: \"2\",\r\n            type: \"output\",\r\n            data: {\r\n              label: \"Completed!!\",\r\n              description: \"Yaaayy you gus have completed the project\",\r\n              pessimistic: 0,\r\n              time: 0,\r\n              optimistic: 0,\r\n              predecessors: task.predecessors,\r\n              _id: task._id,\r\n            },\r\n            targetPosition: \"left\",\r\n            position:\r\n              task.position !== undefined ? task.position : { x: 500, y: 0 },\r\n          };\r\n          newNodes.push(newNode);\r\n        }\r\n      });\r\n      this.props.replaceNodes({ nodes: newNodes });\r\n      if (this.props.connections.length === 0) {\r\n        getConnections(this.props.project._id)\r\n          .then((data) => {\r\n            let connections = [];\r\n            data.connections.map((link) => {\r\n              newNodes.map((elem) => {\r\n                if (elem.key !== undefined) {\r\n                  if (link.from.toString() === elem.key.toString()) {\r\n                    this.setState({ source: elem });\r\n                  }\r\n                  if (link.to.toString() === elem.key.toString()) {\r\n                    this.setState({ target: elem });\r\n                  }\r\n                }\r\n              });\r\n              let source = this.state.source;\r\n              let target = this.state.target;\r\n              let edge = {\r\n                id:\r\n                  \"reactflow__edge-\" +\r\n                  source.id.toString() +\r\n                  \"null-\" +\r\n                  target.id.toString() +\r\n                  \"null\",\r\n                source: source.id.toString(),\r\n                sourceHandle: null,\r\n                target: target.id.toString(),\r\n                targetHandle: null,\r\n                _id: link._id,\r\n              };\r\n              connections.push(edge);\r\n\r\n              return \"done\";\r\n            });\r\n            // console.log(connections);\r\n            this.props.replaceConnections({ connections: connections });\r\n          })\r\n          .then(() => {\r\n            this.pertCalc();\r\n          });\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    if (this.props.tasks.length === 0) return <div>No tasks</div>;\r\n    const { nodes, connections, tasks } = this.props;\r\n    const { status } = this.props.project;\r\n    let connectCheck = status === \"Completed\" ? false : true;\r\n    const elements = [];\r\n    nodes.map((node) => {\r\n      elements.push({ ...node });\r\n    });\r\n    connections.map((connection) => {\r\n      elements.push({ ...connection });\r\n    });\r\n    // console.log(\"nodes:\", nodes);\r\n    return (\r\n      <div>\r\n        <div className=\"container-fluid\">\r\n          <ReactFlow\r\n            elements={elements}\r\n            onLoad={this.onLoad}\r\n            style={{\r\n              width: \"100%\",\r\n              height: \"65vh\",\r\n              backgroundColor: \"#1A192B\",\r\n            }}\r\n            onNodeDragStop={this.onNodeDragStop}\r\n            onConnect={this.onConnect}\r\n            onElementClick={this.onElementClick}\r\n            onElementsRemove={this.onElementsRemove}\r\n            connectionLineStyle={{ stroke: \"#ddd\", strokeWidth: 2 }}\r\n            connectionLineType=\"bezier\"\r\n            snapToGrid={true}\r\n            snapGrid={[16, 16]}\r\n            nodesConnectable={connectCheck}\r\n            nodesDraggable={connectCheck}\r\n            defaultZoom={1}\r\n          >\r\n            <Background color=\"#888\" gap={16} />\r\n            <MiniMap\r\n              nodeColor={(n) => {\r\n                if (n.type === \"input\") return \"#DC143C\";\r\n                if (n.type === \"output\") return \"#90ee90\";\r\n                return \"cyan\";\r\n              }}\r\n            />\r\n            <Controls />\r\n          </ReactFlow>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  nodes: state.cpm.nodes,\r\n  connections: state.cpm.connections,\r\n  state: state,\r\n  notifications: state.notifications.notifications,\r\n  tasks: state.tasks.tasks,\r\n  elements: state.cpm.elements,\r\n  pert: state.cpm.pert,\r\n  slacks: state.cpm.slacks,\r\n  criticalPath: state.cpm.criticalPath,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  nodeAdded: (params) => dispatch(nodeAdded(params)),\r\n  connectionAdded: (params) => dispatch(connectionAdded(params)),\r\n  updateTasks: (params) => dispatch(updateTasks(params)),\r\n  replaceNodes: (params) => dispatch(replaceNodes(params)),\r\n  replaceConnections: (params) => dispatch(replaceConnections(params)),\r\n  replaceElements: (params) => dispatch(replaceElements(params)),\r\n  setPert: (params) => dispatch(setPert(params)),\r\n  setExpectedTime: (params) => dispatch(setExpectedTime(params)),\r\n  setSlacks: (params) => dispatch(setSlacks(params)),\r\n  setCriticalPath: (params) => dispatch(setCriticalPath(params)),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withStyles(styles)(LayoutComponent));\r\n",["135","136"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\reportWebVitals.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\ProjectDashboard.js",["137","138","139","140"],"import React, { Component } from \"react\";\r\nimport { Accordion, Card, Button, Row, Tab, Col, Nav } from \"react-bootstrap\";\r\nimport AddTask from \"./taskComponents/AddTask\";\r\nimport LayoutComponent from \"./layout/LayoutComponent\";\r\nimport TrelloTask from \"./taskComponents/TrelloTask\";\r\nimport GroupTwoToneIcon from \"@material-ui/icons/GroupTwoTone\";\r\nimport AccountTreeTwoToneIcon from \"@material-ui/icons/AccountTreeTwoTone\";\r\nimport TuneTwoToneIcon from \"@material-ui/icons/TuneTwoTone\";\r\nimport PlaylistAddTwoToneIcon from \"@material-ui/icons/PlaylistAddTwoTone\";\r\nimport ListAltTwoToneIcon from \"@material-ui/icons/ListAltTwoTone\";\r\nimport ChatIcon from \"@material-ui/icons/Chat\";\r\nimport { getCurrentUser } from \"../user/apiUser\";\r\nimport Chat from \"./Chat\";\r\nimport { getTasks } from \"./apiProject\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateTasks } from \"../store/tasks\";\r\nimport { clearAll, setCriticalPath } from \"../store/cpm\";\r\n\r\nclass ProjectDashboard extends Component {\r\n  state = {\r\n    expectedTime: {},\r\n  };\r\n  componentDidMount() {\r\n    this.props.clearAll();\r\n    const { project } = this.props.location.state;\r\n    getTasks(project._id).then((val) => {\r\n      this.props.updateTasks({\r\n        tasks: val.tasks,\r\n      });\r\n    });\r\n  }\r\n  // componentDidUpdate(prevState) {\r\n  //   if (prevState.connections.length !== this.props.connections.length) {\r\n  //     // if (this.props.pert.latestFinishTimes !== undefined)\r\n  //     //   console.log(\"end time:\", this.props.pert.latestFinishTimes.__end);\r\n  //     const expectedTime =\r\n  //       this.props.pert.latestFinishTimes !== undefined\r\n  //         ? Math.floor(this.props.pert.latestFinishTimes.__end)\r\n  //         : \"Not set yet\";\r\n  //     this.setState({ expectedTime });\r\n  //     this.props.setExpectedTime({ expectedTime });\r\n  //   }\r\n  //   // console.log(prevState);\r\n  // }\r\n  renderSlacks(slacks) {\r\n    return Object.keys(slacks).map((key) => (\r\n      <div>\r\n        Label: {key} | slack: {slacks[key].slack} | days: {slacks[key].days} |\r\n        Overdue:\r\n        {slacks[key].overdue ? <>Overdue</> : <>On schedule</>}\r\n      </div>\r\n    ));\r\n  }\r\n  renderCriticalPath(criticalPathArr, criticalPathObject) {\r\n    // console.log(\"criticalPathArr:\", criticalPathArr);\r\n    // console.log(\"criticalPathObject:\", criticalPathObject);\r\n    return criticalPathArr.map((node, index) => (\r\n      <>\r\n        {/* {index !== 1 && index !== 2 ?*/}\r\n        {index !== criticalPathArr.length - 1\r\n          ? criticalPathObject[node].label.toString() + \" , \"\r\n          : criticalPathObject[node].label.toString() + \" .\"}\r\n        {/* : \"\"} */}\r\n      </>\r\n    ));\r\n  }\r\n  render() {\r\n    if (this.props.location.state.project === undefined) {\r\n      return null;\r\n    }\r\n    const { project } = this.props.location.state;\r\n    // console.log(this.props.location);\r\n    let today = new Date();\r\n    let day1 = new Date(today.toUTCString());\r\n    let day2 = new Date(project.created);\r\n    let difference = Math.abs(day2 - day1);\r\n    let days = parseInt(difference / (1000 * 3600 * 24));\r\n    // console.log(days);\r\n    const { expectedTime, slacks, criticalPath, pert } = this.props;\r\n    // console.log(slacks);\r\n    // if (slacks === undefined) return ;\r\n    if (expectedTime === undefined) return null;\r\n    return (\r\n      <div className=\"pt-5\">\r\n        <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"projStats\">\r\n          <Row>\r\n            <Col sm={2}>\r\n              <div className=\"card card-custom card-stretch\">\r\n                <div className=\"card-body pt-4\">\r\n                  <h5 className=\"font-weight-bolder text-dark-75 text-hover-primary\">\r\n                    {project.title}\r\n                  </h5>\r\n                  <div className=\"text-muted\">{project.description}</div>\r\n                  <Nav variant=\"pills\" className=\"flex-column mt-3\">\r\n                    <Nav.Item>\r\n                      <Nav.Link eventKey=\"teamInfo\">\r\n                        <div className=\"d-flex align-items-center\">\r\n                          <div className=\"mr-3\">\r\n                            <GroupTwoToneIcon />\r\n                          </div>\r\n                          <div>Team Information</div>\r\n                        </div>\r\n                      </Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                      <Nav.Link eventKey=\"projStats\">\r\n                        <div className=\"d-flex align-items-center\">\r\n                          <div className=\"mr-3\">\r\n                            <TuneTwoToneIcon />\r\n                          </div>\r\n                          <div>Project Stats</div>\r\n                        </div>\r\n                      </Nav.Link>\r\n                    </Nav.Item>\r\n                    {project.status !== \"Completed\" &&\r\n                    getCurrentUser()._id === project.leader ? (\r\n                      <Nav.Item>\r\n                        <Nav.Link eventKey=\"addTask\">\r\n                          <div className=\"d-flex align-items-center\">\r\n                            <div className=\"mr-3\">\r\n                              <PlaylistAddTwoToneIcon />\r\n                            </div>\r\n                            <div>Add Task</div>\r\n                          </div>\r\n                        </Nav.Link>\r\n                      </Nav.Item>\r\n                    ) : (\r\n                      <div> </div>\r\n                    )}\r\n                    <Nav.Item>\r\n                      <Nav.Link eventKey=\"netDiagram\">\r\n                        <div className=\"d-flex align-items-center\">\r\n                          <div className=\"mr-3\">\r\n                            <AccountTreeTwoToneIcon />\r\n                          </div>\r\n                          <div>Network Diagram</div>\r\n                        </div>\r\n                      </Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                      <Nav.Link eventKey=\"allTasks\">\r\n                        <div className=\"d-flex align-items-center\">\r\n                          <div className=\"mr-3\">\r\n                            <ListAltTwoToneIcon />\r\n                          </div>\r\n                          <div>All Tasks</div>\r\n                        </div>\r\n                      </Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                      <Nav.Link eventKey=\"Chat\">\r\n                        <div className=\"d-flex align-items-center\">\r\n                          <div className=\"mr-3\">\r\n                            <ChatIcon />\r\n                          </div>\r\n                          <div>Group Chat</div>\r\n                        </div>\r\n                      </Nav.Link>\r\n                    </Nav.Item>\r\n                  </Nav>\r\n                </div>\r\n              </div>\r\n            </Col>\r\n            <Col sm={10}>\r\n              <Tab.Content>\r\n                <Tab.Pane eventKey=\"projStats\">\r\n                  <div className=\"card card-stretch\">\r\n                    <div className=\"card-header\">\r\n                      <div className=\"card-title align-items-start flex-column\">\r\n                        <h4 className=\"card-label font-weight-bolder text-dark\">\r\n                          Project Stats\r\n                        </h4>\r\n                        <span className=\"text-muted font-weight-bold font-size-sm mt-1\">\r\n                          Analysis of the tasks and time required displayed\r\n                          here.\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                      <h4>No. of days:</h4>\r\n                      <span>{days}</span>\r\n                      <h4>Estimated date:</h4>\r\n                      <span>{expectedTime}</span>\r\n                      {slacks !== undefined ? (\r\n                        <>\r\n                          <h4>Tasks that can be slacked On:</h4>\r\n                          <div>{this.renderSlacks(slacks)}</div>\r\n                        </>\r\n                      ) : (\r\n                        <></>\r\n                      )}\r\n                      <div>\r\n                        <div>\r\n                          <h4>Critical Path:</h4>\r\n                        </div>\r\n                        <div>\r\n                          {pert.criticalPath !== undefined &&\r\n                          criticalPath !== undefined ? (\r\n                            this.renderCriticalPath(\r\n                              pert.criticalPath,\r\n                              criticalPath\r\n                            )\r\n                          ) : (\r\n                            <></>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </Tab.Pane>\r\n                <Tab.Pane eventKey=\"netDiagram\">\r\n                  <div className=\"card card-stretch\">\r\n                    <div className=\"card-header\">\r\n                      <div className=\"card-title align-items-start flex-column\">\r\n                        <h4 className=\"card-label font-weight-bolder text-dark\">\r\n                          Network Diagram\r\n                        </h4>\r\n                        <span className=\"text-muted font-weight-bold font-size-sm mt-1\">\r\n                          Task dependency diagram.\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                      <LayoutComponent project={project} />\r\n                    </div>\r\n                  </div>\r\n                </Tab.Pane>\r\n                <Tab.Pane eventKey=\"allTasks\">\r\n                  <div className=\"card card-stretch\">\r\n                    <div className=\"card-header\">\r\n                      <div className=\"card-title align-items-start flex-column\">\r\n                        <h4 className=\"card-label font-weight-bolder text-dark\">\r\n                          Tasks Board\r\n                        </h4>\r\n                        <span className=\"text-muted font-weight-bold font-size-sm mt-1\">\r\n                          Complete allocated tasks.\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                      <TrelloTask\r\n                        projectId={project._id}\r\n                        status={project.status}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </Tab.Pane>\r\n                <Tab.Pane eventKey=\"addTask\">\r\n                  <div className=\"card card-stretch\">\r\n                    <div className=\"card-header\">\r\n                      <div className=\"card-title align-items-start flex-column\">\r\n                        <h4 className=\"card-label font-weight-bolder text-dark\">\r\n                          Create Task\r\n                        </h4>\r\n                        <span className=\"text-muted font-weight-bold font-size-sm mt-1\">\r\n                          Add Tasks and allocate to memebers.\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                      <AddTask projectId={project._id} />\r\n                    </div>\r\n                  </div>\r\n                </Tab.Pane>\r\n                <Tab.Pane eventKey=\"Chat\">\r\n                  <div className=\"card card-stretch\">\r\n                    <div className=\"card-header\">\r\n                      <div className=\"card-title align-items-start flex-column\">\r\n                        <h4 className=\"card-label font-weight-bolder text-dark\">\r\n                          Group Chat\r\n                        </h4>\r\n                        <span className=\"text-muted font-weight-bold font-size-sm mt-1\">\r\n                          Interact with your Project-mates.\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                      <Chat projectId={project._id} status={project.status} />\r\n                    </div>\r\n                  </div>\r\n                </Tab.Pane>\r\n              </Tab.Content>\r\n            </Col>\r\n          </Row>\r\n        </Tab.Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  tasks: state.tasks.tasks,\r\n  pert: state.cpm.pert,\r\n  connections: state.cpm.connections,\r\n  expectedTime: state.cpm.expectedTime,\r\n  slacks: state.cpm.slacks,\r\n  criticalPath: state.cpm.criticalPath,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  updateTasks: (params) => dispatch(updateTasks(params)),\r\n  clearAll: () => dispatch(clearAll()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectDashboard);\r\n","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\DeleteProject.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\newProjectForm\\RoleCreate.js",["141"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\layout\\Pert.js",["142","143","144","145","146","147"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\user\\Users.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\store\\cpm.js",["148","149","150"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\Emoji.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\utils\\signupbutton\\Tagify\\Assigner.js",["151","152","153"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\EditProject.js",["154"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\apiNotifications.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\AssignedTo.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\taskComponents\\EditModel.js",["155"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\Chat.js",["156","157","158","159"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\user\\apiUser.js",["160","161","162","163","164","165"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\MainRouter.js",["166","167"],"import React, { useEffect } from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Home from \"./core/Home\";\r\nimport Menu from \"./core/Menu\";\r\nimport Profile from \"./user/Profile\";\r\nimport Users from \"./user/Users\";\r\nimport EditProfile from \"./user/EditProfile\";\r\nimport \"./styles.css\";\r\n// import NavBar from \"./core/NavBar\";\r\nimport CreateProject from \"./project/newProjectForm/CreateProject\";\r\nimport JoinProject from \"./project/JoinProject\";\r\nimport MyProjects from \"./project/MyProjects\";\r\nimport ProjectDashboard from \"./project/ProjectDashboard\";\r\nimport EditProject from \"./project/EditProject\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Notifications from \"./core/Notifications\";\r\n// import MyChats from \"./user/MyChats\";\r\n\r\nconst MainRouter = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"col\">\r\n            <Menu />\r\n          </div>\r\n          <div className=\"col-md-11\">\r\n            <Switch>\r\n              <Route path=\"/home\" component={Home}></Route>\r\n              <Route path=\"/users\" component={Users}></Route>\r\n              <Route path=\"/createproject\" component={CreateProject}></Route>\r\n              <Route path=\"/joinproject\" component={JoinProject}></Route>\r\n              <Route exact path=\"/myprojects\" component={MyProjects}></Route>\r\n              <Route\r\n                path=\"/myprojects/dashboard/:projectId\"\r\n                component={ProjectDashboard}\r\n              ></Route>\r\n              <Route\r\n                path=\"/myprojects/edit/:projectId\"\r\n                component={EditProject}\r\n              ></Route>\r\n              <Route path=\"/notifs/:userId\" component={Notifications}></Route>\r\n              {/* <Route path=\"/mychats/:userId\" component={MyChats}></Route> */}\r\n              <Route path=\"/user/edit/:userId\" component={EditProfile}></Route>\r\n              <Route path=\"/user/:userId\" component={Profile}></Route>\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainRouter;\r\n","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\App.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\nodeapi\\client\\src\\project\\apiProject.js",["168","169"],{"ruleId":"170","severity":1,"message":"171","line":5,"column":10,"nodeType":"172","messageId":"173","endLine":5,"endColumn":16},{"ruleId":"170","severity":1,"message":"174","line":6,"column":7,"nodeType":"172","messageId":"173","endLine":6,"endColumn":15},{"ruleId":"170","severity":1,"message":"175","line":26,"column":11,"nodeType":"172","messageId":"173","endLine":26,"endColumn":24},{"ruleId":"170","severity":1,"message":"176","line":33,"column":11,"nodeType":"172","messageId":"173","endLine":33,"endColumn":19},{"ruleId":"170","severity":1,"message":"177","line":70,"column":9,"nodeType":"172","messageId":"173","endLine":70,"endColumn":16},{"ruleId":"178","severity":1,"message":"179","line":74,"column":30,"nodeType":"180","messageId":"181","endLine":74,"endColumn":32},{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","replacedBy":"185"},{"ruleId":"170","severity":1,"message":"186","line":3,"column":10,"nodeType":"172","messageId":"173","endLine":3,"endColumn":15},{"ruleId":"170","severity":1,"message":"187","line":5,"column":8,"nodeType":"172","messageId":"173","endLine":5,"endColumn":12},{"ruleId":"170","severity":1,"message":"188","line":6,"column":8,"nodeType":"172","messageId":"173","endLine":6,"endColumn":12},{"ruleId":"170","severity":1,"message":"189","line":8,"column":3,"nodeType":"172","messageId":"173","endLine":8,"endColumn":10},{"ruleId":"170","severity":1,"message":"190","line":12,"column":3,"nodeType":"172","messageId":"173","endLine":12,"endColumn":17},{"ruleId":"170","severity":1,"message":"191","line":15,"column":3,"nodeType":"172","messageId":"173","endLine":15,"endColumn":10},{"ruleId":"170","severity":1,"message":"171","line":24,"column":10,"nodeType":"172","messageId":"173","endLine":24,"endColumn":16},{"ruleId":"178","severity":1,"message":"192","line":70,"column":22,"nodeType":"180","messageId":"193","endLine":70,"endColumn":24},{"ruleId":"178","severity":1,"message":"179","line":77,"column":11,"nodeType":"194","messageId":"195","endLine":77,"endColumn":18},{"ruleId":"178","severity":1,"message":"179","line":124,"column":37,"nodeType":"180","messageId":"181","endLine":124,"endColumn":39},{"ruleId":"178","severity":1,"message":"179","line":178,"column":45,"nodeType":"180","messageId":"181","endLine":178,"endColumn":47},{"ruleId":"178","severity":1,"message":"179","line":189,"column":22,"nodeType":"180","messageId":"181","endLine":189,"endColumn":24},{"ruleId":"178","severity":1,"message":"192","line":207,"column":25,"nodeType":"180","messageId":"193","endLine":207,"endColumn":27},{"ruleId":"178","severity":1,"message":"179","line":212,"column":9,"nodeType":"194","messageId":"195","endLine":212,"endColumn":16},{"ruleId":"178","severity":1,"message":"179","line":213,"column":47,"nodeType":"180","messageId":"181","endLine":213,"endColumn":49},{"ruleId":"178","severity":1,"message":"192","line":248,"column":48,"nodeType":"180","messageId":"193","endLine":248,"endColumn":50},{"ruleId":"178","severity":1,"message":"179","line":310,"column":24,"nodeType":"180","messageId":"181","endLine":310,"endColumn":26},{"ruleId":"178","severity":1,"message":"179","line":313,"column":27,"nodeType":"180","messageId":"181","endLine":313,"endColumn":29},{"ruleId":"196","severity":1,"message":"197","line":315,"column":31,"nodeType":"198","messageId":"199","endLine":315,"endColumn":47},{"ruleId":"170","severity":1,"message":"200","line":340,"column":15,"nodeType":"172","messageId":"173","endLine":340,"endColumn":18},{"ruleId":"170","severity":1,"message":"200","line":361,"column":15,"nodeType":"172","messageId":"173","endLine":361,"endColumn":18},{"ruleId":"178","severity":1,"message":"179","line":389,"column":31,"nodeType":"180","messageId":"181","endLine":389,"endColumn":33},{"ruleId":"178","severity":1,"message":"179","line":436,"column":24,"nodeType":"180","messageId":"181","endLine":436,"endColumn":26},{"ruleId":"178","severity":1,"message":"179","line":440,"column":27,"nodeType":"180","messageId":"181","endLine":440,"endColumn":29},{"ruleId":"196","severity":1,"message":"197","line":442,"column":31,"nodeType":"198","messageId":"199","endLine":442,"endColumn":47},{"ruleId":"170","severity":1,"message":"200","line":467,"column":15,"nodeType":"172","messageId":"173","endLine":467,"endColumn":18},{"ruleId":"170","severity":1,"message":"200","line":488,"column":15,"nodeType":"172","messageId":"173","endLine":488,"endColumn":18},{"ruleId":"178","severity":1,"message":"179","line":515,"column":35,"nodeType":"180","messageId":"181","endLine":515,"endColumn":37},{"ruleId":"170","severity":1,"message":"201","line":555,"column":33,"nodeType":"172","messageId":"173","endLine":555,"endColumn":38},{"ruleId":"178","severity":1,"message":"179","line":559,"column":22,"nodeType":"180","messageId":"181","endLine":559,"endColumn":24},{"ruleId":"178","severity":1,"message":"179","line":562,"column":34,"nodeType":"180","messageId":"181","endLine":562,"endColumn":36},{"ruleId":"182","replacedBy":"202"},{"ruleId":"184","replacedBy":"203"},{"ruleId":"170","severity":1,"message":"204","line":2,"column":10,"nodeType":"172","messageId":"173","endLine":2,"endColumn":19},{"ruleId":"170","severity":1,"message":"205","line":2,"column":21,"nodeType":"172","messageId":"173","endLine":2,"endColumn":25},{"ruleId":"170","severity":1,"message":"171","line":2,"column":27,"nodeType":"172","messageId":"173","endLine":2,"endColumn":33},{"ruleId":"170","severity":1,"message":"206","line":17,"column":20,"nodeType":"172","messageId":"173","endLine":17,"endColumn":35},{"ruleId":"170","severity":1,"message":"207","line":9,"column":9,"nodeType":"172","messageId":"173","endLine":9,"endColumn":19},{"ruleId":"178","severity":1,"message":"192","line":77,"column":34,"nodeType":"180","messageId":"193","endLine":77,"endColumn":36},{"ruleId":"178","severity":1,"message":"192","line":93,"column":36,"nodeType":"180","messageId":"193","endLine":93,"endColumn":38},{"ruleId":"178","severity":1,"message":"179","line":122,"column":13,"nodeType":"194","messageId":"195","endLine":122,"endColumn":20},{"ruleId":"178","severity":1,"message":"192","line":125,"column":36,"nodeType":"180","messageId":"193","endLine":125,"endColumn":38},{"ruleId":"178","severity":1,"message":"192","line":139,"column":36,"nodeType":"180","messageId":"193","endLine":139,"endColumn":38},{"ruleId":"178","severity":1,"message":"192","line":153,"column":36,"nodeType":"180","messageId":"193","endLine":153,"endColumn":38},{"ruleId":"170","severity":1,"message":"208","line":2,"column":10,"nodeType":"172","messageId":"173","endLine":2,"endColumn":18},{"ruleId":"170","severity":1,"message":"209","line":4,"column":5,"nodeType":"172","messageId":"173","endLine":4,"endColumn":15},{"ruleId":"170","severity":1,"message":"210","line":5,"column":5,"nodeType":"172","messageId":"173","endLine":5,"endColumn":21},{"ruleId":"170","severity":1,"message":"211","line":1,"column":17,"nodeType":"172","messageId":"173","endLine":1,"endColumn":26},{"ruleId":"178","severity":1,"message":"179","line":27,"column":37,"nodeType":"180","messageId":"181","endLine":27,"endColumn":39},{"ruleId":"178","severity":1,"message":"179","line":29,"column":25,"nodeType":"180","messageId":"181","endLine":29,"endColumn":27},{"ruleId":"178","severity":1,"message":"179","line":34,"column":32,"nodeType":"180","messageId":"181","endLine":34,"endColumn":34},{"ruleId":"178","severity":1,"message":"179","line":31,"column":32,"nodeType":"180","messageId":"181","endLine":31,"endColumn":34},{"ruleId":"170","severity":1,"message":"212","line":10,"column":10,"nodeType":"172","messageId":"173","endLine":10,"endColumn":14},{"ruleId":"213","severity":1,"message":"214","line":44,"column":6,"nodeType":"215","endLine":44,"endColumn":8,"suggestions":"216"},{"ruleId":"213","severity":1,"message":"217","line":64,"column":6,"nodeType":"215","endLine":64,"endColumn":12,"suggestions":"218"},{"ruleId":"213","severity":1,"message":"219","line":186,"column":6,"nodeType":"215","endLine":186,"endColumn":12,"suggestions":"220"},{"ruleId":"221","severity":1,"message":"222","line":2,"column":46,"nodeType":"223","messageId":"224","endLine":2,"endColumn":47},{"ruleId":"221","severity":1,"message":"222","line":17,"column":46,"nodeType":"223","messageId":"224","endLine":17,"endColumn":47},{"ruleId":"221","severity":1,"message":"222","line":33,"column":46,"nodeType":"223","messageId":"224","endLine":33,"endColumn":47},{"ruleId":"221","severity":1,"message":"222","line":154,"column":51,"nodeType":"223","messageId":"224","endLine":154,"endColumn":52},{"ruleId":"221","severity":1,"message":"222","line":170,"column":51,"nodeType":"223","messageId":"224","endLine":170,"endColumn":52},{"ruleId":"221","severity":1,"message":"222","line":186,"column":49,"nodeType":"223","messageId":"224","endLine":186,"endColumn":50},{"ruleId":"170","severity":1,"message":"211","line":1,"column":17,"nodeType":"172","messageId":"173","endLine":1,"endColumn":26},{"ruleId":"170","severity":1,"message":"225","line":20,"column":9,"nodeType":"172","messageId":"173","endLine":20,"endColumn":17},{"ruleId":"221","severity":1,"message":"222","line":203,"column":56,"nodeType":"223","messageId":"224","endLine":203,"endColumn":57},{"ruleId":"221","severity":1,"message":"222","line":218,"column":56,"nodeType":"223","messageId":"224","endLine":218,"endColumn":57},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'BASE_URL' is assigned a value but never used.","'notifications' is assigned a value but never used.","'selected' is assigned a value but never used.","'overdue' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-native-reassign",["226"],"no-negated-in-lhs",["227"],"'Modal' is defined but never used.","'Pert' is defined but never used.","'Task' is defined but never used.","'addEdge' is defined but never used.","'removeElements' is defined but never used.","'addTask' is defined but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","ReturnStatement","expectedReturnValue","no-self-assign","'task.description' is assigned to itself.","MemberExpression","selfAssignment","'ele' is assigned a value but never used.","'tasks' is assigned a value but never used.",["226"],["227"],"'Accordion' is defined but never used.","'Card' is defined but never used.","'setCriticalPath' is defined but never used.","'roleSkills' is assigned a value but never used.","'getTasks' is defined but never used.","'lastNodeId' is assigned a value but never used.","'lastConnectionId' is assigned a value but never used.","'useEffect' is defined but never used.","'read' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'chat.length' and 'project_id'. Either include them or remove the dependency array.","ArrayExpression",["228"],"React Hook useEffect has a missing dependency: 'project_id'. Either include it or remove the dependency array.",["229"],"React Hook useLayoutEffect has a missing dependency: 'stayScrolled'. Either include it or remove the dependency array.",["230"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'dispatch' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"231","fix":"232"},{"desc":"233","fix":"234"},{"desc":"235","fix":"236"},"Update the dependencies array to be: [chat.length, project_id]",{"range":"237","text":"238"},"Update the dependencies array to be: [chat, project_id]",{"range":"239","text":"240"},"Update the dependencies array to be: [chat, stayScrolled]",{"range":"241","text":"242"},[1365,1367],"[chat.length, project_id]",[1946,1952],"[chat, project_id]",[6018,6024],"[chat, stayScrolled]"]