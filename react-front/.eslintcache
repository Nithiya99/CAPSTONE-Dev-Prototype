[{"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\MyProjects.js":"1","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\JoinProject.js":"2","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\user\\DeleteUser.js":"3","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\AssignedTo.js":"4","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\layout\\LayoutComponent.js":"5","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\user\\Users.js":"6","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\apiProject.js":"7","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\reportWebVitals.js":"8","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\auth\\index.js":"9","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\utils\\signupbutton\\Form.js":"10","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\index.js":"11","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\RoleReq.js":"12","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\taskComponents\\MyTask.js":"13","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\utils\\signupbutton\\Tagify\\Assigner.js":"14","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\App.js":"15","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\newProjectForm\\CreateProject.js":"16","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\utils\\signupbutton\\Social.js":"17","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\taskComponents\\EditModel.js":"18","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\MainRouter.js":"19","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\utils\\signupbutton\\Personal.js":"20"},{"size":4386,"mtime":1616223417392,"results":"21","hashOfConfig":"22"},{"size":3190,"mtime":1613901311726,"results":"23","hashOfConfig":"22"},{"size":1187,"mtime":1612699299730,"results":"24","hashOfConfig":"22"},{"size":623,"mtime":1613661674640,"results":"25","hashOfConfig":"22"},{"size":12372,"mtime":1616331626359,"results":"26","hashOfConfig":"22"},{"size":1787,"mtime":1613401462646,"results":"27","hashOfConfig":"22"},{"size":11890,"mtime":1617032102053,"results":"28","hashOfConfig":"22"},{"size":375,"mtime":1612699299728,"results":"29","hashOfConfig":"22"},{"size":1831,"mtime":1613560656150,"results":"30","hashOfConfig":"22"},{"size":4647,"mtime":1613908929146,"results":"31","hashOfConfig":"22"},{"size":438,"mtime":1613901365562,"results":"32","hashOfConfig":"22"},{"size":973,"mtime":1613660287544,"results":"33","hashOfConfig":"22"},{"size":3411,"mtime":1617029897191,"results":"34","hashOfConfig":"22"},{"size":1452,"mtime":1614356658720,"results":"35","hashOfConfig":"22"},{"size":491,"mtime":1616935522062,"results":"36","hashOfConfig":"22"},{"size":5214,"mtime":1616052683320,"results":"37","hashOfConfig":"22"},{"size":3330,"mtime":1612716573225,"results":"38","hashOfConfig":"22"},{"size":2923,"mtime":1617029929391,"results":"39","hashOfConfig":"22"},{"size":1781,"mtime":1614192807485,"results":"40","hashOfConfig":"22"},{"size":2184,"mtime":1613912441081,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1hf05uk",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\MyProjects.js",["86"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\JoinProject.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\user\\DeleteUser.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\AssignedTo.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\layout\\LayoutComponent.js",["87","88","89","90","91","92"],"import React, { Component } from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport ReactFlow, {\r\n  addEdge,\r\n  Background,\r\n  Controls,\r\n  MiniMap,\r\n} from \"react-flow-renderer\";\r\nimport {\r\n  addTask,\r\n  getTasks,\r\n  putConnections,\r\n  getConnections,\r\n  putPredecessors,\r\n  putPosition,\r\n} from \"../apiProject\";\r\nimport jsPERT from \"js-pert\";\r\nimport { Button } from \"@material-ui/core\";\r\nconst styles = (theme) => ({\r\n  modal: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  paper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 3, 3),\r\n  },\r\n});\r\nclass LayoutComponent extends Component {\r\n  state = {\r\n    elements: [],\r\n    tasks: [],\r\n    nodes: [],\r\n  };\r\n  componentDidMount() {\r\n    //get DB tasks\r\n\r\n    getTasks(this.props.project._id)\r\n      .then((data) => {\r\n        if (data.err !== undefined) {\r\n          if (data.err === \"No tasks found\") {\r\n            this.setState({ tasks: [] });\r\n          }\r\n        } else {\r\n          if (data.tasks.length > 0 && data.tasks !== undefined)\r\n            this.setState({ tasks: data.tasks });\r\n        }\r\n      })\r\n      .then(() => {\r\n        if (!this.state.tasks || this.state.tasks[0] === \"\") return null;\r\n        this.state.tasks.map((task) => {\r\n          // label: \"Bleh\",\r\n          // description: \"Bleh max\",\r\n          // time: 2,\r\n          // pessimistic: 3,\r\n          // optimistic: 1,\r\n          // predecessors: [\"1\", \"2\"],\r\n          task[\"label\"] = task.taskName;\r\n          task[\"description\"] = task.description;\r\n          task[\"time\"] = task.mostLikelyTime;\r\n          task[\"optimistic\"] = task.optimisticTime;\r\n          task[\"pessimistic\"] = task.pessimisticTime;\r\n          // console.log(task);\r\n          if (\r\n            task.taskName !== \"Completed!!\" &&\r\n            task.taskName !== \"Lets Start Working\"\r\n          ) {\r\n            let ele = [...this.state.elements];\r\n            // console.log(ele);\r\n            let newNode = {\r\n              key: task._id,\r\n              id: (ele.length + 1).toString(),\r\n              data: task,\r\n              sourcePosition: \"right\",\r\n              targetPosition: \"left\",\r\n              position:\r\n                task.position !== undefined\r\n                  ? task.position\r\n                  : {\r\n                      x: (Math.random() * window.innerWidth) / 2,\r\n                      y: (Math.random() * window.innerHeight) / 2,\r\n                    },\r\n            };\r\n            ele.push(newNode);\r\n            this.setState({ elements: ele });\r\n            let newNodes = [...this.state.nodes];\r\n            newNodes.push(newNode);\r\n            this.setState({ nodes: newNodes });\r\n            // console.log(this.state.elements);\r\n          } else {\r\n            if (task.taskName === \"Lets Start Working\") {\r\n              let ele = [...this.state.elements];\r\n              ele.push({\r\n                key: task._id,\r\n                id: \"1\",\r\n                type: \"input\",\r\n                data: {\r\n                  label: \"Lets Start Working\",\r\n                  description:\r\n                    \"Start working on tasks to complete project on time\",\r\n                  pessimistic: 0,\r\n                  time: 0,\r\n                  optimistic: 0,\r\n                  predecessors: [],\r\n                  _id: task._id,\r\n                },\r\n                sourcePosition: \"right\",\r\n                position:\r\n                  task.position !== undefined ? task.position : { x: 0, y: 0 },\r\n              });\r\n              this.setState({ elements: ele });\r\n            }\r\n            if (task.taskName === \"Completed!!\") {\r\n              let ele = [...this.state.elements];\r\n              let newNode = {\r\n                key: task._id,\r\n                id: \"2\",\r\n                type: \"output\",\r\n                data: {\r\n                  label: \"Completed!!\",\r\n                  description: \"Yaaayy you gus have completed the project\",\r\n                  pessimistic: 0,\r\n                  time: 0,\r\n                  optimistic: 0,\r\n                  predecessors: task.predecessors,\r\n                  _id: task._id,\r\n                },\r\n                targetPosition: \"left\",\r\n                position:\r\n                  task.position !== undefined\r\n                    ? task.position\r\n                    : { x: 500, y: 0 },\r\n              };\r\n              ele.push(newNode);\r\n              this.setState({ elements: ele });\r\n              let newNodes = [...this.state.nodes];\r\n              newNodes.push(newNode);\r\n              this.setState({ nodes: newNodes });\r\n            }\r\n          }\r\n        });\r\n      });\r\n\r\n    //get DB connections\r\n\r\n    getConnections(this.props.project._id).then((data) => {\r\n      data.connections.map(async (link) => {\r\n        // console.log(link);\r\n        let source = {};\r\n        let target = {};\r\n        await this.state.elements.map((elem) => {\r\n          if (elem.key !== undefined) {\r\n            if (link.from.toString() === elem.key.toString()) {\r\n              // console.log(\"from:\");\r\n              source = elem;\r\n            }\r\n            if (link.to.toString() === elem.key.toString()) {\r\n              // console.log(\"to:\");\r\n              target = elem;\r\n            }\r\n          }\r\n          // console.log(elem);\r\n          return \"done\";\r\n        });\r\n        // console.log(source);\r\n        // console.log(target);\r\n        if (source.id !== undefined && target.id !== undefined) {\r\n          let edge = {\r\n            id:\r\n              \"reactflow__edge-\" +\r\n              source.id.toString() +\r\n              \"null-\" +\r\n              target.id.toString() +\r\n              \"null\",\r\n            source: source.id.toString(),\r\n            sourceHandle: null,\r\n            target: target.id.toString(),\r\n            targetHandle: null,\r\n          };\r\n          let ele = [...this.state.elements];\r\n          if (!this.edgeInElements(ele, edge)) {\r\n            ele.push(edge);\r\n            // this.state.elements = ele;\r\n          }\r\n          this.setState({ elements: ele });\r\n          // console.log(this.state.elements);\r\n          return \"done\";\r\n        }\r\n      });\r\n    });\r\n\r\n    // Pert display\r\n    // this.pertCalc();\r\n  }\r\n  onLoad = (reactFlowInstance) => {\r\n    reactFlowInstance.fitView();\r\n  };\r\n  onNodeDragStop = (e, node) => {\r\n    console.log(node.position, node.data._id);\r\n    putPosition(this.props.project._id, node.data._id, node.position).then(\r\n      () => {\r\n        console.log(node.position + \" is saved\");\r\n      }\r\n    );\r\n  };\r\n  edgeInElements(elements, edge) {\r\n    let inside = false;\r\n    elements.map((elem) => {\r\n      if (elem.id.toString() === edge.id.toString()) {\r\n        inside = true;\r\n      }\r\n      return \"done\";\r\n    });\r\n    return inside;\r\n  }\r\n  onConnect = (params) => {\r\n    // postEdges(params);\r\n    // props.connectNodes(parseInt(params.source), parseInt(params.target));\r\n    // console.log(params.source, params.target);\r\n    // props.updateEdges();\r\n    // let predecessorArr = [];\r\n    // await getPredecessors(parseInt(params.target), params.source.toString())\r\n    //   .then((val) => (predecessorArr = val))\r\n    //   .catch((err) => console.log(err));\r\n    let source = params.source;\r\n    let target = params.target;\r\n    if (source !== undefined && target !== undefined) {\r\n      let edge = {\r\n        id:\r\n          \"reactflow__edge-\" +\r\n          source.toString() +\r\n          \"null-\" +\r\n          target.toString() +\r\n          \"null\",\r\n        source: source.toString(),\r\n        sourceHandle: null,\r\n        target: target.toString(),\r\n        targetHandle: null,\r\n      };\r\n      console.log(this.state.elements);\r\n      let sourceId = \"\";\r\n      let targetId = \"\";\r\n      this.state.elements.map((elem) => {\r\n        if (elem.id === source) {\r\n          sourceId = elem.key;\r\n        }\r\n        if (elem.id === target) {\r\n          targetId = elem.key;\r\n        }\r\n      });\r\n      putPredecessors(this.props.project._id, targetId, sourceId).then(() => {\r\n        console.log(sourceId + \" has new Predecessor \" + targetId);\r\n      });\r\n      let ele = [...this.state.elements];\r\n      if (!this.edgeInElements(ele, edge)) {\r\n        ele.push(edge);\r\n        putConnections(this.props.project._id, sourceId, targetId).then(() => {\r\n          console.log(\"connection \" + sourceId + \"to \" + targetId + \"added\");\r\n        });\r\n        // this.state.elements = ele;\r\n      }\r\n      this.setState({ elements: ele });\r\n      console.log(this.state.elements);\r\n    }\r\n  };\r\n  getIdOfObjectId = (elemId) => {\r\n    let id = {};\r\n    // console.log(Number.isInteger(elemId));\r\n    this.state.elements.map((elem) => {\r\n      if (elem.data !== undefined)\r\n        if (elem.data._id.toString() === elemId) {\r\n          // console.log(\"element number:\" + elem.id);\r\n          id = elem.id;\r\n        }\r\n      return id;\r\n    });\r\n    return id;\r\n  };\r\n  pertCalc = () => {\r\n    let tasksObject = {\r\n      1: {\r\n        id: \"1\",\r\n        mostLikelyTime: 0,\r\n        optimisticTime: 0,\r\n        pessimisticTime: 0,\r\n        predecessors: [],\r\n      },\r\n    };\r\n    let nodes = this.state.nodes;\r\n    // console.log();\r\n    tasksObject = nodes.map((elem) => {\r\n      // console.log(elem.data);\r\n      // if (elem.data.predecessors.length === 0 || elem.data.predecessors === undefined) return;\r\n      if (!this.state.checked) {\r\n        elem.data.predecessors.map((predecessor, index) => {\r\n          // console.log(predecessor);\r\n          // let id = this.getIdOfObjectId(predecessor.toString());\r\n          // console.log(id);\r\n          // console.log(elem.data);\r\n          let id = this.getIdOfObjectId(\r\n            elem.data.predecessors[index].toString()\r\n          );\r\n          // console.log(elem.data.predecessors[index] + \" id:\" + id);\r\n          elem.data.predecessors[index] = id;\r\n          this.setState({ checked: true });\r\n          // console.log(elem.data.predecessors[index] + \" id:\" + id);\r\n        });\r\n      }\r\n      tasksObject[elem.id.toString()] = {\r\n        id: elem.id.toString(),\r\n        optimisticTime: elem.data.optimistic,\r\n        mostLikelyTime: elem.data.time,\r\n        pessimisticTime: elem.data.pessimistic,\r\n        predecessors: elem.data.predecessors,\r\n      };\r\n      // console.log(\"Element:\");\r\n      // console.log(elem);\r\n      // console.log(tasksObject);\r\n      // this.getIdOfObjectId(elem.data._id);\r\n      return tasksObject;\r\n    });\r\n\r\n    console.log(\"Pert Object:\");\r\n    console.log(tasksObject[tasksObject.length - 1]);\r\n    console.log(\"Pert:\");\r\n    let pert = jsPERT(tasksObject[tasksObject.length - 1]);\r\n    console.log(pert);\r\n    // axios.put(\"http://localhost:3002/api/pertcalc\", pert);\r\n    // return nodes;\r\n  };\r\n  onElementClick = (event, element) => {\r\n    // console.log(this.state.elements);\r\n    // setSelectedNode(element.data);\r\n    // console.log(element.data);\r\n  };\r\n\r\n  render() {\r\n    if (this.state.tasks === undefined) return null;\r\n    if (this.state.tasks.length === 0) return <div>No tasks</div>;\r\n    return (\r\n      <div>\r\n        <div className=\"container-fluid\">\r\n          <ReactFlow\r\n            elements={this.state.elements}\r\n            onLoad={this.onLoad}\r\n            style={{\r\n              width: \"100%\",\r\n              height: \"95vh\",\r\n              backgroundColor: \"#1A192B\",\r\n            }}\r\n            onNodeDragStop={this.onNodeDragStop}\r\n            onConnect={this.onConnect}\r\n            onElementClick={this.onElementClick}\r\n            connectionLineStyle={{ stroke: \"#ddd\", strokeWidth: 2 }}\r\n            connectionLineType=\"bezier\"\r\n            snapToGrid={true}\r\n            snapGrid={[16, 16]}\r\n          >\r\n            <Background color=\"#888\" gap={16} />\r\n            <MiniMap\r\n              nodeColor={(n) => {\r\n                if (n.type === \"input\") return \"#DC143C\";\r\n                if (n.type === \"output\") return \"#90ee90\";\r\n                return \"cyan\";\r\n              }}\r\n            />\r\n            <Controls />\r\n          </ReactFlow>\r\n          <Button\r\n            onClick={() => {\r\n              this.pertCalc();\r\n            }}\r\n          >\r\n            Pert\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(LayoutComponent);\r\n",["93","94"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\user\\Users.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\apiProject.js",["95"],"export const newProject = (project) => {\r\n  let userId = JSON.parse(localStorage.getItem(\"jwt\")).user._id;\r\n  let token = JSON.parse(localStorage.getItem(\"jwt\")).token;\r\n  let obj = {\r\n    title: project.title,\r\n    description: project.description,\r\n    skills: project.skills,\r\n    roles: project.roleDetails,\r\n  };\r\n  let checkSettings = {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  };\r\n  fetch(\r\n    `http://localhost:8081/project/check/?X=${obj.title}&X1=${obj.description}`,\r\n    checkSettings\r\n  )\r\n    .then((response) => {\r\n      // let val = response.json();\r\n      // console.log(val);\r\n      return response.json();\r\n    })\r\n    .then((val) => {\r\n      console.log(val);\r\n      if (val.message === \"Can be added!\") {\r\n        let settings = {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n          body: JSON.stringify(obj),\r\n        };\r\n        // console.log(settings.body);\r\n        return fetch(`http://localhost:8081/project/new/${userId}`, settings)\r\n          .then((response) => {\r\n            return response.json();\r\n          })\r\n          .catch((err) => console.log(err));\r\n      } else {\r\n        return { error: val.message, similar: val.data };\r\n      }\r\n    });\r\n  // console.log(response.json());\r\n  // return response.json();\r\n};\r\nexport const updateProject = (project, projectId) => {\r\n  let userId = JSON.parse(localStorage.getItem(\"jwt\")).user._id;\r\n  let token = JSON.parse(localStorage.getItem(\"jwt\")).token;\r\n  let obj = {\r\n    title: project.title,\r\n    description: project.description,\r\n    skills: project.skills,\r\n    roles: project.roleDetails,\r\n  };\r\n  let settings = {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify(obj),\r\n  };\r\n  // console.log(settings.body);\r\n  return fetch(\r\n    `http://localhost:8081/project/edit/${userId}/${projectId}`,\r\n    settings\r\n  )\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const request = (user, project, role) => {\r\n  let token = JSON.parse(localStorage.getItem(\"jwt\")).token;\r\n  let obj = {\r\n    roleId: role,\r\n  };\r\n  let requestObj = {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify(obj),\r\n  };\r\n  return fetch(\r\n    `http://localhost:8081/project/request/${user}/${project}`,\r\n    requestObj\r\n  )\r\n    .then((response) => {\r\n      if (response.status === 400) {\r\n        alert(\"Already requested\");\r\n      }\r\n      if (response.status === 200) {\r\n        alert(\" Requested\");\r\n      }\r\n      return response.json();\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\nexport const acceptRequest = (userId, projectId, acceptUserId, roleId) => {\r\n  let token = JSON.parse(localStorage.getItem(\"jwt\")).token;\r\n  let acceptObj = {\r\n    acceptUserId: acceptUserId,\r\n    roleId: roleId,\r\n  };\r\n  let settings = {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify(acceptObj),\r\n  };\r\n  return fetch(\r\n    `http://localhost:8081/requests/accept/${userId}/${projectId}`,\r\n    settings\r\n  )\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\nexport const declineRequest = (userId, projectId, declineUserId, roleId) => {\r\n  let token = JSON.parse(localStorage.getItem(\"jwt\")).token;\r\n  let declineObj = {\r\n    rejectUserId: declineUserId,\r\n    roleId: roleId,\r\n  };\r\n  let settings = {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify(declineObj),\r\n  };\r\n  return fetch(\r\n    `http://localhost:8081/requests/decline/${userId}/${projectId}`,\r\n    settings\r\n  )\r\n    .then((response) => {\r\n      window.location.reload();\r\n      return response.json();\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\nexport const listmyprojects = () => {\r\n  let userId = JSON.parse(localStorage.getItem(\"jwt\")).user._id;\r\n  let token = JSON.parse(localStorage.getItem(\"jwt\")).token;\r\n  let requestObj = {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  };\r\n  return fetch(`http://localhost:8081/projects/user/${userId}`, requestObj)\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\nexport const listprojects = () => {\r\n  return fetch(\"http://localhost:8081/projects\", {\r\n    method: \"GET\",\r\n  })\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const abandon = (projectId, token) => {\r\n  return fetch(\"http://localhost:8081/project/delete/\" + `${projectId}`, {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  })\r\n    .then((response) => {\r\n      console.log(\"done\");\r\n      return response.json();\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\nexport const getTeam = (projectId) => {\r\n  let token = JSON.parse(localStorage.getItem(\"jwt\")).token;\r\n  return fetch(\"http://localhost:8081/project/team/\" + projectId.toString(), {\r\n    method: \"GET\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  })\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\nexport const addTask = (projectId, task) => {\r\n  let userId = JSON.parse(localStorage.getItem(\"jwt\")).user._id;\r\n  let token = JSON.parse(localStorage.getItem(\"jwt\")).token;\r\n  // task_title: \"\",\r\n  //     task_description: \"\",\r\n  //     task_responsible: \"\",\r\n  //     task_completed: false,\r\n  //     task_optimistic: \"\",\r\n  //     task_pessimistic: \"\",\r\n  //     task_mostLikely: \"\",\r\n  let Obj = {\r\n    taskName: task.task_title,\r\n    taskDescription: task.task_description,\r\n    assignedTo: task.task_responsible_ids,\r\n    status: task.task_completed,\r\n    optimisticTime: task.task_optimistic,\r\n    mostLikelyTime: task.task_mostLikely,\r\n    pessimisticTime: task.task_pessimistic,\r\n  };\r\n  let settings = {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify(Obj),\r\n  };\r\n  console.log(settings.body);\r\n  return fetch(\r\n    `http://localhost:8081/project/tasks/${userId}/${projectId}`,\r\n    settings\r\n  )\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const listmytasks = () => {\r\n  let userId = JSON.parse(localStorage.getItem(\"jwt\")).user._id;\r\n  let token = JSON.parse(localStorage.getItem(\"jwt\")).token;\r\n  let requestObj = {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  };\r\n  return fetch(`http://localhost:8081/projects/user/${userId}/`, requestObj)\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const getTasks = (projectId) => {\r\n  let userId = JSON.parse(localStorage.getItem(\"jwt\")).user._id;\r\n  let token = JSON.parse(localStorage.getItem(\"jwt\")).token;\r\n  return fetch(\r\n    \"http://localhost:8081/project/tasks/\" +\r\n      userId.toString() +\r\n      \"/\" +\r\n      projectId.toString(),\r\n    {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    }\r\n  )\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const putPredecessors = (projectId, taskId, connectId) => {\r\n  let userId = JSON.parse(localStorage.getItem(\"jwt\")).user._id;\r\n  let token = JSON.parse(localStorage.getItem(\"jwt\")).token;\r\n  let Obj = {\r\n    taskId: taskId,\r\n    connectId: connectId,\r\n  };\r\n  return fetch(\r\n    \"http://localhost:8081/project/tasks/predecessors/\" +\r\n      userId.toString() +\r\n      \"/\" +\r\n      projectId.toString(),\r\n    {\r\n      method: \"PUT\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify(Obj),\r\n    }\r\n  )\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const putConnections = (projectId, source, target) => {\r\n  let userId = JSON.parse(localStorage.getItem(\"jwt\")).user._id;\r\n  let token = JSON.parse(localStorage.getItem(\"jwt\")).token;\r\n  let Obj = {\r\n    from: source,\r\n    to: target,\r\n  };\r\n  return fetch(\r\n    \"http://localhost:8081/project/connections/\" +\r\n      userId.toString() +\r\n      \"/\" +\r\n      projectId.toString(),\r\n    {\r\n      method: \"PUT\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify(Obj),\r\n    }\r\n  )\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\nexport const getConnections = (projectId) => {\r\n  let userId = JSON.parse(localStorage.getItem(\"jwt\")).user._id;\r\n  let token = JSON.parse(localStorage.getItem(\"jwt\")).token;\r\n\r\n  return fetch(\r\n    \"http://localhost:8081/project/connections/\" +\r\n      userId.toString() +\r\n      \"/\" +\r\n      projectId.toString(),\r\n    {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    }\r\n  )\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const putPosition = (projectId, taskId, position) => {\r\n  let userId = JSON.parse(localStorage.getItem(\"jwt\")).user._id;\r\n  let token = JSON.parse(localStorage.getItem(\"jwt\")).token;\r\n  let Obj = {\r\n    taskId: taskId,\r\n    position: position,\r\n  };\r\n  return fetch(\r\n    \"http://localhost:8081/project/position/\" +\r\n      userId.toString() +\r\n      \"/\" +\r\n      projectId.toString(),\r\n    {\r\n      method: \"PUT\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify(Obj),\r\n    }\r\n  )\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\n//new functions\r\nexport const updateTask = (task, projectId) => {\r\n  let userId = JSON.parse(localStorage.getItem(\"jwt\")).user._id;\r\n  let token = JSON.parse(localStorage.getItem(\"jwt\")).token;\r\n  console.log(task.id);\r\n  let Obj = {\r\n    id: task.id,\r\n    taskName: task.title,\r\n    taskDescription: task.description,\r\n    pessimisticTime: parseInt(task.pessimisticTime),\r\n    optimisticTime: parseInt(task.optimisticTime),\r\n    mostLikelyTime: parseInt(task.mostLikelyTime),\r\n  };\r\n  // console.log(task);\r\n  return fetch(\r\n    \"http://localhost:8081/project/task/\" +\r\n      userId.toString() +\r\n      \"/\" +\r\n      projectId.toString(),\r\n    {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify(Obj),\r\n    }\r\n  )\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .catch((err) => console.log(err));\r\n};\r\n","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\reportWebVitals.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\auth\\index.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\utils\\signupbutton\\Form.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\index.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\RoleReq.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\taskComponents\\MyTask.js",["96","97"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\utils\\signupbutton\\Tagify\\Assigner.js",["98","99","100"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\App.js",[],["101","102"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\newProjectForm\\CreateProject.js",["103"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\utils\\signupbutton\\Social.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\taskComponents\\EditModel.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\MainRouter.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\utils\\signupbutton\\Personal.js",[],{"ruleId":"104","severity":1,"message":"105","line":3,"column":33,"nodeType":"106","messageId":"107","endLine":3,"endColumn":39},{"ruleId":"104","severity":1,"message":"108","line":4,"column":3,"nodeType":"106","messageId":"107","endLine":4,"endColumn":10},{"ruleId":"104","severity":1,"message":"109","line":10,"column":3,"nodeType":"106","messageId":"107","endLine":10,"endColumn":10},{"ruleId":"110","severity":1,"message":"111","line":54,"column":37,"nodeType":"112","messageId":"113","endLine":54,"endColumn":39},{"ruleId":"114","severity":1,"message":"115","line":62,"column":33,"nodeType":"116","messageId":"117","endLine":62,"endColumn":49},{"ruleId":"110","severity":1,"message":"111","line":246,"column":38,"nodeType":"112","messageId":"113","endLine":246,"endColumn":40},{"ruleId":"110","severity":1,"message":"111","line":298,"column":57,"nodeType":"112","messageId":"113","endLine":298,"endColumn":59},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","severity":1,"message":"123","line":180,"column":56,"nodeType":"124","messageId":"125","endLine":180,"endColumn":57},{"ruleId":"104","severity":1,"message":"126","line":5,"column":10,"nodeType":"106","messageId":"107","endLine":5,"endColumn":15},{"ruleId":"104","severity":1,"message":"105","line":5,"column":17,"nodeType":"106","messageId":"107","endLine":5,"endColumn":23},{"ruleId":"104","severity":1,"message":"127","line":1,"column":17,"nodeType":"106","messageId":"107","endLine":1,"endColumn":26},{"ruleId":"110","severity":1,"message":"111","line":27,"column":37,"nodeType":"112","messageId":"113","endLine":27,"endColumn":39},{"ruleId":"110","severity":1,"message":"111","line":29,"column":25,"nodeType":"112","messageId":"113","endLine":29,"endColumn":27},{"ruleId":"118","replacedBy":"128"},{"ruleId":"120","replacedBy":"129"},{"ruleId":"104","severity":1,"message":"130","line":109,"column":38,"nodeType":"106","messageId":"107","endLine":109,"endColumn":44},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'addEdge' is defined but never used.","'addTask' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-self-assign","'task.description' is assigned to itself.","MemberExpression","selfAssignment","no-native-reassign",["131"],"no-negated-in-lhs",["132"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'Modal' is defined but never used.","'useEffect' is defined but never used.",["131"],["132"],"'skills' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]