[{"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\Chat.js":"1","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\taskComponents\\AddTask.js":"2","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\taskComponents\\TrelloTask.js":"3"},{"size":5842,"mtime":1619276131350,"results":"4","hashOfConfig":"5"},{"size":5949,"mtime":1619276131354,"results":"6","hashOfConfig":"5"},{"size":9480,"mtime":1619276183258,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1hf05uk",{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"12","messages":"13","errorCount":4,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\Chat.js",["15","16","17","18","19"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\taskComponents\\AddTask.js",["20"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\taskComponents\\TrelloTask.js",["21","22","23","24"],"import React, { Component } from \"react\";\r\nimport { listmytasks } from \"../apiProject\";\r\nimport { getCurrentUser } from \"./../../user/apiUser\";\r\nimport { updateTask } from \"./../apiProject\";\r\nimport Board from \"react-trello\";\r\nimport { deleteTask, getTasks } from \"../apiProject\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateTasks } from \"./../../store/tasks\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport EditModel from \"./EditModel\";\r\nlet data = {};\r\nlet projleader = \"\";\r\nlet tasks = [];\r\nlet projectId = \"\";\r\n\r\nclass TrelloTask extends Component {\r\n  state = {\r\n    mytasks: [],\r\n    boardData: { lanes: [] },\r\n    editable: true,\r\n    isleader: false,\r\n    show: false,\r\n    alltasks: [],\r\n    cardId: \"\",\r\n    currentTask: {},\r\n    flag: false,\r\n  };\r\n  setEventBus = (eventBus) => {\r\n    this.setState({ eventBus });\r\n  };\r\n  handleDragStart = (cardId, laneId) => {\r\n    this.setState({\r\n      flag: false,\r\n    });\r\n    console.log(\"drag started\");\r\n    if (tasks === {}) return;\r\n    tasks.forEach((task) => {\r\n      if (task.id === cardId) {\r\n        // console.log(getCurrentUser()._id)\r\n        task.assigned.forEach((user) => {\r\n          // console.log(user)\r\n          if (user === getCurrentUser()._id)\r\n            this.setState({\r\n              flag: true,\r\n            });\r\n        });\r\n      }\r\n    });\r\n    // console.log(flag);\r\n  };\r\n  handleDragEnd = (cardId, sourceLaneId, targetLaneId) => {\r\n    console.log(\"drag ended\");\r\n    // console.log(projleader, source);\r\n    if (\r\n      projleader === getCurrentUser()._id &&\r\n      sourceLaneId === \"Review\" &&\r\n      targetLaneId === \"COMPLETED\"\r\n    )\r\n      flag = true;\r\n\r\n    if (projleader === getCurrentUser()._id && sourceLaneId === \"COMPLETED\")\r\n      flag = true;\r\n\r\n    console.log(\"flag:\", flag);\r\n    if (flag === false) {\r\n      alert(\r\n        \"Sry.. You are not allowed to do this operation.. Changes made will be resetted\"\r\n      );\r\n      window.location.reload(false);\r\n    }\r\n  };\r\n\r\n  onCardDelete = async (cardId, laneId) => {\r\n    if (projleader === getCurrentUser()._id) {\r\n      let response = window.confirm(\"Are you Sure?\");\r\n      if (response) {\r\n        await deleteTask(cardId, projectId);\r\n        await getTasks(projectId).then((data) => {\r\n          this.props.updateTasks({ tasks: data.tasks });\r\n          // console.log(data);\r\n        });\r\n        // this.updateBoard();\r\n      } else {\r\n        // toast.error(\"Gimme a second...\", {\r\n        //   position: \"top-right\",\r\n        //   autoClose: 5000,\r\n        //   hideProgressBar: false,\r\n        //   closeOnClick: true,\r\n        //   pauseOnHover: true,\r\n        //   draggable: true,\r\n        //   progress: undefined,\r\n        // });\r\n        window.location.reload();\r\n      }\r\n    } else {\r\n      toast.warning(\r\n        \"You are not allowed to delete tasks.. Your action will be reverted..\"\r\n      );\r\n      window.location.reload();\r\n    }\r\n  };\r\n  async componentDidMount() {\r\n    projectId = this.props.projectId;\r\n    if (this.props.status === \"Completed\") {\r\n      this.setState({\r\n        editable: false,\r\n      });\r\n    }\r\n\r\n    await listmytasks().then((data) => {\r\n      let allproj = data.userProjects;\r\n      allproj.forEach((proj) => {\r\n        if (proj._id === this.props.projectId) {\r\n          projleader = proj.leader;\r\n          // this.setState({\r\n          //   mytasks: proj.tasks,\r\n          // });\r\n          // console.log(this.state.mytasks)\r\n        }\r\n      });\r\n    });\r\n    getTasks(this.props.projectId).then((val) => {\r\n      val.tasks.shift();\r\n      val.tasks.shift();\r\n      this.setState({ mytasks: val.tasks, alltasks: val.tasks });\r\n      this.updateBoard();\r\n    });\r\n    if (getCurrentUser()._id === projleader)\r\n      this.setState({\r\n        isleader: true,\r\n      });\r\n  }\r\n  showMe = () => {\r\n    this.setState({ show: true });\r\n  };\r\n  hideMe = () => {\r\n    this.setState({ show: false });\r\n  };\r\n\r\n  onCardClick = (cardId, metadata, laneId) => {\r\n    const currentTask = this.state.alltasks.find(({ _id }) => _id === cardId);\r\n    this.setState({\r\n      cardId: cardId,\r\n      currentTask,\r\n    });\r\n    this.showMe();\r\n  };\r\n  updateBoard = () => {\r\n    const mytasks = this.state.mytasks;\r\n    // console.log(mytasks);\r\n    // console.log(\"mytasks:\" + mytasks);\r\n    let cards_planned = [];\r\n    let cards_wip = [];\r\n    let cards_review = [];\r\n    let cards_completed = [];\r\n    mytasks.forEach((task) => {\r\n      var card = {\r\n        id: task._id,\r\n        title: task.taskName,\r\n        label: task.mostLikelyTime + \" days\",\r\n        description: task.taskDescription,\r\n        pessimisticTime: task.pessimisticTime,\r\n        optimisticTime: task.optimisticTime,\r\n        assigned: task.assignedTo,\r\n        desc: task.taskDescription,\r\n        mostLikelyTime: task.mostLikelyTime,\r\n        status: task.status,\r\n      };\r\n      if (task.status === \"PLANNED\") cards_planned.push(card);\r\n      else if (task.status === \"WIP\") cards_wip.push(card);\r\n      else if (task.status === \"Review\") cards_review.push(card);\r\n      else if (task.status === \"COMPLETED\") cards_completed.push(card);\r\n    });\r\n    data = {\r\n      lanes: [\r\n        {\r\n          id: \"PLANNED\",\r\n          title: \"Todo Tasks\",\r\n          label: \"1/4\",\r\n          droppable: this.state.editable,\r\n          cards: cards_planned,\r\n          style: {\r\n            backgroundColor: \"#3179ba\",\r\n            boxShadow: \"2px 2px 4px 0px rgba(0,0,0,0.75)\",\r\n            color: \"#fff\",\r\n            width: \"260\",\r\n          },\r\n        },\r\n        {\r\n          id: \"WIP\",\r\n          title: \"Work In Progress\",\r\n          label: \"2/4\",\r\n          droppable: this.state.editable,\r\n          cards: cards_wip,\r\n          style: {\r\n            backgroundColor: \"#FFCC33\",\r\n            boxShadow: \"2px 2px 4px 0px rgba(0,0,0,0.75)\",\r\n            color: \"#fff\",\r\n            width: \"260\",\r\n          },\r\n        },\r\n        {\r\n          id: \"Review\",\r\n          title: \"Review\",\r\n          label: \"3/4\",\r\n          droppable: this.state.editable,\r\n          cards: cards_review,\r\n          style: {\r\n            backgroundColor: \"#FF9900\",\r\n            boxShadow: \"2px 2px 4px 0px rgba(0,0,0,0.75)\",\r\n            color: \"#fff\",\r\n            width: \"260\",\r\n          },\r\n        },\r\n        {\r\n          id: \"COMPLETED\",\r\n          title: \"Completed\",\r\n          label: \"4/4\",\r\n          droppable: this.state.editable && this.state.isleader,\r\n          cards: cards_completed,\r\n          style: {\r\n            backgroundColor: \"#00CC00\",\r\n            boxShadow: \"2px 2px 4px 0px rgba(0,0,0,0.75)\",\r\n            color: \"#fff\",\r\n            width: \"260\",\r\n          },\r\n        },\r\n      ],\r\n    };\r\n    this.setState({ boardData: data });\r\n  };\r\n  shouldReceiveNewData = (nextData) => {\r\n    let cards = [];\r\n    nextData.lanes.forEach((data) => {\r\n      data.cards.forEach((card) => {\r\n        if (this.state.flag === true) card.status = card.laneId;\r\n        else card.laneId = card.status;\r\n        cards.push(card);\r\n      });\r\n    });\r\n    tasks = cards;\r\n    cards.forEach((card) => {\r\n      updateTask(card, this.props.projectId);\r\n    });\r\n    this.setState({ mytasks: cards });\r\n  };\r\n  // componentWillReceiveProps() {\r\n  //   if (\r\n  //     this.state.mytasks.length < this.props.tasks.length &&\r\n  //     this.state.mytasks.length !== this.props.tasks.length\r\n  //   ) {\r\n  //     this.setState({ mytasks: this.props.tasks });\r\n  //     console.log(\"new Tasks:\", this.state.tasks);\r\n  //     // this.updateBoard();\r\n  //   }\r\n  // }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const tasks = [...this.props.tasks];\r\n    tasks.shift();\r\n    tasks.shift();\r\n    if (prevState.mytasks.length !== tasks.length) {\r\n      this.setState({ mytasks: tasks });\r\n      this.updateBoard();\r\n    }\r\n    // console.log(prevState.mytasks.length, tasks.length);\r\n  }\r\n  render() {\r\n    // console.log(this.state.mytasks);\r\n    return (\r\n      <div>\r\n        {this.state.show && this.state.isleader ? (\r\n          <EditModel\r\n            projectId={projectId}\r\n            task={this.state.currentTask}\r\n            id={this.state.cardId}\r\n            show={this.state.show}\r\n            showMe={this.showMe}\r\n            hideMe={this.hideMe}\r\n          />\r\n        ) : (\r\n          <div></div>\r\n        )}\r\n        <ToastContainer />\r\n        <div>\r\n          <h3>Task List</h3>\r\n        </div>\r\n        <div>\r\n          <Board\r\n            // editable\r\n            // editLaneTitle\r\n            data={this.state.boardData}\r\n            onDataChange={this.shouldReceiveNewData}\r\n            eventBusHandle={this.setEventBus}\r\n            handleDragStart={this.handleDragStart}\r\n            handleDragEnd={this.handleDragEnd}\r\n            onCardDelete={this.onCardDelete}\r\n            onCardClick={this.onCardClick}\r\n            hideCardDeleteIcon={!this.state.isleader}\r\n            style={{\r\n              backgroundColor: \"#eee\",\r\n              // height: \"65vh\",\r\n            }}\r\n            cardStyle={{\r\n              minWidth: \"250\",\r\n              width: \"250\",\r\n              maxWidth: \"250\",\r\n              overflow: \"hidden\",\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  tasks: state.tasks.tasks,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  updateTasks: (params) => dispatch(updateTasks(params)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TrelloTask);\r\n",{"ruleId":"25","severity":1,"message":"26","line":7,"column":10,"nodeType":"27","messageId":"28","endLine":7,"endColumn":13},{"ruleId":"25","severity":1,"message":"29","line":34,"column":7,"nodeType":"27","messageId":"28","endLine":34,"endColumn":11},{"ruleId":"30","severity":1,"message":"31","line":57,"column":6,"nodeType":"32","endLine":57,"endColumn":8,"suggestions":"33"},{"ruleId":"30","severity":1,"message":"34","line":79,"column":6,"nodeType":"32","endLine":79,"endColumn":12,"suggestions":"35"},{"ruleId":"30","severity":1,"message":"36","line":158,"column":6,"nodeType":"32","endLine":158,"endColumn":12,"suggestions":"37"},{"ruleId":"25","severity":1,"message":"38","line":3,"column":19,"nodeType":"27","messageId":"28","endLine":3,"endColumn":27},{"ruleId":"39","severity":2,"message":"40","line":59,"column":7,"nodeType":"27","messageId":"41","endLine":59,"endColumn":11},{"ruleId":"39","severity":2,"message":"40","line":62,"column":7,"nodeType":"27","messageId":"41","endLine":62,"endColumn":11},{"ruleId":"39","severity":2,"message":"40","line":64,"column":26,"nodeType":"27","messageId":"41","endLine":64,"endColumn":30},{"ruleId":"39","severity":2,"message":"40","line":65,"column":9,"nodeType":"27","messageId":"41","endLine":65,"endColumn":13},"no-unused-vars","'Row' is defined but never used.","Identifier","unusedVar","'init' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'chat.length' and 'project_id'. Either include them or remove the dependency array.","ArrayExpression",["42"],"React Hook useEffect has a missing dependency: 'project_id'. Either include it or remove the dependency array.",["43"],"React Hook useLayoutEffect has a missing dependency: 'stayScrolled'. Either include it or remove the dependency array.",["44"],"'getTasks' is defined but never used.","no-undef","'flag' is not defined.","undef",{"desc":"45","fix":"46"},{"desc":"47","fix":"48"},{"desc":"49","fix":"50"},"Update the dependencies array to be: [chat.length, project_id]",{"range":"51","text":"52"},"Update the dependencies array to be: [chat, project_id]",{"range":"53","text":"54"},"Update the dependencies array to be: [chat, stayScrolled]",{"range":"55","text":"56"},[1654,1656],"[chat.length, project_id]",[2274,2280],"[chat, project_id]",[4940,4946],"[chat, stayScrolled]"]