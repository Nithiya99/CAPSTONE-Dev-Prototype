[{"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\core\\Home.js":"1"},{"size":5907,"mtime":1618583717629,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"1hf05uk","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\core\\Home.js",["7","8","9","10","11","12","13"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getNotifications } from \"../apiNotifications\";\r\nimport {\r\n  notificationAdded,\r\n  getNotified,\r\n  clearNotifications,\r\n} from \"../store/notifications\";\r\nimport * as _ from \"lodash\";\r\nimport { getCurrentUser } from \"../user/apiUser\";\r\nimport ProjectRecommendation from \"./ProjectRecommendation\";\r\nimport { getProject } from \"../project/apiProject\";\r\nimport { listmyprojects } from \"./../project/apiProject\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport RatingComponent from \"../project/RatingComponent\";\r\nclass Home extends Component {\r\n  state = {\r\n    notificationGroupedObject: {},\r\n    show: false,\r\n  };\r\n  componentDidMount() {\r\n    this.props.clearNotifications();\r\n    getNotifications()\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((val) => {\r\n        let notifications = val.notifications;\r\n        notifications.map((notif) => {\r\n          this.props.getNotified({\r\n            type: notif.notifType,\r\n            id: notif._id,\r\n            message: notif.message,\r\n            read: notif.read,\r\n            projectId: notif.projectId ? notif.projectId : \"none\",\r\n          });\r\n        });\r\n        let notificationGroupedObject = _.groupBy(notifications, \"notifType\");\r\n        this.setState({ notificationGroupedObject });\r\n      });\r\n    listmyprojects().then((projects) =>\r\n      this.setState({ projects: projects.userProjects })\r\n    );\r\n  }\r\n  getProjectTeamFromState = (projectId) => {\r\n    return this.state.projects.map((project) => {\r\n      if (project._id.toString() === projectId.toString()) {\r\n        return project.team;\r\n      }\r\n    });\r\n    // return undefined;\r\n  };\r\n  handleClose = () => {\r\n    this.setState({ show: false });\r\n  };\r\n  render() {\r\n    if (getCurrentUser()._id === undefined) return;\r\n    const { notifications } = this.props;\r\n    const { notificationGroupedObject, projects } = this.state;\r\n    // if (this.props.notifications.length > 0) {\r\n    //   console.log(\"NOTIFICATIONS:\");\r\n    //   console.log(this.props.notifications);\r\n    // }\r\n    // notifications.map((notif) => {\r\n    //   console.log(notif);\r\n    // });\r\n\r\n    // console.log(notificationGroupedObject);\r\n    // console.log(projects);\r\n    if (\r\n      Object.keys(notificationGroupedObject).length !== 0 &&\r\n      projects !== undefined\r\n    ) {\r\n      if (notificationGroupedObject[\"FeedbackForm\"].length > 0) {\r\n        console.log(\"Feedback Forms:\");\r\n        console.log(notificationGroupedObject.FeedbackForm);\r\n      }\r\n      //   this.setState({ show: true });\r\n\r\n      //   console.log(notificationGroupedObject.FeedbackForm);\r\n      //   let arr = notificationGroupedObject.FeedbackForm;\r\n      //   arr.map((notif) => {\r\n      //     if (notif.projectId) {\r\n      //       // console.log(notif.projectId);\r\n      //       const team = this.getProjectTeamFromState(notif.projectId);\r\n      //       console.log(team[team.length - 1]);\r\n      //       //   }\r\n      //       // });\r\n      //       const { show } = this.state;\r\n      //       return (\r\n      //         <>\r\n      //           <Modal\r\n      //             show={show}\r\n      //             onHide={this.handleClose}\r\n      //             backdrop=\"static\"\r\n      //             keyboard={false}\r\n      //           >\r\n      //             <Modal.Header closeButton>\r\n      //               <Modal.Title>\r\n      //                 Lets Give your amazing team some Feedback!\r\n      //               </Modal.Title>\r\n      //             </Modal.Header>\r\n      //             <Modal.Body scrollable=\"true\">\r\n      //               (\r\n      //               <>\r\n      //                 <RatingComponent\r\n      //                   team={team[team.length - 1]}\r\n      //                   rating={this.state.rating}\r\n      //                   // handleValueChange={this.handleValueChange}\r\n      //                 />\r\n      //                 <Button\r\n      //                   onClick={() => {\r\n      //                     const { rating } = this.state;\r\n      //                     // console.log(rating);\r\n      //                     this.submitproject();\r\n      //                     this.setState({ show: false });\r\n      //                   }}\r\n      //                 >\r\n      //                   Submit\r\n      //                 </Button>\r\n      //               </>\r\n      //               )\r\n      //             </Modal.Body>\r\n      //           </Modal>\r\n      //         </>\r\n      //       );\r\n      //     }\r\n      //   });\r\n      //   this.setState({ show: false });\r\n      // }\r\n      // console.log(notificationGroupedObject);\r\n      // notificationGroupedObject[\"FeedbackForm\"].map((feedbackNotif) => {\r\n      //   // console.log(feedbackNotif);\r\n      //   if (feedbackNotif.projectId !== undefined) {\r\n      //     // getProject(feedbackNotif.projectId).then((project) => {\r\n      //     //   console.log(project.team);\r\n      //     // });\r\n      //     // console.log(feedbackNotif.projectId);\r\n      // const team = this.getProjectTeamFromState(feedbackNotif.projectId);\r\n      //     this.setState({ team });\r\n      //     console.log(this.state.team);\r\n      //   }\r\n      // });\r\n      // }\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"jumbotron\">\r\n          <h2>Home</h2>\r\n          <p className=\"lead\">News Feed (Posts) will be here</p>\r\n        </div>\r\n        <ProjectRecommendation />\r\n      </>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  notifications: state.notifications.notifications,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addNotification: (params) => dispatch(notificationAdded(params)),\r\n  getNotified: (params) => dispatch(getNotified(params)),\r\n  clearNotifications: () => dispatch(clearNotifications()),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n",{"ruleId":"14","severity":1,"message":"15","line":12,"column":10,"nodeType":"16","messageId":"17","endLine":12,"endColumn":20},{"ruleId":"14","severity":1,"message":"18","line":14,"column":10,"nodeType":"16","messageId":"17","endLine":14,"endColumn":15},{"ruleId":"14","severity":1,"message":"19","line":14,"column":17,"nodeType":"16","messageId":"17","endLine":14,"endColumn":23},{"ruleId":"14","severity":1,"message":"20","line":15,"column":8,"nodeType":"16","messageId":"17","endLine":15,"endColumn":23},{"ruleId":"21","severity":1,"message":"22","line":29,"column":35,"nodeType":"23","messageId":"24","endLine":29,"endColumn":37},{"ruleId":"21","severity":1,"message":"25","line":46,"column":46,"nodeType":"23","messageId":"26","endLine":46,"endColumn":48},{"ruleId":"14","severity":1,"message":"27","line":58,"column":13,"nodeType":"16","messageId":"17","endLine":58,"endColumn":26},"no-unused-vars","'getProject' is defined but never used.","Identifier","unusedVar","'Modal' is defined but never used.","'Button' is defined but never used.","'RatingComponent' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'notifications' is assigned a value but never used."]