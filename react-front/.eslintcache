[{"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\SubmitProject.js":"1","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\UserRecommendation.js":"2","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\MyProjects.js":"3","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\user\\Profile.js":"4","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\MainRouter.js":"5","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\apiProject.js":"6","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\layout\\LayoutComponent.js":"7","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\App.js":"8","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\newProjectForm\\CreateProject.js":"9"},{"size":1538,"mtime":1618058610908,"results":"10","hashOfConfig":"11"},{"size":3139,"mtime":1618058615365,"results":"12","hashOfConfig":"11"},{"size":10956,"mtime":1618059439172,"results":"13","hashOfConfig":"11"},{"size":12434,"mtime":1618060499235,"results":"14","hashOfConfig":"11"},{"size":1879,"mtime":1618061149398,"results":"15","hashOfConfig":"11"},{"size":13769,"mtime":1618070804598,"results":"16","hashOfConfig":"11"},{"size":15351,"mtime":1618063772402,"results":"17","hashOfConfig":"11"},{"size":891,"mtime":1618067750487,"results":"18","hashOfConfig":"11"},{"size":5214,"mtime":1618070874723,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hf05uk",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\SubmitProject.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\UserRecommendation.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\MyProjects.js",[],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\user\\Profile.js",["40","41"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\MainRouter.js",["42","43"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\apiProject.js",["44","45"],"D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\layout\\LayoutComponent.js",["46","47","48","49","50","51","52","53"],"import React, { Component } from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport Pert from \"./Pert\";\r\nimport Task from \"./Task\";\r\nimport ReactFlow, {\r\n  addEdge,\r\n  Background,\r\n  Controls,\r\n  MiniMap,\r\n} from \"react-flow-renderer\";\r\nimport {\r\n  addTask,\r\n  getTasks,\r\n  putConnections,\r\n  getConnections,\r\n  putPredecessors,\r\n  putPosition,\r\n} from \"../apiProject\";\r\nimport jsPERT from \"js-pert\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { nodeAdded, connectionAdded } from \"../../store/cpm\";\r\nconst styles = (theme) => ({\r\n  modal: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  paper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 3, 3),\r\n  },\r\n});\r\nclass LayoutComponent extends Component {\r\n  state = {\r\n    elements: [],\r\n    tasks: [],\r\n    nodes: [],\r\n    pert: {},\r\n    task: {},\r\n    show: false,\r\n    checked: false,\r\n  };\r\n\r\n  // getSource((link)=>{\r\n  //     this.state.elements.map((elem) => {\r\n  //       console.log(link.from, elem.key);\r\n  //     });\r\n  //   })\r\n  componentDidMount() {\r\n    //get DB tasks\r\n\r\n    getTasks(this.props.project._id)\r\n      .then((data) => {\r\n        if (data.err !== undefined) {\r\n          if (data.err === \"No tasks found\") {\r\n            this.setState({ tasks: [] });\r\n          }\r\n        } else {\r\n          if (data.tasks.length > 0 && data.tasks !== undefined)\r\n            this.setState({ tasks: data.tasks });\r\n        }\r\n      })\r\n      .then(() => {\r\n        if (!this.state.tasks || this.state.tasks[0] === \"\") return null;\r\n        this.state.tasks.map((task) => {\r\n          // label: \"Bleh\",\r\n          // description: \"Bleh max\",\r\n          // time: 2,\r\n          // pessimistic: 3,\r\n          // optimistic: 1,\r\n          // predecessors: [\"1\", \"2\"],\r\n          task[\"label\"] = task.taskName;\r\n          task[\"description\"] = task.description;\r\n          task[\"time\"] = task.mostLikelyTime;\r\n          task[\"optimistic\"] = task.optimisticTime;\r\n          task[\"pessimistic\"] = task.pessimisticTime;\r\n          // console.log(task);\r\n          if (\r\n            task.taskName !== \"Completed!!\" &&\r\n            task.taskName !== \"Lets Start Working\"\r\n          ) {\r\n            let ele = [...this.state.elements];\r\n            // console.log(ele);\r\n            let newNode = {\r\n              key: task._id,\r\n              id: (ele.length + 1).toString(),\r\n              data: task,\r\n              sourcePosition: \"right\",\r\n              targetPosition: \"left\",\r\n              position:\r\n                task.position !== undefined\r\n                  ? task.position\r\n                  : {\r\n                      x: (Math.random() * window.innerWidth) / 2,\r\n                      y: (Math.random() * window.innerHeight) / 2,\r\n                    },\r\n            };\r\n            ele.push(newNode);\r\n            this.setState({ elements: ele });\r\n            let newNodes = [...this.state.nodes];\r\n            newNodes.push(newNode);\r\n            this.setState({ nodes: newNodes });\r\n            this.props.nodeAdded({ node: newNode });\r\n            // console.log(this.state.elements);\r\n          } else {\r\n            if (task.taskName === \"Lets Start Working\") {\r\n              let ele = [...this.state.elements];\r\n              let newNode = {\r\n                key: task._id,\r\n                id: \"1\",\r\n                type: \"input\",\r\n                data: {\r\n                  label: \"Lets Start Working\",\r\n                  description:\r\n                    \"Start working on tasks to complete project on time\",\r\n                  pessimistic: 0,\r\n                  time: 0,\r\n                  optimistic: 0,\r\n                  predecessors: [],\r\n                  _id: task._id,\r\n                },\r\n                sourcePosition: \"right\",\r\n                position:\r\n                  task.position !== undefined ? task.position : { x: 0, y: 0 },\r\n              };\r\n              ele.push(newNode);\r\n              this.setState({ elements: ele });\r\n              this.props.nodeAdded({ node: newNode });\r\n            }\r\n            if (task.taskName === \"Completed!!\") {\r\n              let ele = [...this.state.elements];\r\n              let newNode = {\r\n                key: task._id,\r\n                id: \"2\",\r\n                type: \"output\",\r\n                data: {\r\n                  label: \"Completed!!\",\r\n                  description: \"Yaaayy you gus have completed the project\",\r\n                  pessimistic: 0,\r\n                  time: 0,\r\n                  optimistic: 0,\r\n                  predecessors: task.predecessors,\r\n                  _id: task._id,\r\n                },\r\n                targetPosition: \"left\",\r\n                position:\r\n                  task.position !== undefined\r\n                    ? task.position\r\n                    : { x: 500, y: 0 },\r\n              };\r\n              ele.push(newNode);\r\n              this.setState({ elements: ele });\r\n              let newNodes = [...this.state.nodes];\r\n              newNodes.push(newNode);\r\n              this.setState({ nodes: newNodes });\r\n              this.props.nodeAdded({ node: newNode });\r\n            }\r\n          }\r\n        });\r\n      })\r\n      .then(() => {\r\n        getConnections(this.props.project._id).then((data) => {\r\n          // this.state.elements.map((elem) => console.log(elem));\r\n          // console.log(this.state.elements);\r\n\r\n          data.connections.map((link) => {\r\n            // console.log(link);\r\n            this.state.elements.map((elem) => {\r\n              if (elem.key !== undefined) {\r\n                if (link.from.toString() === elem.key.toString()) {\r\n                  // console.log(\"from:\", elem);\r\n                  this.setState({ source: elem });\r\n                }\r\n                if (link.to.toString() === elem.key.toString()) {\r\n                  // console.log(\"to:\", elem);\r\n                  this.setState({ target: elem });\r\n                }\r\n              }\r\n              // console.log(getSource(link));\r\n              // console.log(elem);\r\n              // this.getSource(link);\r\n            });\r\n            let source = this.state.source;\r\n            let target = this.state.target;\r\n            // console.log(source);\r\n            // console.log(target);\r\n            // console.log(source, target);\r\n            // if (source.id !== undefined && target.id !== undefined) {\r\n            let edge = {\r\n              id:\r\n                \"reactflow__edge-\" +\r\n                source.id.toString() +\r\n                \"null-\" +\r\n                target.id.toString() +\r\n                \"null\",\r\n              source: source.id.toString(),\r\n              sourceHandle: null,\r\n              target: target.id.toString(),\r\n              targetHandle: null,\r\n            };\r\n            let ele = [...this.state.elements];\r\n            if (!this.edgeInElements(ele, edge)) {\r\n              this.props.connectionAdded({ connection: edge });\r\n              ele.push(edge);\r\n              // this.state.elements = ele;\r\n              this.setState({ elements: ele });\r\n              // console.log(this.state.elements);\r\n            }\r\n\r\n            return \"done\";\r\n            // }\r\n          });\r\n        });\r\n\r\n        // Pert display\r\n        // this.pertCalc();\r\n      });\r\n\r\n    //get DB connections\r\n  }\r\n  onLoad = (reactFlowInstance) => {\r\n    reactFlowInstance.fitView();\r\n  };\r\n  onNodeDragStop = (e, node) => {\r\n    console.log(node.position, node.data._id);\r\n    putPosition(this.props.project._id, node.data._id, node.position).then(\r\n      () => {\r\n        console.log(node.position + \" is saved\");\r\n      }\r\n    );\r\n  };\r\n  edgeInElements(elements, edge) {\r\n    let inside = false;\r\n    elements.map((elem) => {\r\n      if (elem.id.toString() === edge.id.toString()) {\r\n        inside = true;\r\n      }\r\n      return \"done\";\r\n    });\r\n    return inside;\r\n  }\r\n  onConnect = (params) => {\r\n    // postEdges(params);\r\n    // props.connectNodes(parseInt(params.source), parseInt(params.target));\r\n    // console.log(params.source, params.target);\r\n    // props.updateEdges();\r\n    // let predecessorArr = [];\r\n    // await getPredecessors(parseInt(params.target), params.source.toString())\r\n    //   .then((val) => (predecessorArr = val))\r\n    //   .catch((err) => console.log(err));\r\n    let source = params.source;\r\n    let target = params.target;\r\n    if (source !== undefined && target !== undefined) {\r\n      let edge = {\r\n        id:\r\n          \"reactflow__edge-\" +\r\n          source.toString() +\r\n          \"null-\" +\r\n          target.toString() +\r\n          \"null\",\r\n        source: source.toString(),\r\n        sourceHandle: null,\r\n        target: target.toString(),\r\n        targetHandle: null,\r\n      };\r\n      console.log(this.state.elements);\r\n      let sourceId = \"\";\r\n      let targetId = \"\";\r\n      this.state.elements.map((elem) => {\r\n        if (elem.id === source) {\r\n          sourceId = elem.key;\r\n        }\r\n        if (elem.id === target) {\r\n          targetId = elem.key;\r\n        }\r\n      });\r\n      putPredecessors(this.props.project._id, targetId, sourceId).then(() => {\r\n        console.log(sourceId + \" has new Predecessor \" + targetId);\r\n      });\r\n      let ele = [...this.state.elements];\r\n      if (!this.edgeInElements(ele, edge)) {\r\n        ele.push(edge);\r\n        putConnections(this.props.project._id, sourceId, targetId).then(() => {\r\n          console.log(\"connection \" + sourceId + \"to \" + targetId + \"added\");\r\n        });\r\n        // this.state.elements = ele;\r\n      }\r\n      this.props.connectionAdded(edge);\r\n      this.setState({ elements: ele });\r\n      console.log(this.state.elements);\r\n    }\r\n  };\r\n  getIdOfObjectId = (elemId) => {\r\n    let id = {};\r\n    // console.log(Number.isInteger(elemId));\r\n    this.state.elements.map((elem) => {\r\n      if (elem.data !== undefined)\r\n        if (elem.data._id.toString() === elemId) {\r\n          // console.log(\"element number:\" + elem.id);\r\n          id = elem.id;\r\n        }\r\n      return id;\r\n    });\r\n    return id;\r\n  };\r\n  handleClose = () => {\r\n    this.setState({ show: false });\r\n  };\r\n  pertCalc = () => {\r\n    this.setState({ show: true });\r\n    let tasksObject = {\r\n      1: {\r\n        id: \"1\",\r\n        mostLikelyTime: 0,\r\n        optimisticTime: 0,\r\n        pessimisticTime: 0,\r\n        predecessors: [],\r\n      },\r\n    };\r\n    let nodes = this.state.nodes;\r\n    // console.log();\r\n    tasksObject = nodes.map((elem) => {\r\n      // console.log(elem.data);\r\n      // if (elem.data.predecessors.length === 0 || elem.data.predecessors === undefined) return;\r\n      if (!this.state.checked) {\r\n        elem.data.predecessors.map((predecessor, index) => {\r\n          // console.log(predecessor);\r\n          // let id = this.getIdOfObjectId(predecessor.toString());\r\n          // console.log(id);\r\n          // console.log(elem.data);\r\n          let id = this.getIdOfObjectId(\r\n            elem.data.predecessors[index].toString()\r\n          );\r\n          // console.log(elem.data.predecessors[index] + \" id:\" + id);\r\n          // elem.data.predecessors[index] = id;\r\n          // this.setState({ checked: true });\r\n          console.log(elem.data.predecessors, id);\r\n          // console.log(elem.data.predecessors[index] + \" id:\" + id);\r\n        });\r\n      }\r\n      tasksObject[elem.id.toString()] = {\r\n        id: elem.id.toString(),\r\n        optimisticTime: elem.data.optimistic,\r\n        mostLikelyTime: elem.data.time,\r\n        pessimisticTime: elem.data.pessimistic,\r\n        predecessors: elem.data.predecessors,\r\n      };\r\n      // console.log(\"Element:\");\r\n      // console.log(elem);\r\n      // console.log(tasksObject);\r\n      // this.getIdOfObjectId(elem.data._id);\r\n      return tasksObject;\r\n    });\r\n    let task = tasksObject[tasksObject.length - 1];\r\n    this.setState({ task });\r\n    console.log(\"Pert:\");\r\n    let pert = jsPERT(tasksObject[tasksObject.length - 1]);\r\n    this.setState({ pert });\r\n    console.log(pert);\r\n    // axios.put(\"http://localhost:3002/api/pertcalc\", pert);\r\n    // return nodes;\r\n  };\r\n  onElementClick = (event, element) => {\r\n    // console.log(this.state.elements);\r\n    // setSelectedNode(element.data);\r\n    // console.log(element.data);\r\n  };\r\n\r\n  render() {\r\n    if (this.state.tasks === undefined) return null;\r\n    if (this.state.tasks.length === 0) return <div>No tasks</div>;\r\n    const { nodes, connections } = this.props;\r\n    const { status } = this.props.project;\r\n    let connect = status === \"Completed\" ? false : true;\r\n\r\n    let elements = [...nodes, ...connections];\r\n    // console.log(elements, this.state.elements);\r\n    return (\r\n      <div>\r\n        <div className=\"container-fluid\">\r\n          <ReactFlow\r\n            elements={this.state.elements}\r\n            onLoad={this.onLoad}\r\n            style={{\r\n              width: \"100%\",\r\n              height: \"95vh\",\r\n              backgroundColor: \"#1A192B\",\r\n            }}\r\n            onNodeDragStop={this.onNodeDragStop}\r\n            onConnect={this.onConnect}\r\n            onElementClick={this.onElementClick}\r\n            connectionLineStyle={{ stroke: \"#ddd\", strokeWidth: 2 }}\r\n            connectionLineType=\"bezier\"\r\n            snapToGrid={true}\r\n            snapGrid={[16, 16]}\r\n            nodesConnectable={connect}\r\n            nodesDraggable={connect}\r\n          >\r\n            <Background color=\"#888\" gap={16} />\r\n            <MiniMap\r\n              nodeColor={(n) => {\r\n                if (n.type === \"input\") return \"#DC143C\";\r\n                if (n.type === \"output\") return \"#90ee90\";\r\n                return \"cyan\";\r\n              }}\r\n            />\r\n            <Controls />\r\n          </ReactFlow>\r\n          <Button\r\n            onClick={() => {\r\n              this.pertCalc();\r\n            }}\r\n          >\r\n            Pert\r\n          </Button>\r\n          <Modal show={this.state.show} onHide={this.handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Details</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <h5>\r\n                <center>\r\n                  <strong>\r\n                    <u>PERT OBJECTS</u>\r\n                  </strong>\r\n                </center>\r\n              </h5>\r\n              <Task tasks={this.state.task} />\r\n              <h5>\r\n                <center>\r\n                  <strong>\r\n                    <u>PERT</u>\r\n                  </strong>\r\n                </center>\r\n              </h5>\r\n              <Pert pert={this.state.pert} />\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button onClick={this.handleClose}>Close</Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  nodes: state.cpm.nodes,\r\n  connections: state.cpm.connections,\r\n  state: state,\r\n  notifications: state.notifications.notifications,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  nodeAdded: (params) => dispatch(nodeAdded(params)),\r\n  connectionAdded: (params) => dispatch(connectionAdded(params)),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withStyles(styles)(LayoutComponent));\r\n","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\App.js",["54"],"import React, { Component } from \"react\";\r\nimport MainRouter from \"./MainRouter\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Signin from \"./user/Signin\";\r\nimport { Provider } from \"react-redux\";\r\nimport configureStore from \"./store/store\";\r\nimport { io } from \"socket.io-client\";\r\nconst store = configureStore();\r\nvar options = {\r\n  rememberUpgrade: true,\r\n  transports: [\"websocket\"],\r\n  secure: true,\r\n  rejectUnauthorized: false,\r\n};\r\nconst socketio = io(\"http://localhost:8081\", options);\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <BrowserRouter>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Signin}></Route>\r\n          </Switch>\r\n          <MainRouter />\r\n        </BrowserRouter>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","D:\\College\\Capstone\\CAPSTONE-Dev-Prototype\\react-front\\src\\project\\newProjectForm\\CreateProject.js",["55"],{"ruleId":"56","severity":1,"message":"57","line":54,"column":9,"nodeType":"58","messageId":"59","endLine":54,"endColumn":16},{"ruleId":"60","severity":1,"message":"61","line":56,"column":30,"nodeType":"62","messageId":"63","endLine":56,"endColumn":32},{"ruleId":"56","severity":1,"message":"64","line":1,"column":17,"nodeType":"58","messageId":"59","endLine":1,"endColumn":26},{"ruleId":"56","severity":1,"message":"65","line":18,"column":9,"nodeType":"58","messageId":"59","endLine":18,"endColumn":17},{"ruleId":"66","severity":1,"message":"67","line":203,"column":56,"nodeType":"68","messageId":"69","endLine":203,"endColumn":57},{"ruleId":"66","severity":1,"message":"67","line":218,"column":56,"nodeType":"68","messageId":"69","endLine":218,"endColumn":57},{"ruleId":"56","severity":1,"message":"70","line":8,"column":3,"nodeType":"58","messageId":"59","endLine":8,"endColumn":10},{"ruleId":"56","severity":1,"message":"71","line":14,"column":3,"nodeType":"58","messageId":"59","endLine":14,"endColumn":10},{"ruleId":"60","severity":1,"message":"61","line":69,"column":37,"nodeType":"62","messageId":"63","endLine":69,"endColumn":39},{"ruleId":"72","severity":1,"message":"73","line":77,"column":33,"nodeType":"74","messageId":"75","endLine":77,"endColumn":49},{"ruleId":"60","severity":1,"message":"61","line":172,"column":44,"nodeType":"62","messageId":"63","endLine":172,"endColumn":46},{"ruleId":"60","severity":1,"message":"61","line":273,"column":38,"nodeType":"62","messageId":"63","endLine":273,"endColumn":40},{"ruleId":"60","severity":1,"message":"61","line":330,"column":57,"nodeType":"62","messageId":"63","endLine":330,"endColumn":59},{"ruleId":"56","severity":1,"message":"76","line":380,"column":9,"nodeType":"58","messageId":"59","endLine":380,"endColumn":17},{"ruleId":"56","severity":1,"message":"77","line":16,"column":7,"nodeType":"58","messageId":"59","endLine":16,"endColumn":15},{"ruleId":"56","severity":1,"message":"78","line":109,"column":38,"nodeType":"58","messageId":"59","endLine":109,"endColumn":44},"no-unused-vars","'overdue' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useEffect' is defined but never used.","'dispatch' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'addEdge' is defined but never used.","'addTask' is defined but never used.","no-self-assign","'task.description' is assigned to itself.","MemberExpression","selfAssignment","'elements' is assigned a value but never used.","'socketio' is assigned a value but never used.","'skills' is assigned a value but never used."]